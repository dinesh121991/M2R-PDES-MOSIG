%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 17 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
4 0 /Helvetica-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
( Abstract) 150.23 542.79 T
1 9 Q
3.03 (This paper presents a new technique,) 54 523.79 P
2 F
3.03 (compiler) 207.37 523.79 P
3.03 (-dir) 239.19 523.79 P
3.03 (ected page) 252.36 523.79 P
5.31 (coloring) 54 513.79 P
1 F
5.31 (, that eliminates con\337ict misses in multiprocessor) 84.5 513.79 P
2.3 (applications. It enables applications to make better use of the) 54 503.79 P
0.49 (increased aggregate cache size available in a multiprocessor) 54 493.79 P
0.49 (. This) 273.13 493.79 P
0.34 (technique uses the compiler) 54 483.79 P
0.34 (\325) 155.6 483.79 P
0.34 (s knowledge of the access patterns of) 158.1 483.79 P
-0.17 (the parallelized applications to direct the operating system\325) 54 473.79 P
-0.17 (s virtual) 265.04 473.79 P
4.78 (memory page mapping strategy) 54 463.79 P
4.78 (. W) 181.49 463.79 P
4.78 (e demonstrate that this) 198.54 463.79 P
0.63 (technique can lead to signi\336cant performance improvements over) 54 453.79 P
1.33 (two commonly used page mapping strategies for machines with) 54 443.79 P
1.13 (either direct-mapped or two-way set-associative caches. W) 54 433.79 P
1.13 (e also) 272.24 433.79 P
-0.12 (show that it is complementary to latency-hiding techniques such as) 54 423.79 P
(prefetching.) 54 413.79 T
2.47 (W) 54 398.79 P
2.47 (e implemented compiler) 61.78 398.79 P
2.47 (-directed page coloring in the SUIF) 154.03 398.79 P
0.67 (parallelizing compiler and on two commercial operating systems.) 54 388.79 P
1.82 (W) 54 378.79 P
1.82 (e applied the technique to the SPEC95fp benchmark suite, a) 61.78 378.79 P
2.89 (representative set of numeric programs. W) 54 368.79 P
2.89 (e used the SimOS) 221.2 368.79 P
1.96 (machine simulator to analyze the applications and isolate their) 54 358.79 P
0.38 (performance bottlenecks. W) 54 348.79 P
0.38 (e also validated these results on a real) 155.75 348.79 P
5.58 (machine, an eight-processor 350MHz Digital AlphaServer) 54 338.79 P
5.58 (.) 291.87 338.79 P
0.89 (Compiler) 54 328.79 P
0.89 (-directed page coloring leads to signi\336cant performance) 87.82 328.79 P
2.86 (improvements for several applications. Overall, our technique) 54 318.79 P
1.43 (improves the SPEC95fp rating for eight processors by 8% over) 54 308.79 P
1.77 (Digital UNIX\325) 54 298.79 P
1.77 (s page mapping policy and by 20% over a page) 108.01 298.79 P
2.15 (coloring, a standard page mapping policy) 54 288.79 P
2.15 (. The SUIF compiler) 213.16 288.79 P
(achieves a SPEC95fp ratio of 57.4, the highest ratio to date.) 54 278.79 T
0 12 Q
(1  Intr) 54 257.79 T
(oduction) 86.45 257.79 T
1 9 Q
0.71 (Recent advances in parallelizing compilers have made it possible) 54 238.79 P
4.19 (to automatically generate parallel programs from sequential) 54 228.79 P
0.55 (numeric applications. This technology has the promise of making) 54 218.79 P
1.24 (parallel processing accessible to a much broader range of users.) 54 208.79 P
0.23 (However) 54 198.79 P
0.23 (, the performance of the parallel codes is highly sensitive) 86.63 198.79 P
(to its memory subsystem behavior) 54 188.79 T
(.) 177 188.79 T
-0.1 (W) 54 173.79 P
-0.1 (e used the SimOS machine simulation environment [21] to study) 61.78 173.79 P
5.63 (the performance of the SPEC95fp benchmark suite [22]) 54 163.79 P
2.84 (parallelized by the SUIF compiler [24]. A close look at the) 54 153.79 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.46 (behavior of the applications shows that the compiler is good at) 317.88 543.87 P
3.77 (making use of the additional processors and at eliminating) 317.88 533.87 P
2.56 (unnecessary communication between processors. However) 317.88 523.87 P
2.56 (, the) 539.94 523.87 P
2.33 (parallelized codes are not taking advantage of the increase in) 317.88 513.87 P
(aggregate cache size available to the parallel computation.) 317.88 503.87 T
0.74 (Unlike sequential applications, where a single processor accesses) 317.88 488.87 P
-0.13 (all of the data used by the application, each processor involved in a) 317.88 478.87 P
0.85 (parallel computation typically accesses only a subset of the data.) 317.88 468.87 P
-0.13 (This results in sparse memory access patterns that are not normally) 317.88 458.87 P
2.59 (found in sequential applications. The operating system\325) 317.88 448.87 P
2.59 (s page) 532.66 448.87 P
4.13 (mapping policy determines the location of an application\325) 317.88 438.87 P
4.13 (s) 554.5 438.87 P
1.98 (memory pages in physically indexed caches, such as the lar) 317.88 428.87 P
1.98 (ge) 549.5 428.87 P
-0.09 (external cache of current processors. The page mapping policies of) 317.88 418.87 P
6.2 (current operating systems were developed for sequential) 317.88 408.87 P
2.91 (applications, and not for the sparse access patterns found in) 317.88 398.87 P
1.71 (parallel programs. As a result, some regions of the processors\325) 317.88 388.87 P
(external caches go unused while other regions are over) 317.88 378.87 T
(-utilized.) 515.14 378.87 T
2.66 (T) 317.88 363.87 P
2.66 (o improve cache utilization and eliminate cache con\337icts in) 322.75 363.87 P
0.67 (parallelized code, we have developed a new technique,) 317.88 353.87 P
2 F
0.67 (compiler) 523.19 353.87 P
0.67 (-) 555 353.87 P
0.97 (dir) 317.88 343.87 P
0.97 (ected page coloring \050CDPC\051,) 328.05 343.87 P
1 F
0.97 (that involves the cooperation of) 440.15 343.87 P
-0.01 (the compiler and the operating system. CDPC is fully automatic as) 317.88 333.87 P
1.71 (it uses information available within the compiler to predict the) 317.88 323.87 P
4.77 (access patterns of a compiler) 317.88 313.87 P
4.77 (-parallelized application. This) 440.74 313.87 P
1.02 (information is used to customize the application\325) 317.88 303.87 P
1.02 (s page mapping) 499.47 303.87 P
0.61 (strategy) 317.88 293.87 P
0.61 (. The suggested page mapping is then treated as a hint by) 345.79 293.87 P
(the operating system [17].) 317.88 283.87 T
3.96 (W) 317.88 268.87 P
3.96 (e show the importance of page mapping policies to the) 325.66 268.87 P
0.48 (performance of a set of compiler) 317.88 258.87 P
0.48 (-parallelized workloads. W) 437.81 258.87 P
0.48 (e then) 535.78 258.87 P
0.87 (compare our compiler) 317.88 248.87 P
0.87 (-directed page coloring technique with two) 398.92 248.87 P
2.48 (existing page mapping policies used by commercial operating) 317.88 238.87 P
2.83 (systems. W) 317.88 228.87 P
2.83 (e show that neither existing page mapping policy) 361.48 228.87 P
5.59 (dominates the other) 317.88 218.87 P
5.59 (. However) 399.55 218.87 P
5.59 (, our technique consistently) 442.26 218.87 P
0.46 (outperforms both policies and can lead to signi\336cant performance) 317.88 208.87 P
(improvements, as much as a factor of two in some cases.) 317.88 198.87 T
1.44 (The rest of this paper is or) 317.88 183.87 P
1.44 (ganized as follows. In Section) 420.83 183.87 P
1.44 (2, we) 537.07 183.87 P
0.34 (provide background information on existing operating system and) 317.88 173.87 P
5.86 (compiler techniques aimed at improving memory system) 317.88 163.87 P
-0.12 (performance. After describing our experimental setup in Section) 317.88 153.87 P
-0.12 (3,) 551.25 153.87 P
1.16 (we analyze the base performance of the workloads in Section) 317.88 143.87 P
1.16 (4,) 551.25 143.87 P
1.58 (and show that memory subsystem performance is their primary) 317.88 133.87 P
3.66 (bottleneck. In Section) 317.88 123.87 P
3.66 (5, we describe the implementation of) 406.2 123.87 P
0.68 (compiler) 317.88 113.87 P
0.68 (-directed page coloring in the SUIF compiler and in two) 349.7 113.87 P
0.96 (existing operating systems. In Section) 317.88 103.88 P
0.96 (6, we use SimOS to show) 460.71 103.88 P
7.66 (the impact of compiler) 317.88 93.88 P
7.66 (-directed page coloring and a) 422.41 93.88 P
6.4 (complementary latency hiding technique, compiler) 317.88 83.88 P
6.4 (-inserted) 526.51 83.88 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
45 621 567 738 R
7 X
V
1 18 Q
0 X
(Compiler) 111.2 702 T
(-Directed Page Coloring for Multiprocessors) 178.85 702 T
1 14 Q
(Edouard Bugnion, Jennifer M. Anderson, T) 138.12 657 T
(odd C. Mowry*,) 381.33 657 T
(Mendel Rosenblum and Monica S. Lam) 194.01 639.67 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
54 72 297 144 R
7 X
V
1 9 Q
0 X
4.44 (T) 54 123 P
4.44 (o appear in the) 58.87 123 P
2 F
4.44 (Pr) 132.1 123 P
4.44 (oceedings of the Seventh International) 140.77 123 P
0.53 (Symposium on Ar) 54 113 P
0.53 (chitectural Support for Pr) 118.22 113 P
0.53 (ogramming Languages) 213.22 113 P
(and Operating Systems, \050ASPLOS VII\051,) 54 103 T
1 F
( October) 195.48 103 T
(, 1996.) 226.36 103 T
(Copyright 1996 ACM.) 54 88 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
52 564 295 618 R
7 X
V
0 X
(Computer Systems Laboratory) 118.25 612 T
(Stanford University) 137.05 602 T
(,) 207.7 602 T
(Stanford, CA 94305, USA) 125.88 592 T
2 F
(http://www-\337ash.stanfor) 106.41 582 T
(d.edu/SimOS) 193.84 582 T
(http://suif.stanfor) 132.41 572 T
(d.edu) 194.84 572 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
315 574 549 619 R
7 X
V
0 7.2 Q
0 X
(*) 334.72 616.6 T
1 9 Q
(Department of Electrical and Computer Engineering) 340.57 613 T
(University of T) 392.82 603 T
(oronto) 447.68 603 T
(T) 383.32 593 T
(oronto, Canada M5S 3G4) 388.19 593 T
2 F
(http://www) 370.94 583 T
(.eecg.tor) 410.29 583 T
(onto.edu/~tcm) 441.45 583 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
3.43 (prefetching. Finally) 54 732 P
3.43 (, we validate our results in Section) 127.84 732 P
3.43 (7 by) 274.93 732 P
2.23 (comparing the performance of compiler) 54 722 P
2.23 (-directed page coloring) 206.19 722 P
0.21 (with two existing page mapping policies on a Digital AlphaServer) 54 712 P
(8400 multiprocessor) 54 702 T
(.) 127.25 702 T
0 12 Q
(2  Backgr) 54 681 T
(ound) 103.12 681 T
1 9 Q
0.39 (A lar) 54 662 P
0.39 (ge amount of research has been performed on hardware- and) 72.47 662 P
4.08 (software-based techniques for improving memory subsystem) 54 652 P
-0.11 (performance. In this section, we brie\337y discuss existing techniques) 54 642 P
(that are performed by the operating system and the compiler) 54 632 T
(.) 270.71 632 T
0 11 Q
(2.1  Operating System T) 54 614.67 T
(echniques) 166.96 614.67 T
1 9 Q
0.52 (Operating systems generally group the pages of physical memory) 54 598 P
0.83 (into) 54 588 P
2 F
0.83 (colors,) 71.08 588 P
1 F
0.83 (where two pages have the same color if they map to) 98.9 588 P
1.96 (the same location in a physically-indexed cache. Hence, cache) 54 578 P
0.19 (con\337icts only occur between pages of the same color) 54 568 P
0.19 (. The number) 245.5 568 P
0.46 (of colors is the cache size divided by the product of the page size) 54 558 P
0.41 (and the associativity) 54 548 P
0.41 (. For example, in a system with a 1MB cache) 127.72 548 P
1.58 (and 4KB page size, there are 256 colors if the cache is direct-) 54 538 P
0.57 (mapped, and 128 if the cache is two-way set-associative. When a) 54 528 P
1.24 (page fault occurs, the operating system must allocate a physical) 54 518 P
0.24 (page for a given address in the application\325) 54 508 P
0.24 (s virtual address space.) 210.41 508 P
0.72 (The operating system uses a page mapping policy to determine a) 54 498 P
(preferred color and attempts to allocate a page of that color) 54 488 T
(.) 266.45 488 T
0.43 (Most current operating systems support one of two page mapping) 54 473 P
0.43 (policies,) 54 463 P
2 F
0.43 (page coloring) 86.93 463 P
1 F
0.43 ( and) 137.61 463 P
2 F
0.43 (bin hopping) 155.97 463 P
1 F
0.43 ([16]. Page coloring maps) 202.34 463 P
2.38 (consecutive virtual pages to consecutive colors. Page coloring) 54 453 P
2.89 (exploits spatial locality by ensuring that con\337icts only occur) 54 443 P
0.48 (between pages whose virtual addresses dif) 54 433 P
0.48 (fer by a multiple of the) 208.97 433 P
1.18 (cache set size. Current operating systems that use page coloring) 54 423 P
1.09 (include IRIX \050SGI\325) 54 413 P
1.09 (s version of UNIX\051 and W) 125.68 413 P
1.09 (indows NT) 226.51 413 P
1.09 (. A bin) 267.18 413 P
1.85 (hopping strategy cycles through the dif) 54 403 P
1.85 (ferent colors to allocate) 203.84 403 P
-0.16 (pages in the order page faults occur) 54 393 P
-0.16 (. Bin hopping exploits temporal) 180.51 393 P
2.16 (locality as con\337icts never occur between pages that were \336rst) 54 383 P
2.92 (touched close in time. Digital UNIX \050formerly DEC OSF/1\051) 54 373 P
1.29 (implements a bin hopping policy) 54 363 P
1.29 (. Bin hopping results in a non-) 177.1 363 P
-0.11 (deterministic coloring decision if multiple processors involved in a) 54 353 P
2.19 (parallel computation suf) 54 343 P
2.19 (fer concurrent page faults. While such) 145.71 343 P
1.09 (concurrent accesses are both legal and common, they result in a) 54 333 P
0.11 (race in the kernel to determine the color of each page and can lead) 54 323 P
(to unpredictable performance.) 54 313 T
0.56 (Both page coloring and bin hopping policies are) 54 298 P
2 F
0.56 (static policies) 233.99 298 P
1 F
0.56 (in) 287.12 298 P
0.51 (that they do not change the color of a page after a fault. Recently) 54 288 P
2 F
0.87 (dynamic policies) 54 278 P
1 F
0.87 (have also been proposed that recolor a page by) 118.73 278 P
0.42 (copying its contents to a newly allocated page of a dif) 54 268 P
0.42 (ferent color) 251.97 268 P
1.61 (and simultaneously changing the virtual-to-physical mapping of) 54 258 P
0.24 (the page. The operating system uses either some custom hardware) 54 248 P
0.46 (in the form of a cache-miss lookaside buf) 54 238 P
0.46 (fer [4] or a combination) 206.29 238 P
3.05 (of TLB state information and cache miss counters to detect) 54 228 P
0.76 (con\337icts [20]. When such a con\337ict is detected, one of the pages) 54 218 P
(involved in the con\337ict is recolored.) 54 208 T
3.19 (T) 54 193 P
3.19 (o our knowledge, the performance of dynamic policies for) 58.87 193 P
0.54 (multiprocessors has not been studied. However) 54 183 P
0.54 (, detecting con\337ict) 226.3 183 P
0.26 (misses in a multiprocessor is harder than on a uniprocessor as one) 54 173 P
3.17 (must be able to dif) 54 163 P
3.17 (ferentiate con\337ict misses from coherence) 133.5 163 P
0.54 (misses. The overheads of a recoloring operation are also likely to) 54 153 P
0.81 (be signi\336cantly lar) 54 143 P
0.81 (ger than on uniprocessors [23]. The TLB state) 122.46 143 P
0.55 (of each processor must be individually \337ushed and the recoloring) 54 133 P
-0.13 (operation may generate signi\336cant inter) 54 123 P
-0.13 (-processor communication.) 196.27 123 P
2.93 (The page mapping policies, and more generally the memory) 54 108 P
1.96 (management policies, of an operating system can lead to poor) 54 98 P
0.93 (performance for applications with non-standard requirements. T) 54 88 P
0.93 (o) 289.62 88 P
1.15 (overcome these limitations, operating systems such as V++ [13]) 54 78 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.99 (and Exokernel [10] allow sophisticated applications to manage) 317.88 732 P
1.68 (their allocated portions of physical memory) 317.88 722 P
1.68 (. These applications) 482.91 722 P
0.9 (can implement their own customized page replacement and page) 317.88 712 P
0.82 (mapping policies. In contrast to these approaches, CDPC is fully) 317.88 702 P
-0.04 (automatic and does not require applications to manipulate physical) 317.88 692 P
1.58 (addresses directly) 317.88 682 P
1.58 (. As a result, our technique can be easily and) 383.1 682 P
0.08 (safely integrated in existing operating systems while providing the) 317.88 672 P
(necessary \337exibility in page mapping decisions.) 317.88 662 T
0 11 Q
(2.2  Compiler T) 317.88 644.67 T
(echniques) 390.81 644.67 T
1 9 Q
3.51 (Compiler) 317.88 628 P
3.51 (-based techniques for improving memory subsystem) 351.7 628 P
0.21 (performance fall broadly into two categories: those that attempt to) 317.88 618 P
2 F
2.12 (r) 317.88 608 P
2.12 (educe) 321.05 608 P
1 F
2.12 ( the number of cache misses, and those that attempt to) 342.04 608 P
2 F
1.42 (tolerate) 317.88 598 P
1 F
1.42 ( miss latency) 345.88 598 P
1.42 (. It is preferable to reduce memory latency) 395.13 598 P
1.8 (before tolerating it, since this reduces the demand for memory) 317.88 588 P
(bandwidth that is often a precious resource in multiprocessors.) 317.88 578 T
0.64 (The \336rst category includes loop transformations such as blocking) 317.88 563 P
3.02 (that reorder the computation to enhance data locality [7,26].) 317.88 553 P
(Recently) 317.88 543 T
(, there has also been research to minimize communication) 349.29 543 T
2.84 (between processors by clever partitioning of the computation) 317.88 533 P
4.01 (across processors [3,1) 317.88 523 P
4.01 (1,15]. T) 404.8 523 P
4.01 (ransformations that make data) 437.24 523 P
0.27 (elements accessed by the same processor contiguous in the shared) 317.88 513 P
0.47 (address space have been shown to be useful for enhancing spatial) 317.88 503 P
1.24 (locality and minimizing false sharing [2]. These transformations) 317.88 493 P
1.33 (make the data accessed by each processor contiguous within an) 317.88 483 P
0.4 (individual data structure. T) 317.88 473 P
0.4 (echniques that mer) 415.94 473 P
0.4 (ge data structures in) 484.56 473 P
1.32 (the virtual address space have also been proposed to make data) 317.88 463 P
0.18 (accessed by each processor contiguous across data structures [14].) 317.88 453 P
0.32 (However) 317.88 443 P
0.32 (, such transformations are not applicable to all programs.) 350.51 443 P
2.19 (In contrast, compiler) 317.88 433 P
2.19 (-directed page coloring achieves a similar) 396.82 433 P
(ef) 317.88 423 T
(fect but is completely transparent to the application.) 324.71 423 T
0.17 (Padding [5]) 317.88 408 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0.17 (is a simple, commonly-used technique for eliminating) 362.72 408 P
1.1 (cache con\337icts. W) 317.88 398 P
1.1 (ith padding, the compiler or loader of) 385.96 398 P
1.1 (fsets the) 527.15 398 P
-0.01 (starting locations of data locations and increases the dimensions of) 317.88 388 P
0.95 (arrays, usually by a small number of cache lines, to avoid cache) 317.88 378 P
0.81 (con\337icts. While this is a relatively small change, it is not always) 317.88 368 P
0.17 (legal since constructs such as pointer arithmetic in C and common) 317.88 358 P
1.13 (blocks in FOR) 317.88 348 P
1.13 (TRAN expose the data layout to the programmer) 372.11 348 P
1.13 (.) 555.75 348 P
-0.03 (Padding cannot be legally applied unless every single access in the) 317.88 338 P
2.02 (whole program has been successfully analyzed and updated to) 317.88 328 P
0.57 (re\337ect the new data layout. Finally) 317.88 318 P
0.57 (, padding is constrained by the) 445.14 318 P
1.35 (fact that it operates on the virtual address space and not on the) 317.88 308 P
1.18 (physical address space. For example, pads that are lar) 317.88 298 P
1.18 (ger than a) 520.14 298 P
0.23 (page size are inef) 317.88 288 P
0.23 (fective if the operating system has a bin hopping) 381.14 288 P
(policy for page mapping.) 317.88 278 T
2.89 (T) 317.88 263 P
2.89 (o tolerate memory latency) 322.75 263 P
2.89 (, the compiler can insert prefetch) 425.07 263 P
0.83 (instructions to move data into the cache before it is needed, thus) 317.88 253 P
1.36 (overlapping memory accesses with computation [6,18]. Prefetch) 317.88 243 P
2.18 (instructions are supported in many recent processors \050e.g., the) 317.88 233 P
2.31 (MIPS R10000, the DEC Alpha 21) 317.88 223 P
2.31 (164\051. Previous studies have) 452.09 223 P
3.25 (demonstrated the ef) 317.88 213 P
3.25 (fectiveness of automatic compiler) 395.21 213 P
3.25 (-inserted) 526.51 213 P
0.65 (prefetching on sequential and hand-parallelized applications [19].) 317.88 203 P
3.89 (In this paper) 317.88 193 P
3.89 (, we present the \336rst results where automatic) 370.29 193 P
(prefetching is combined with automatic parallelization.) 317.88 183 T
0 12 Q
(3  Experimental Setup) 317.88 162 T
0 11 Q
(3.1  The W) 317.88 141.67 T
(orkloads) 368.61 141.67 T
1 9 Q
0.94 (W) 317.88 125 P
0.94 (e used the ten programs of the SPEC95fp benchmark suite for) 325.66 125 P
-0.16 (our experiments. The SPEC95fp suite is an industry standard set of) 317.88 115 P
-0.08 (programs designed to evaluate the performance of general-purpose) 317.88 105 P
2.74 (processors. These benchmarks are representative of numerical) 317.88 95 P
3.34 (computations and were not designed speci\336cally for parallel) 317.88 85 P
1.04 (systems. W) 317.88 75 P
1.04 (e run each application using the full \322reference\323 data) 359.7 75 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
-0.04 (set. As we see in T) 54 574.97 P
-0.04 (able) 121.17 574.97 P
-0.04 (1, these data sets are too lar) 138.42 574.97 P
-0.04 (ge to \336t into the) 237.26 574.97 P
0.8 (caches of current high-end workstations, but are small enough to) 54 564.97 P
(\336t in main memory) 54 554.97 T
(.) 122.67 554.97 T
0 11 Q
(3.2  The Compiler) 54 537.64 T
1 9 Q
1.8 (W) 54 520.97 P
1.8 (e used the Stanford SUIF research compiler to automatically) 61.78 520.97 P
1.66 (transform the applications into parallel programs. The compiler) 54 510.97 P
1.85 (translates sequential programs into parallelized source code for) 54 500.97 P
0.66 (shared-memory multiprocessors, which is then compiled with the) 54 490.97 P
0.65 (native compiler of the tar) 54 480.97 P
0.65 (get machine. The SUIF system includes) 147.4 480.97 P
0.43 (standard parallelization techniques that form the basis for most of) 54 470.97 P
6.57 (today\325) 54 460.97 P
6.57 (s commercial parallelizing compilers. It uses data) 76.5 460.97 P
0.21 (dependence analysis on array data structures to extract parallelism) 54 450.97 P
1.55 (in loop nests. The compiler will recognize reduction operations) 54 440.97 P
3.02 (\050e.g. summations and products\051, convert scalar variables into) 54 430.97 P
1.34 (private copies on each processor) 54 420.97 P
1.34 (, and transform loop nests \050e.g.) 175.95 420.97 P
4.39 (interchanging inner and outer loops\051 to optimize for both) 54 410.97 P
(parallelism and locality) 54 400.97 T
(.) 137.91 400.97 T
0.84 (The SUIF compiler also includes several advanced optimizations) 54 385.97 P
2.64 (that have been described and evaluated in [1] and [12]. The) 54 375.97 P
2.17 (compiler performs inter) 54 365.97 P
2.17 (-procedural analysis to parallelize lar) 143.64 365.97 P
2.17 (ge) 285.62 365.97 P
1.52 (regions of code that may span multiple procedures. It performs) 54 355.97 P
1.31 (reduction recognition and privatization analysis on arrays. SUIF) 54 345.97 P
1.04 (also contains a suite of locality optimization techniques to make) 54 335.97 P
3.02 (the multiprocessor caches more ef) 54 325.97 P
3.02 (fective. T) 188.89 325.97 P
3.02 (o minimize inter) 225.76 325.97 P
3.02 (-) 291.12 325.97 P
0.15 (processor communication, the compiler partitions the computation) 54 315.97 P
0.07 (across processors so that computations using the same data are co-) 54 305.97 P
1.02 (located on the same processor) 54 295.97 P
1.02 (. The compiler also transforms the) 165.55 295.97 P
0.52 (data layout of individual arrays so that data elements accessed by) 54 285.97 P
1.74 (each processor are contiguous within the shared address space.) 54 275.97 P
2.92 (This transformation increases spatial locality and reduces the) 54 265.97 P
(amount of false sharing within data structures.) 54 255.97 T
-0.11 (The applications parallelized by SUIF follow a master/slave model) 54 240.97 P
0.41 (of parallelism, as shown in Figure) 54 230.97 P
0.41 (1. The master process executes) 180.77 230.97 P
0.95 (the sequential portions of the program while the slaves wait at a) 54 220.97 P
0.99 (barrier) 54 210.97 P
0.99 (. When the master reaches the start of a parallel region, it) 77.49 210.97 P
2.29 (noti\336es the slaves. The slaves and the master then operate in) 54 200.97 P
0.45 (parallel until they reach a barrier at the end of the parallel region.) 54 190.97 P
0.66 (The code within each parallel region is statically scheduled; each) 54 180.97 P
1.17 (processor executes a pre-determined portion of the computation.) 54 170.97 P
4.91 (SUIF includes a feedback mechanism that suppresses the) 54 160.97 P
0.82 (parallelization of loops that result in a net performance loss \050e.g.) 54 150.97 P
0.3 (when the amount of work in the loop is smaller than the overhead) 54 140.97 P
-0.06 (of the barrier\051. The feedback mechanism uses the training data sets) 54 130.97 P
-0.31 (of the benchmarks to determine which loops should be suppressed.) 54 120.97 P
0 11 Q
(3.3  Simulation Methodology) 54 103.64 T
1 9 Q
0.46 (The simulation platform is SimOS [21]. W) 54 86.97 P
0.46 (e used SimOS to study) 210.28 86.97 P
1.97 (the performance of the workloads in detail and to analyze the) 54 76.97 P
54 580.97 294.12 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 561.33 288 750.33 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Benchmark) 109.23 724.33 T
(Data set size \050MB\051) 211.59 724.33 T
1 8 Q
(101.tomcatv) 64.05 713 T
(14) 244 713 T
(102.swim) 64.05 702 T
(14) 244 702 T
(103.su2cor) 64.05 691 T
(23) 244 691 T
(104.hydro2d) 64.05 680 T
(8) 248 680 T
(107.mgrid) 64.05 669 T
(7) 248 669 T
(110.applu) 64.05 658 T
(31) 244 658 T
(125.turb3d) 64.05 647 T
(24) 244 647 T
(141.apsi) 64.05 636 T
(9) 248 636 T
(145.fpppp) 64.05 625 T
(< 1) 241.49 625 T
(146.wave5) 64.05 614 T
(40) 244 614 T
54 580.97 288 591.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 577.83 288 591.33 R
7 X
0 0 0 1 0 0 0 K
V
54 586.83 522 586.83 2 L
V
1 H
2 Z
0 X
N
54 580.97 294.12 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(T) 54 594.33 T
(able 1. Refer) 59.17 594.33 T
(ence Data Set Sizes of SPEC95fp) 107.75 594.33 T
58.05 736.08 58.05 610.58 2 L
V
0.5 H
0 Z
N
199.41 736.58 199.41 610.08 2 L
V
N
288 736.08 288 610.58 2 L
V
N
57.8 736.33 288.25 736.33 2 L
V
N
57.8 720.33 288.25 720.33 2 L
V
2 H
N
57.8 709.33 199.66 709.33 2 L
V
0.25 H
N
199.16 709.33 288.25 709.33 2 L
V
0.5 H
N
57.8 698.33 199.66 698.33 2 L
V
0.25 H
N
199.16 698.33 288.25 698.33 2 L
V
0.5 H
N
57.8 687.33 199.66 687.33 2 L
V
0.25 H
N
199.16 687.33 288.25 687.33 2 L
V
0.5 H
N
57.8 676.33 199.66 676.33 2 L
V
0.25 H
N
199.16 676.33 288.25 676.33 2 L
V
0.5 H
N
57.8 665.33 199.66 665.33 2 L
V
0.25 H
N
199.16 665.33 288.25 665.33 2 L
V
0.5 H
N
57.8 654.33 199.66 654.33 2 L
V
0.25 H
N
199.16 654.33 288.25 654.33 2 L
V
0.5 H
N
57.8 643.33 199.66 643.33 2 L
V
0.25 H
N
199.16 643.33 288.25 643.33 2 L
V
0.5 H
N
57.8 632.33 199.66 632.33 2 L
V
0.25 H
N
199.16 632.33 288.25 632.33 2 L
V
0.5 H
N
57.8 621.33 199.66 621.33 2 L
V
0.25 H
N
199.16 621.33 288.25 621.33 2 L
V
0.5 H
N
57.8 610.33 288.25 610.33 2 L
V
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
2.31 (impact of various architectural parameters. SimOS models the) 317.88 507.17 P
1.07 (hardware of an SGI multiprocessor in enough detail to boot and) 317.88 497.17 P
1.33 (run IRIX 5.3, SGI\325) 317.88 487.17 P
1.33 (s version of UNIX. SimOS contains a set of) 389.62 487.17 P
1.68 (simulators that trade of) 317.88 477.17 P
1.68 (f dif) 406.01 477.17 P
1.68 (ferent simulation speeds against the) 422.78 477.17 P
(level of simulation detail.) 317.88 467.17 T
0.11 (For our studies, we model 400MHz single-issue R4400 processors) 317.88 452.17 P
-0.01 (with two-way set-associative split instruction/data caches of 32KB) 317.88 442.17 P
0.24 (each. For the base con\336guration each processor has a 1MB direct-) 317.88 432.17 P
0.99 (mapped external cache with 128 byte lines. The split-transaction) 317.88 422.17 P
-0.18 (bus can sustain up to 1.2 GB/s of fetch bandwidth in the absence of) 317.88 412.17 P
3.96 (writebacks. The minimum latency of a cache miss is 500) 317.88 402.17 P
1.77 (nanoseconds when fetched from memory and 750 nanoseconds) 317.88 392.17 P
-0.07 (when fetched from another processor) 317.88 382.17 P
-0.07 (. This con\336guration is loosely) 451.04 382.17 P
6.2 (based on the characteristics of current high-performance) 317.88 372.17 P
(multiprocessors.) 317.88 362.17 T
1.08 (The long execution times of the SPEC95fp benchmarks\321on the) 317.88 347.17 P
0.17 (order of a couple of minutes on today\325) 317.88 337.17 P
0.17 (s fastest machines\321make it) 456.77 337.17 P
0.49 (infeasible to simulate the entire benchmark suite to completion in) 317.88 327.17 P
0.55 (enough detail to model a modern memory hierarchy) 317.88 317.17 P
0.55 (. W) 508.38 317.17 P
0.55 (e estimate) 521.21 317.17 P
-0.09 (that the simulation time for all of the workloads and con\336gurations) 317.88 307.17 P
(presented in this paper would take more than one year) 317.88 297.17 T
(.) 512.09 297.17 T
0.25 (T) 317.88 282.17 P
0.25 (o limit simulation requirements, previous studies have arbitrarily) 322.75 282.17 P
0.04 (bounded the number of simulated instructions or used smaller data) 317.88 272.17 P
0.25 (sets rather than the full data sets. However) 317.88 262.17 P
0.25 (, the size of the data set) 472.25 262.17 P
0.12 (has a strong ef) 317.88 252.17 P
0.12 (fect on cache performance. T) 370.32 252.17 P
0.12 (o limit simulation time) 475.37 252.17 P
0.83 (while preserving the characteristics of the program executing the) 317.88 242.17 P
1.2 (full data set, we developed a technique based on the concept of) 317.88 232.17 P
2 F
(r) 317.88 222.17 T
(epr) 321.05 222.17 T
(esentative execution windows) 332.71 222.17 T
1 F
(.) 439.2 222.17 T
1.05 (A representative execution window is a portion of the execution) 317.88 207.17 P
5.66 (that summarizes the overall behavior of the application.) 317.88 197.17 P
1.42 (Representative execution windows are based on the observation) 317.88 187.17 P
1.71 (that these benchmarks contain a short initialization section that) 317.88 177.17 P
2.74 (includes I/O requests and pages faults, followed by a steady) 317.88 167.17 P
1.71 (computation section. Overall, the steady state of the workloads) 317.88 157.17 P
0.51 (accounts for more than 95% of the sequential execution time. W) 317.88 147.17 P
0.51 (e) 554 147.17 P
1.54 (separate the application into phases that correspond to dif) 317.88 137.17 P
1.54 (ferent) 537.01 137.17 P
0.33 (paths in the control \337ow of the program. The steady state consists) 317.88 127.17 P
0.84 (of a sequence of these phases. Some simple workloads contain a) 317.88 117.17 P
1.06 (single phase that is repeated over and over again. Others have a) 317.88 107.17 P
0.18 (more complicated control \337ow that alternates between phases. For) 317.88 97.17 P
1.93 (example, the application) 317.88 87.17 P
2 F
1.93 ( turb3d) 409.97 87.17 P
1 F
1.93 (contains four phases that each) 442.32 87.17 P
1.5 (occur 1) 317.88 77.17 P
1.5 (1, 66, 100 and 120 times respectively during the steady) 345.78 77.17 P
317.88 68.69 558 738 C
317.94 513.17 557.94 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
336.66 712.01 349.55 724.11 R
3 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
337.07 651.23 348.61 691.25 R
3 X
V
0 X
N
355.81 667.58 367.35 691.25 R
3 X
V
0 X
N
375.04 659.08 386.59 692.25 R
3 X
V
0 X
N
394.28 642.12 405.82 692.08 R
3 X
V
0 X
N
336.57 639.98 348.11 647.08 R
N
355.81 640.41 367.35 665.08 R
N
375.04 640.84 386.59 656.08 R
N
344.27 699.44 401.97 699.44 2 L
N
345.47 699.44 343.27 691.75 341.06 699.44 343.27 699.44 4 Y
V
343.27 699.44 343.27 699.44 2 L
N
365.71 698.94 363.5 691.25 361.3 698.94 363.5 698.94 4 Y
V
363.5 698.94 363.5 698.94 2 L
N
381.6 699.44 379.39 691.75 377.18 699.44 379.39 699.44 4 Y
V
379.39 699.44 379.39 699.44 2 L
N
403.68 699.44 401.47 691.75 399.27 699.44 401.47 699.44 4 Y
V
401.47 699.44 401.47 699.44 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
343.27 713.11 343.27 699.94 2 L
N
359.66 622.46 401.97 622.46 2 L
N
359.66 630.15 359.66 622.46 2 L
N
378.89 630.15 378.89 622.46 2 L
N
401.97 630.15 401.97 622.46 2 L
N
2 9 Q
(Sequential/Suppr) 437.11 717.85 T
(essed loops) 498.78 717.85 T
(Parallel execution) 440.44 682.24 T
(Synchr) 440.44 633.08 T
(onization) 465.1 633.08 T
336.49 636.3 406.59 636.99 R
V
3 H
N
(Load imbalance) 439.88 649.53 T
318.38 512.72 556.38 604.47 R
7 X
V
318.38 590.97 556.38 604.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.38 590.97 556.38 604.47 R
7 X
0 0 0 1 0 0 0 K
V
318.38 599.97 786.38 599.97 2 L
V
1 H
2 Z
0 X
N
317.94 513.17 557.94 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 1.  Master/Slave Structur) 318.38 584.97 T
(e of SUIF Applications.) 452.46 584.97 T
1 F
2.91 (The gray regions correspond to useful execution. The white) 318.38 573.97 P
1.66 (regions correspond to the overheads of parallel execution. The) 318.38 562.97 P
0 (synchronization bar corresponds to the cost of the implementation) 318.38 551.97 P
2.38 (of the barrier) 318.38 540.97 P
2.38 (. The execution of the application consists of a) 369.63 540.97 P
318.38 513.47 556.38 526.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.38 513.47 556.38 526.97 R
7 X
0 0 0 1 0 0 0 K
V
318.38 522.47 786.38 522.47 2 L
V
1 H
2 Z
0 X
N
317.94 513.17 557.94 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(sequence of sequential and parallel regions.) 318.38 529.97 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
354.11 712.08 367.99 724.18 R
7 X
V
0.5 H
2 Z
0 X
N
372.69 711.58 386.58 723.68 R
7 X
V
0 X
N
391.61 712.08 405.49 724.18 R
7 X
V
0 X
N
383.33 729.28 380.33 724.08 377.33 729.28 380.33 729.28 4 Y
V
379.08 622.42 379.08 619.08 379.08 617.42 412.42 617.42 412.42 735.75 380.33 735.75 380.33 729.28 7 L
N
345.83 730.11 342.83 724.92 339.83 730.11 342.83 730.11 4 Y
V
343.25 629.92 343.25 619.08 328.25 619.08 328.25 734.08 342.83 734.08 342.83 730.11 6 L
N
(Master) 325.89 610.33 T
(Slaves) 366.45 610.33 T
317.88 68.69 558 738 C
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
1.13 (state of the workload. The representative execution window is a) 54 732 P
(part of the steady state that contains each phase at least once.) 54 722 T
0.39 (W) 54 707 P
0.39 (e used SimOS\325) 61.78 707 P
0.39 (s high-speed simulator [25], con\336gured to model) 116.06 707 P
1.54 (a lar) 54 697 P
1.54 (ge external cache, to execute the sequential benchmarks to) 71.12 697 P
2.52 (completion. For each benchmark, we analyze the variation in) 54 687 P
1.05 (execution behavior between dif) 54 677 P
1.05 (ferent occurrences of each phase.) 170.22 677 P
0.63 (W) 54 667 P
0.63 (e found that in all but one case \050) 61.78 667 P
2 F
0.63 (wave5) 182.26 667 P
1 F
0.63 (\051, the standard deviation) 205.26 667 P
-0.12 (of both the number of instructions and the miss rate is less than 1%) 54 657 P
0.01 (of the mean. One of the phases of) 54 647 P
2 F
0.01 (wave5) 177.32 647 P
1 F
0.01 ( showed a 4% variation in) 200.32 647 P
(instructions and a 30% variation in cache misses.) 54 637 T
3.05 (T) 54 622 P
3.05 (o position the benchmark at its steady state point, we use) 58.87 622 P
1.82 (SimOS\325) 54 612 P
1.82 (s high-speed simulator in a mode where it can execute) 82.51 612 P
1.1 (uniprocessor workloads at one tenth the speed of the underlying) 54 602 P
-0.15 (machine. W) 54 592 P
-0.15 (e then switch to a more detailed simulator and use non-) 96.62 592 P
0.11 (intrusive annotations to collect statistics separately for each phase.) 54 582 P
0.46 (The results from the dif) 54 572 P
0.46 (ferent phases are then weighted according) 140.65 572 P
0.25 (to the number of occurrences during the steady state. T) 54 562 P
0.25 (o eliminate) 253.62 562 P
1.53 (transient simulation ef) 54 552 P
1.53 (fects such as cold misses, we discard the) 137.4 552 P
(results from the \336rst phases executed with the detailed simulator) 54 542 T
(.) 285.23 542 T
0 12 Q
(4  Performance Analysis of the W) 54 521 T
(orkloads) 225.31 521 T
0 11 Q
(4.1  High-level Characterization) 54 500.67 T
1 9 Q
5.41 (Figure) 54 484 P
5.41 (2 characterizes the performance of the parallelized) 79.75 484 P
-0.04 (benchmarks in four dif) 54 474 P
-0.04 (ferent ways. The \336rst graph presents a high-) 135.95 474 P
5.14 (level breakdown of the combined execution time of the) 54 464 P
1.11 (benchmarks. The height of each bar is the sum of the execution) 54 454 P
0.82 (times over all the processors. Using this metric, applications that) 54 444 P
-0.07 (show a constant combined execution time have linear speedup. W) 54 434 P
-0.07 (e) 290.12 434 P
2.51 (separate the application-speci\336c code from the) 54 424 P
2 F
2.51 ( over) 234.27 424 P
2.51 (heads) 254.86 424 P
1 F
2.51 ( that) 275.86 424 P
1.31 (correspond to the time spent in the operating system and in the) 54 414 P
1.16 (synchronization routines. The application time is further divided) 54 404 P
-0.17 (between the processing time \050) 54 394 P
2 F
-0.17 (execution) 160.82 394 P
1 F
-0.17 (\051 and its associated) 195.3 394 P
2 F
-0.17 (memory) 265.13 394 P
(stall time) 54 384 T
1 F
(.) 87.25 384 T
0.33 (W) 54 369 P
0.33 (e \336rst notice that seven of the ten benchmarks see near constant) 61.78 369 P
2.09 (combined execution times \050indicating near linear speedups\051, at) 54 359 P
2.14 (least up to eight processors. The remaining three applications,) 54 349 P
2 F
0.22 (apsi) 54 339 P
1 F
0.22 (,) 69 339 P
2 F
0.22 ( fpppp) 71.25 339 P
1 F
0.22 (and) 96.68 339 P
2 F
0.22 (wave5) 112.15 339 P
1 F
0.22 (, show little or no performance bene\336t from) 135.14 339 P
1.96 (parallelization. Across all applications, we see increases in the) 54 329 P
-0.17 (parallelization overheads and general increases in the memory stall) 54 319 P
1.55 (time, as the number of processors increases, especially with 16) 54 309 P
(processors.) 54 299 T
0.19 (The second graph of Figure) 54 284 P
0.19 (2 breaks down the overheads into \336ve) 156.49 284 P
0.91 (categories. The kernel overhead corresponds to the time spent in) 54 274 P
5.09 (the operating system, primarily servicing TLB faults and) 54 264 P
0.8 (processing timer interrupts. The other four categories result from) 54 254 P
(the structure of SUIF applications, as shown in Figure) 54 244 T
(1:) 250.98 244 T
1 12 Q
(\245) 54 229 T
1 9 Q
0.56 (The dif) 67.75 229 P
0.56 (ference in arrival times of the processors at the barrier) 94.39 229 P
0.13 (at the end of the parallel regions is counted as) 67.75 220 P
2 F
0.13 (load imbalance) 236 220 P
1 F
0.13 (.) 291.87 220 P
1.02 (The most common cause of load imbalance occurs when the) 67.75 211 P
0.53 (number of iterations of a parallel loop is not a multiple of the) 67.75 202 P
0.99 (number of processors. For example, the parallelized loops of) 67.75 193 P
2 F
0.69 (applu) 67.75 184 P
1 F
0.69 ( consist of only 33 iterations. As a result, 16 processors) 88.25 184 P
(do not execute such loops more ef) 67.75 175 T
(\336ciently than 1) 190.57 175 T
(1 processors.) 244.23 175 T
1 12 Q
(\245) 54 161 T
2 9 Q
1.96 (Sequential time) 67.75 161 P
1 F
1.96 ( is the time when the slave processors spin) 125.45 161 P
2.52 (while the master process executes code that could not be) 67.75 152 P
2.2 (parallelized by the compiler) 67.75 143 P
2.2 (. The sequential time increases) 174.59 143 P
1.55 (with the number of processors because more processors are) 67.75 134 P
0.74 (idle. For example, the \336gure shows that) 67.75 125 P
2 F
0.74 (fpppp) 217.65 125 P
1 F
0.74 ( has essentially) 238.15 125 P
(no loop-level parallelism.) 67.75 116 T
1 12 Q
(\245) 54 102 T
2 9 Q
0.59 (Suppr) 67.75 102 P
0.59 (essed time) 88.91 102 P
1 F
0.59 ( corresponds to time spent by slave processes) 126.75 102 P
1.33 (while the master alone executes a parallelizeable loop. Both) 67.75 93 P
2 F
1.17 (apsi) 67.75 84 P
1 F
1.17 ( and) 82.75 84 P
2 F
1.17 (wave5) 102.6 84 P
1 F
1.17 ( have \336ne-grain loop-level parallelism that is) 125.6 84 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.63 (suppressed since it cannot be exploited ef) 331.63 733.11 P
2.63 (fectively on the) 496.74 733.11 P
5.82 (multiprocessors available today because of their high) 331.63 724.11 P
(synchronization and communication costs.) 331.63 715.11 T
1 12 Q
(\245) 317.88 701.11 T
1 9 Q
3.34 (The) 331.62 701.11 P
2 F
3.34 (synchr) 351.21 701.11 P
3.34 (onization) 374.87 701.11 P
1 F
3.34 ( time corresponds to the cost of the) 408.38 701.11 P
3.27 (software implementation of barriers and locks. Since the) 331.63 692.11 P
-0.15 (parallel execution of the smaller loops is already suppressed by) 331.63 683.11 P
(the compiler) 331.63 674.11 T
(, this overhead is relatively small.) 376.52 674.11 T
6.86 (The third and fourth graphs of Figure) 317.88 660.11 P
6.86 (2 present two) 495.78 660.11 P
2.71 (complementary views of the memory system behavior of the) 317.88 650.11 P
4.95 (applications. The memory system behavior graph gives a) 317.88 640.11 P
0.39 (processor) 317.88 630.11 P
0.39 (-centric view of the performance of the memory system,) 352.19 630.11 P
2.46 (while the bus utilization graph shows the load on the shared) 317.88 620.11 P
2.18 (hardware. The memory system behavior is shown in terms of) 317.88 610.11 P
1.38 (memory cycles per instruction \050MCPI\051. An MCPI of 1.0 means) 317.88 600.11 P
1.67 (that the application is spending half of its time in the memory) 317.88 590.11 P
0.61 (subsystem. The MCPI indicates the performance of the processor) 317.88 580.11 P
1.83 (during useful execution only) 317.88 570.11 P
1.83 (. The time spent in overheads, for) 426.03 570.11 P
-0.01 (example lost to load imbalance, does not cause many cache misses) 317.88 560.11 P
2.64 (because the processor is spinning in a tight loop. The graph) 317.88 550.11 P
0.43 (separates the stall time due to on-chip cache misses from of) 317.88 540.11 P
0.43 (f-chip) 536.51 540.11 P
0.86 (cache misses and classi\336es the latter) 317.88 530.11 P
0.86 (. Our classi\336cation separates) 452.43 530.11 P
0.63 (replacement misses from communication misses. Communication) 317.88 520.11 P
(misses are classi\336ed according to [8].) 317.88 510.11 T
0.77 (The memory system behavior graph shows that the memory stall) 317.88 495.11 P
2.08 (time of most applications is dominated by replacement misses) 317.88 485.11 P
2.52 (caused by the limited size \050capacity misses\051 and associativity) 317.88 475.11 P
0.56 (\050con\337ict misses\051 of the cache. The graph also shows that the data) 317.88 465.11 P
3.56 (transformation and scheduling algorithms used by the SUIF) 317.88 455.11 P
0.73 (compiler are ef) 317.88 445.11 P
0.73 (fective in eliminating most cases of true and false) 373.66 445.11 P
(sharing communication.) 317.88 435.11 T
0.77 (The bus utilization graph shows the bus cycles occupied because) 317.88 420.11 P
1.18 (of data transfers \050requests and replies\051, writebacks and upgrades) 317.88 410.11 P
0.16 (from a shared state to an exclusive state. The graph shows that the) 317.88 400.11 P
0.88 (performance of these parallel applications is often limited by the) 317.88 390.11 P
1.25 (contention on the memory bus. W) 317.88 380.11 P
1.25 (ith 16 processors, the average) 446.27 380.11 P
0.15 (occupancy of the bus ranges from 50% to over 95% for \336ve of the) 317.88 370.11 P
0.38 (ten benchmarks. In such cases, the bandwidth requirements of the) 317.88 360.11 P
0.14 (application exceed the 1.2 GB/s that the bus can of) 317.88 350.11 P
0.14 (fer) 501.97 350.11 P
0.14 (. This results) 511.46 350.11 P
0.34 (in a signi\336cant increase in the average latency of cache misses, as) 317.88 340.11 P
1.09 (indicated by the increase in the MCPI of these benchmarks. For) 317.88 330.11 P
0.34 (example, although the miss rate of) 317.88 320.11 P
2 F
0.34 (tomcatv) 446.17 320.11 P
1 F
0.34 ( decreases by 3% from) 474.66 320.11 P
(one to 16 processors, the MCPI more than doubles.) 317.88 310.11 T
2.93 (Finally) 317.88 295.11 P
2.93 (,) 342.8 295.11 P
2 F
2.93 (fpppp) 350.23 295.11 P
1 F
2.93 ( is limited entirely by instruction cache misses) 370.73 295.11 P
-0.33 (fetched from the external cache and puts no load on the shared bus.) 317.88 285.11 P
0 11 Q
(4.2  Cache Con\337icts in Parallel Pr) 317.88 267.78 T
(ograms) 476.26 267.78 T
1 9 Q
-0.15 (Figure) 317.88 251.11 P
-0.15 (2 shows that the primary performance bottleneck of half the) 343.63 251.11 P
0.81 (benchmarks is the memory traf) 317.88 241.11 P
0.81 (\336c due to replacement misses. By) 432.95 241.11 P
0.9 (comparison, processors communicate signi\336cantly less with each) 317.88 231.11 P
(other than with main memory) 317.88 221.11 T
(.) 424.29 221.11 T
3.2 (Parallel applications have an advantage over their sequential) 317.88 206.11 P
0.02 (counterparts. For a constant problem size, each processor typically) 317.88 196.11 P
3.33 (operates on a subset of the data. When the data is evenly) 317.88 186.11 P
4.47 (partitioned between the dif) 317.88 176.11 P
4.47 (ferent processors and processors) 427.87 176.11 P
4.72 (communicate only a small amount with each other) 317.88 166.11 P
4.72 (, each) 532.29 166.11 P
-0.12 (processor) 317.88 156.11 P
-0.12 (\325) 352.7 156.11 P
-0.12 (s data set size is reduced proportionally to the number of) 355.2 156.11 P
(processors that take part in the computation.) 317.88 146.11 T
1.91 (The workload runs, whose results are shown in Figure) 317.88 131.11 P
1.91 (2, used) 530.6 131.11 P
0.9 (1MB caches. W) 317.88 121.11 P
0.9 (ith 16 processors, the aggregate cache size of 16) 377.06 121.11 P
0.16 (MB exceeds the data set size of many of the benchmarks, as listed) 317.88 111.11 P
2.37 (in T) 317.88 101.11 P
2.37 (able) 334.37 101.11 P
2.37 (1. Contrary to our expectations, we generally do not) 351.61 101.11 P
(observe a reduction in the number of replacement misses.) 317.88 91.11 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.86 (This disappointing result is due to the poor cache utilization that) 54 151.2 P
-0.09 (results from these applications\325 access patterns. Figure) 54 141.2 P
-0.09 (3 illustrates) 252.45 141.2 P
4.42 (the access patterns of the data segments of three of the) 54 131.2 P
2.85 (applications,) 54 121.2 P
2 F
2.85 (tomcatv) 104.85 121.2 P
1 F
2.85 (,) 132.76 121.2 P
2 F
2.85 (swim) 140.11 121.2 P
1 F
2.85 ( and) 158.61 121.2 P
2 F
2.85 (hydr) 181.81 121.2 P
2.85 (o2d) 197.98 121.2 P
1 F
2.85 (, executing on a 16-) 211.48 121.2 P
2.91 (processor system. The \336gure plots the virtual pages that are) 54 111.2 P
0.87 (accessed at least once during the steady state of the computation) 54 101.2 P
(by the dif) 54 91.2 T
(ferent processors.) 88.33 91.2 T
54 162.2 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 38 32 972 275 467 121.5 54.56 270.61 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/base-bus.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 30.000000 45.000000 {pop} SS9 1.000000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
gsave 30.000000 45.000000 {pop} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( Upgrades) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( Writeback) 0 960.231 225.9 TXL
72 72 S9
[] 1.000000 SL
gsave 40.000000 0.000000 {cross} SS9 0.700000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
[] 1.000000 SL
gsave 40.000000 0.000000 {cross} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( Data) 0 960.231 212.9 TXL
72 72 S9
79.8545 72 M9
79.8545 99.9381 M9
87.7091 99.9381 M9
87.7091 72 M9
95.5636 72 M9
95.5636 126.79 M9
103.418 126.79 M9
103.418 72 M9
111.273 72 M9
111.273 175.524 M9
119.127 175.524 M9
119.127 72 M9
126.982 72 M9
126.982 240.786 M9
134.836 240.786 M9
134.836 72 M9
142.691 72 M9
142.691 246.178 M9
150.545 246.178 M9
150.545 72 M9
166.255 72 M9
166.255 97.6082 M9
174.109 97.6082 M9
174.109 72 M9
181.964 72 M9
181.964 121.415 M9
189.818 121.415 M9
189.818 72 M9
197.673 72 M9
197.673 165.561 M9
205.527 165.561 M9
205.527 72 M9
213.382 72 M9
213.382 228.53 M9
221.236 228.53 M9
221.236 72 M9
229.091 72 M9
229.091 238.443 M9
236.945 238.443 M9
236.945 72 M9
252.655 72 M9
252.655 89.3955 M9
260.509 89.3955 M9
260.509 72 M9
268.364 72 M9
268.364 100.158 M9
276.218 100.158 M9
276.218 72 M9
284.073 72 M9
284.073 114.897 M9
291.927 114.897 M9
291.927 72 M9
299.782 72 M9
299.782 130.359 M9
307.636 130.359 M9
307.636 72 M9
315.491 72 M9
315.491 140.534 M9
323.345 140.534 M9
323.345 72 M9
339.055 72 M9
339.055 98.351 M9
346.909 98.351 M9
346.909 72 M9
354.764 72 M9
354.764 121.197 M9
362.618 121.197 M9
362.618 72 M9
370.473 72 M9
370.473 159.87 M9
378.327 159.87 M9
378.327 72 M9
386.182 72 M9
386.182 204.047 M9
394.036 204.047 M9
394.036 72 M9
401.891 72 M9
401.891 208.923 M9
409.745 208.923 M9
409.745 72 M9
425.455 72 M9
425.455 87.473 M9
433.309 87.473 M9
433.309 72 M9
441.164 72 M9
441.164 100.11 M9
449.018 100.11 M9
449.018 72 M9
456.873 72 M9
456.873 114.903 M9
464.727 114.903 M9
464.727 72 M9
472.582 72 M9
472.582 124.552 M9
480.436 124.552 M9
480.436 72 M9
488.291 72 M9
488.291 144.834 M9
496.145 144.834 M9
496.145 72 M9
511.855 72 M9
511.855 92.0428 M9
519.709 92.0428 M9
519.709 72 M9
527.564 72 M9
527.564 108.803 M9
535.418 108.803 M9
535.418 72 M9
543.273 72 M9
543.273 134.788 M9
551.127 134.788 M9
551.127 72 M9
558.982 72 M9
558.982 178.553 M9
566.836 178.553 M9
566.836 72 M9
574.691 72 M9
574.691 214.71 M9
582.545 214.71 M9
582.545 72 M9
598.255 72 M9
598.255 80.7207 M9
606.109 80.7207 M9
606.109 72 M9
613.964 72 M9
613.964 88.572 M9
621.818 88.572 M9
621.818 72 M9
629.673 72 M9
629.673 105.225 M9
637.527 105.225 M9
637.527 72 M9
645.382 72 M9
645.382 134.363 M9
653.236 134.363 M9
653.236 72 M9
661.091 72 M9
661.091 175.048 M9
668.945 175.048 M9
668.945 72 M9
684.655 72 M9
684.655 89.3283 M9
692.509 89.3283 M9
692.509 72 M9
700.364 72 M9
700.364 90.7286 M9
708.218 90.7286 M9
708.218 72 M9
716.073 72 M9
716.073 91.9047 M9
723.927 91.9047 M9
723.927 72 M9
731.782 72 M9
731.782 93.1489 M9
739.636 93.1489 M9
739.636 72 M9
747.491 72 M9
747.491 93.2024 M9
755.345 93.2024 M9
755.345 72 M9
771.055 72 M9
771.055 73.9256 M9
778.909 73.9256 M9
778.909 72 M9
786.764 72 M9
786.764 73.9257 M9
794.618 73.9257 M9
794.618 72 M9
802.473 72 M9
802.473 73.9253 M9
810.327 73.9253 M9
810.327 72 M9
818.182 72 M9
818.182 73.9166 M9
826.036 73.9166 M9
826.036 72 M9
833.891 72 M9
833.891 73.9283 M9
841.745 73.9283 M9
841.745 72 M9
857.455 72 M9
857.455 82.2461 M9
865.309 82.2461 M9
865.309 72 M9
873.164 72 M9
873.164 89.0419 M9
881.018 89.0419 M9
881.018 72 M9
888.873 72 M9
888.873 95.0164 M9
896.727 95.0164 M9
896.727 72 M9
904.582 72 M9
904.582 100.15 M9
912.436 100.15 M9
912.436 72 M9
920.291 72 M9
920.291 104.278 M9
928.145 104.278 M9
928.145 72 M9
gsave
D9
grestore
gsave 30.000000 45.000000 {pop} SS9 1.000000 G9
928.145 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 97.9186 M9
87.7091 97.9186 M9
87.7091 72 M9
95.5636 72 M9
95.5636 122.872 M9
103.418 122.872 M9
103.418 72 M9
111.273 72 M9
111.273 168.164 M9
119.127 168.164 M9
119.127 72 M9
126.982 72 M9
126.982 228.752 M9
134.836 228.752 M9
134.836 72 M9
142.691 72 M9
142.691 233.639 M9
150.545 233.639 M9
150.545 72 M9
166.255 72 M9
166.255 95.4897 M9
174.109 95.4897 M9
174.109 72 M9
181.964 72 M9
181.964 117.353 M9
189.818 117.353 M9
189.818 72 M9
197.673 72 M9
197.673 157.884 M9
205.527 157.884 M9
205.527 72 M9
213.382 72 M9
213.382 215.699 M9
221.236 215.699 M9
221.236 72 M9
229.091 72 M9
229.091 224.771 M9
236.945 224.771 M9
236.945 72 M9
252.655 72 M9
252.655 88.588 M9
260.509 88.588 M9
260.509 72 M9
268.364 72 M9
268.364 98.7769 M9
276.218 98.7769 M9
276.218 72 M9
284.073 72 M9
284.073 112.66 M9
291.927 112.66 M9
291.927 72 M9
299.782 72 M9
299.782 126.777 M9
307.636 126.777 M9
307.636 72 M9
315.491 72 M9
315.491 135.159 M9
323.345 135.159 M9
323.345 72 M9
339.055 72 M9
339.055 97.0646 M9
346.909 97.0646 M9
346.909 72 M9
354.764 72 M9
354.764 118.72 M9
362.618 118.72 M9
362.618 72 M9
370.473 72 M9
370.473 155.169 M9
378.327 155.169 M9
378.327 72 M9
386.182 72 M9
386.182 196.006 M9
394.036 196.006 M9
394.036 72 M9
401.891 72 M9
401.891 198.496 M9
409.745 198.496 M9
409.745 72 M9
425.455 72 M9
425.455 86.1206 M9
433.309 86.1206 M9
433.309 72 M9
441.164 72 M9
441.164 97.7511 M9
449.018 97.7511 M9
449.018 72 M9
456.873 72 M9
456.873 110.718 M9
464.727 110.718 M9
464.727 72 M9
472.582 72 M9
472.582 118.969 M9
480.436 118.969 M9
480.436 72 M9
488.291 72 M9
488.291 132.281 M9
496.145 132.281 M9
496.145 72 M9
511.855 72 M9
511.855 91.4797 M9
519.709 91.4797 M9
519.709 72 M9
527.564 72 M9
527.564 107.984 M9
535.418 107.984 M9
535.418 72 M9
543.273 72 M9
543.273 133.346 M9
551.127 133.346 M9
551.127 72 M9
558.982 72 M9
558.982 175.116 M9
566.836 175.116 M9
566.836 72 M9
574.691 72 M9
574.691 206.987 M9
582.545 206.987 M9
582.545 72 M9
598.255 72 M9
598.255 79.2707 M9
606.109 79.2707 M9
606.109 72 M9
613.964 72 M9
613.964 85.7959 M9
621.818 85.7959 M9
621.818 72 M9
629.673 72 M9
629.673 99.2006 M9
637.527 99.2006 M9
637.527 72 M9
645.382 72 M9
645.382 122.949 M9
653.236 122.949 M9
653.236 72 M9
661.091 72 M9
661.091 155.596 M9
668.945 155.596 M9
668.945 72 M9
684.655 72 M9
684.655 88.8167 M9
692.509 88.8167 M9
692.509 72 M9
700.364 72 M9
700.364 90.0356 M9
708.218 90.0356 M9
708.218 72 M9
716.073 72 M9
716.073 91.1298 M9
723.927 91.1298 M9
723.927 72 M9
731.782 72 M9
731.782 92.3165 M9
739.636 92.3165 M9
739.636 72 M9
747.491 72 M9
747.491 92.2425 M9
755.345 92.2425 M9
755.345 72 M9
771.055 72 M9
771.055 73.8383 M9
778.909 73.8383 M9
778.909 72 M9
786.764 72 M9
786.764 73.8386 M9
794.618 73.8386 M9
794.618 72 M9
802.473 72 M9
802.473 73.8392 M9
810.327 73.8392 M9
810.327 72 M9
818.182 72 M9
818.182 73.8307 M9
826.036 73.8307 M9
826.036 72 M9
833.891 72 M9
833.891 73.842 M9
841.745 73.842 M9
841.745 72 M9
857.455 72 M9
857.455 81.4459 M9
865.309 81.4459 M9
865.309 72 M9
873.164 72 M9
873.164 87.2173 M9
881.018 87.2173 M9
881.018 72 M9
888.873 72 M9
888.873 92.4607 M9
896.727 92.4607 M9
896.727 72 M9
904.582 72 M9
904.582 97.0642 M9
912.436 97.0642 M9
912.436 72 M9
920.291 72 M9
920.291 100.873 M9
928.145 100.873 M9
928.145 72 M9
gsave
D9
grestore
928.145 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 94.3173 M9
87.7091 94.3173 M9
87.7091 72 M9
95.5636 72 M9
95.5636 115.744 M9
103.418 115.744 M9
103.418 72 M9
111.273 72 M9
111.273 154.639 M9
119.127 154.639 M9
119.127 72 M9
126.982 72 M9
126.982 206.863 M9
134.836 206.863 M9
134.836 72 M9
142.691 72 M9
142.691 211.218 M9
150.545 211.218 M9
150.545 72 M9
166.255 72 M9
166.255 90.8937 M9
174.109 90.8937 M9
174.109 72 M9
181.964 72 M9
181.964 108.406 M9
189.818 108.406 M9
189.818 72 M9
197.673 72 M9
197.673 140.883 M9
205.527 140.883 M9
205.527 72 M9
213.382 72 M9
213.382 187.309 M9
221.236 187.309 M9
221.236 72 M9
229.091 72 M9
229.091 194.827 M9
236.945 194.827 M9
236.945 72 M9
252.655 72 M9
252.655 85.9293 M9
260.509 85.9293 M9
260.509 72 M9
268.364 72 M9
268.364 94.9593 M9
276.218 94.9593 M9
276.218 72 M9
284.073 72 M9
284.073 107.734 M9
291.927 107.734 M9
291.927 72 M9
299.782 72 M9
299.782 121.254 M9
307.636 121.254 M9
307.636 72 M9
315.491 72 M9
315.491 130.268 M9
323.345 130.268 M9
323.345 72 M9
339.055 72 M9
339.055 93.0613 M9
346.909 93.0613 M9
346.909 72 M9
354.764 72 M9
354.764 111.13 M9
362.618 111.13 M9
362.618 72 M9
370.473 72 M9
370.473 141.408 M9
378.327 141.408 M9
378.327 72 M9
386.182 72 M9
386.182 174.758 M9
394.036 174.758 M9
394.036 72 M9
401.891 72 M9
401.891 175.639 M9
409.745 175.639 M9
409.745 72 M9
425.455 72 M9
425.455 83.8095 M9
433.309 83.8095 M9
433.309 72 M9
441.164 72 M9
441.164 93.5673 M9
449.018 93.5673 M9
449.018 72 M9
456.873 72 M9
456.873 104.484 M9
464.727 104.484 M9
464.727 72 M9
472.582 72 M9
472.582 113.879 M9
480.436 113.879 M9
480.436 72 M9
488.291 72 M9
488.291 129.666 M9
496.145 129.666 M9
496.145 72 M9
511.855 72 M9
511.855 88.1607 M9
519.709 88.1607 M9
519.709 72 M9
527.564 72 M9
527.564 101.767 M9
535.418 101.767 M9
535.418 72 M9
543.273 72 M9
543.273 122.637 M9
551.127 122.637 M9
551.127 72 M9
558.982 72 M9
558.982 157.018 M9
566.836 157.018 M9
566.836 72 M9
574.691 72 M9
574.691 182.332 M9
582.545 182.332 M9
582.545 72 M9
598.255 72 M9
598.255 77.4927 M9
606.109 77.4927 M9
606.109 72 M9
613.964 72 M9
613.964 82.3508 M9
621.818 82.3508 M9
621.818 72 M9
629.673 72 M9
629.673 92.8176 M9
637.527 92.8176 M9
637.527 72 M9
645.382 72 M9
645.382 111.35 M9
653.236 111.35 M9
653.236 72 M9
661.091 72 M9
661.091 138.441 M9
668.945 138.441 M9
668.945 72 M9
684.655 72 M9
684.655 86.4691 M9
692.509 86.4691 M9
692.509 72 M9
700.364 72 M9
700.364 87.7154 M9
708.218 87.7154 M9
708.218 72 M9
716.073 72 M9
716.073 88.7933 M9
723.927 88.7933 M9
723.927 72 M9
731.782 72 M9
731.782 90.2196 M9
739.636 90.2196 M9
739.636 72 M9
747.491 72 M9
747.491 90.4954 M9
755.345 90.4954 M9
755.345 72 M9
771.055 72 M9
771.055 73.8219 M9
778.909 73.8219 M9
778.909 72 M9
786.764 72 M9
786.764 73.8222 M9
794.618 73.8222 M9
794.618 72 M9
802.473 72 M9
802.473 73.8228 M9
810.327 73.8228 M9
810.327 72 M9
818.182 72 M9
818.182 73.8144 M9
826.036 73.8144 M9
826.036 72 M9
833.891 72 M9
833.891 73.8255 M9
841.745 73.8255 M9
841.745 72 M9
857.455 72 M9
857.455 79.8434 M9
865.309 79.8434 M9
865.309 72 M9
873.164 72 M9
873.164 85.4063 M9
881.018 85.4063 M9
881.018 72 M9
888.873 72 M9
888.873 90.436 M9
896.727 90.436 M9
896.727 72 M9
904.582 72 M9
904.582 94.944 M9
912.436 94.944 M9
912.436 72 M9
920.291 72 M9
920.291 98.8235 M9
928.145 98.8235 M9
928.145 72 M9
gsave
D9
grestore
gsave 40.000000 0.000000 {cross} SS9 0.700000 G9
928.145 72 M9
72 72 M9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 108 TXC
9 /Helvetica-Bold SetTxt
(20) 0 68 105.3 TXR
4 /Helvetica SetTxt
(|) -90 72 144 TXC
9 /Helvetica-Bold SetTxt
(40) 0 68 141.3 TXR
4 /Helvetica SetTxt
(|) -90 72 180 TXC
9 /Helvetica-Bold SetTxt
(60) 0 68 177.3 TXR
4 /Helvetica SetTxt
(|) -90 72 216 TXC
9 /Helvetica-Bold SetTxt
(80) 0 68 213.3 TXR
4 /Helvetica SetTxt
(|) -90 72 252 TXC
9 /Helvetica-Bold SetTxt
(100) 0 68 249.3 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 108 TXC
(|) 90 936 144 TXC
(|) 90 936 180 TXC
(|) 90 936 216 TXC
(|) 90 936 252 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Average bus utilization (%) ) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 83.7818 63 TXC
(2) 0 99.4909 63 TXC
(4) 0 115.2 63 TXC
(8) 0 130.909 63 TXC
(16) 0 146.618 63 TXC
9 /Helvetica-Bold SetTxt
(tomcatv) 0 115.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 170.182 63 TXC
(2) 0 185.891 63 TXC
(4) 0 201.6 63 TXC
(8) 0 217.309 63 TXC
(16) 0 233.018 63 TXC
9 /Helvetica-Bold SetTxt
(swim) 0 201.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 256.582 63 TXC
(2) 0 272.291 63 TXC
(4) 0 288 63 TXC
(8) 0 303.709 63 TXC
(16) 0 319.418 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 288 48.6 TXC
8 /Helvetica SetTxt
(1) 0 342.982 63 TXC
(2) 0 358.691 63 TXC
(4) 0 374.4 63 TXC
(8) 0 390.109 63 TXC
(16) 0 405.818 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 374.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 429.382 63 TXC
(2) 0 445.091 63 TXC
(4) 0 460.8 63 TXC
(8) 0 476.509 63 TXC
(16) 0 492.218 63 TXC
9 /Helvetica-Bold SetTxt
(mgrid) 0 460.8 48.6 TXC
8 /Helvetica SetTxt
(1) 0 515.782 63 TXC
(2) 0 531.491 63 TXC
(4) 0 547.2 63 TXC
(8) 0 562.909 63 TXC
(16) 0 578.618 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 547.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 602.182 63 TXC
(2) 0 617.891 63 TXC
(4) 0 633.6 63 TXC
(8) 0 649.309 63 TXC
(16) 0 665.018 63 TXC
9 /Helvetica-Bold SetTxt
(turb3d) 0 633.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 688.582 63 TXC
(2) 0 704.291 63 TXC
(4) 0 720 63 TXC
(8) 0 735.709 63 TXC
(16) 0 751.418 63 TXC
9 /Helvetica-Bold SetTxt
(apsi) 0 720 48.6 TXC
8 /Helvetica SetTxt
(1) 0 774.982 63 TXC
(2) 0 790.691 63 TXC
(4) 0 806.4 63 TXC
(8) 0 822.109 63 TXC
(16) 0 837.818 63 TXC
9 /Helvetica-Bold SetTxt
(fpppp) 0 806.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 861.382 63 TXC
(2) 0 877.091 63 TXC
(4) 0 892.8 63 TXC
(8) 0 908.509 63 TXC
(16) 0 924.218 63 TXC
9 /Helvetica-Bold SetTxt
(wave5) 0 892.8 48.6 TXC
10 /Helvetica-Bold SetTxt
(Bus Utilization) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 83.7818 54.6 TXC
() 0 99.4909 54.6 TXC
() 0 115.2 54.6 TXC
() 0 130.909 54.6 TXC
() 0 146.618 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 115.2 39.15 TXC
8 /Helvetica SetTxt
() 0 170.182 54.6 TXC
() 0 185.891 54.6 TXC
() 0 201.6 54.6 TXC
() 0 217.309 54.6 TXC
() 0 233.018 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 201.6 39.15 TXC
8 /Helvetica SetTxt
() 0 256.582 54.6 TXC
() 0 272.291 54.6 TXC
() 0 288 54.6 TXC
() 0 303.709 54.6 TXC
() 0 319.418 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 288 39.15 TXC
8 /Helvetica SetTxt
() 0 342.982 54.6 TXC
() 0 358.691 54.6 TXC
() 0 374.4 54.6 TXC
() 0 390.109 54.6 TXC
() 0 405.818 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 374.4 39.15 TXC
8 /Helvetica SetTxt
() 0 429.382 54.6 TXC
() 0 445.091 54.6 TXC
() 0 460.8 54.6 TXC
() 0 476.509 54.6 TXC
() 0 492.218 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 460.8 39.15 TXC
8 /Helvetica SetTxt
() 0 515.782 54.6 TXC
() 0 531.491 54.6 TXC
() 0 547.2 54.6 TXC
() 0 562.909 54.6 TXC
() 0 578.618 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 547.2 39.15 TXC
8 /Helvetica SetTxt
() 0 602.182 54.6 TXC
() 0 617.891 54.6 TXC
() 0 633.6 54.6 TXC
() 0 649.309 54.6 TXC
() 0 665.018 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 633.6 39.15 TXC
8 /Helvetica SetTxt
() 0 688.582 54.6 TXC
() 0 704.291 54.6 TXC
() 0 720 54.6 TXC
() 0 735.709 54.6 TXC
() 0 751.418 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 720 39.15 TXC
8 /Helvetica SetTxt
() 0 774.982 54.6 TXC
() 0 790.691 54.6 TXC
() 0 806.4 54.6 TXC
() 0 822.109 54.6 TXC
() 0 837.818 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 806.4 39.15 TXC
8 /Helvetica SetTxt
() 0 861.382 54.6 TXC
() 0 877.091 54.6 TXC
() 0 892.8 54.6 TXC
() 0 908.509 54.6 TXC
() 0 924.218 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 892.8 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 38 32 972 275 467 121.5 55.06 382.28 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/base-mcpi.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( False sharing) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( True sharing) 0 960.231 225.9 TXL
72 72 S9
[] 1.000000 SL
gsave 50.000000 135.000000 {pop} SS9 0.700000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 135.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( Replacement) 0 960.231 212.9 TXL
72 72 S9
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
944.64 196.4 958.813 196.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 196.4 958.813 196.4 
L9 grestore
( On-chip Cache) 0 960.231 199.9 TXL
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 185.923 M9
87.7091 185.923 M9
87.7091 72 M9
95.5636 72 M9
95.5636 187.208 M9
103.418 187.208 M9
103.418 72 M9
111.273 72 M9
111.273 192.265 M9
119.127 192.265 M9
119.127 72 M9
126.982 72 M9
126.982 222.765 M9
134.836 222.765 M9
134.836 72 M9
142.691 72 M9
142.691 252 M9
150.545 252 M9
150.545 72 M9
166.255 72 M9
166.255 150.349 M9
174.109 150.349 M9
174.109 72 M9
181.964 72 M9
181.964 151.106 M9
189.818 151.106 M9
189.818 72 M9
197.673 72 M9
197.673 153.999 M9
205.527 153.999 M9
205.527 72 M9
213.382 72 M9
213.382 173.742 M9
221.236 173.742 M9
221.236 72 M9
229.091 72 M9
229.091 252 M9
236.945 252 M9
236.945 72 M9
252.655 72 M9
252.655 133.758 M9
260.509 133.758 M9
260.509 72 M9
268.364 72 M9
268.364 128.861 M9
276.218 128.861 M9
276.218 72 M9
284.073 72 M9
284.073 125.712 M9
291.927 125.712 M9
291.927 72 M9
299.782 72 M9
299.782 127.443 M9
307.636 127.443 M9
307.636 72 M9
315.491 72 M9
315.491 138.206 M9
323.345 138.206 M9
323.345 72 M9
339.055 72 M9
339.055 175.373 M9
346.909 175.373 M9
346.909 72 M9
354.764 72 M9
354.764 172.636 M9
362.618 172.636 M9
362.618 72 M9
370.473 72 M9
370.473 172.45 M9
378.327 172.45 M9
378.327 72 M9
386.182 72 M9
386.182 185.504 M9
394.036 185.504 M9
394.036 72 M9
401.891 72 M9
401.891 238.59 M9
409.745 238.59 M9
409.745 72 M9
425.455 72 M9
425.455 106.836 M9
433.309 106.836 M9
433.309 72 M9
441.164 72 M9
441.164 105.54 M9
449.018 105.54 M9
449.018 72 M9
456.873 72 M9
456.873 100.274 M9
464.727 100.274 M9
464.727 72 M9
472.582 72 M9
472.582 95.5205 M9
480.436 95.5205 M9
480.436 72 M9
488.291 72 M9
488.291 97.0141 M9
496.145 97.0141 M9
496.145 72 M9
511.855 72 M9
511.855 124.879 M9
519.709 124.879 M9
519.709 72 M9
527.564 72 M9
527.564 123.438 M9
535.418 123.438 M9
535.418 72 M9
543.273 72 M9
543.273 123.084 M9
551.127 123.084 M9
551.127 72 M9
558.982 72 M9
558.982 125.587 M9
566.836 125.587 M9
566.836 72 M9
574.691 72 M9
574.691 134.049 M9
582.545 134.049 M9
582.545 72 M9
598.255 72 M9
598.255 87.3388 M9
606.109 87.3388 M9
606.109 72 M9
613.964 72 M9
613.964 87.3584 M9
621.818 87.3584 M9
621.818 72 M9
629.673 72 M9
629.673 88.9997 M9
637.527 88.9997 M9
637.527 72 M9
645.382 72 M9
645.382 91.695 M9
653.236 91.695 M9
653.236 72 M9
661.091 72 M9
661.091 99.3542 M9
668.945 99.3542 M9
668.945 72 M9
684.655 72 M9
684.655 132.633 M9
692.509 132.633 M9
692.509 72 M9
700.364 72 M9
700.364 134.164 M9
708.218 134.164 M9
708.218 72 M9
716.073 72 M9
716.073 137.005 M9
723.927 137.005 M9
723.927 72 M9
731.782 72 M9
731.782 146.958 M9
739.636 146.958 M9
739.636 72 M9
747.491 72 M9
747.491 164.755 M9
755.345 164.755 M9
755.345 72 M9
771.055 72 M9
771.055 146.928 M9
778.909 146.928 M9
778.909 72 M9
786.764 72 M9
786.764 146.933 M9
794.618 146.933 M9
794.618 72 M9
802.473 72 M9
802.473 146.924 M9
810.327 146.924 M9
810.327 72 M9
818.182 72 M9
818.182 146.92 M9
826.036 146.92 M9
826.036 72 M9
833.891 72 M9
833.891 146.921 M9
841.745 146.921 M9
841.745 72 M9
857.455 72 M9
857.455 128.207 M9
865.309 128.207 M9
865.309 72 M9
873.164 72 M9
873.164 137.609 M9
881.018 137.609 M9
881.018 72 M9
888.873 72 M9
888.873 143.702 M9
896.727 143.702 M9
896.727 72 M9
904.582 72 M9
904.582 153.635 M9
912.436 153.635 M9
912.436 72 M9
920.291 72 M9
920.291 182.924 M9
928.145 182.924 M9
928.145 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
928.145 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 185.923 M9
87.7091 185.923 M9
87.7091 72 M9
95.5636 72 M9
95.5636 187.207 M9
103.418 187.207 M9
103.418 72 M9
111.273 72 M9
111.273 192.259 M9
119.127 192.259 M9
119.127 72 M9
126.982 72 M9
126.982 222.752 M9
134.836 222.752 M9
134.836 72 M9
142.691 72 M9
142.691 252 M9
150.545 252 M9
150.545 72 M9
166.255 72 M9
166.255 150.349 M9
174.109 150.349 M9
174.109 72 M9
181.964 72 M9
181.964 151.101 M9
189.818 151.101 M9
189.818 72 M9
197.673 72 M9
197.673 153.985 M9
205.527 153.985 M9
205.527 72 M9
213.382 72 M9
213.382 173.707 M9
221.236 173.707 M9
221.236 72 M9
229.091 72 M9
229.091 252 M9
236.945 252 M9
236.945 72 M9
252.655 72 M9
252.655 133.758 M9
260.509 133.758 M9
260.509 72 M9
268.364 72 M9
268.364 127.821 M9
276.218 127.821 M9
276.218 72 M9
284.073 72 M9
284.073 122.908 M9
291.927 122.908 M9
291.927 72 M9
299.782 72 M9
299.782 120.418 M9
307.636 120.418 M9
307.636 72 M9
315.491 72 M9
315.491 126.214 M9
323.345 126.214 M9
323.345 72 M9
339.055 72 M9
339.055 175.373 M9
346.909 175.373 M9
346.909 72 M9
354.764 72 M9
354.764 172.611 M9
362.618 172.611 M9
362.618 72 M9
370.473 72 M9
370.473 172.397 M9
378.327 172.397 M9
378.327 72 M9
386.182 72 M9
386.182 185.377 M9
394.036 185.377 M9
394.036 72 M9
401.891 72 M9
401.891 238.111 M9
409.745 238.111 M9
409.745 72 M9
425.455 72 M9
425.455 106.836 M9
433.309 106.836 M9
433.309 72 M9
441.164 72 M9
441.164 105.501 M9
449.018 105.501 M9
449.018 72 M9
456.873 72 M9
456.873 100.199 M9
464.727 100.199 M9
464.727 72 M9
472.582 72 M9
472.582 95.3693 M9
480.436 95.3693 M9
480.436 72 M9
488.291 72 M9
488.291 96.7047 M9
496.145 96.7047 M9
496.145 72 M9
511.855 72 M9
511.855 124.879 M9
519.709 124.879 M9
519.709 72 M9
527.564 72 M9
527.564 123.435 M9
535.418 123.435 M9
535.418 72 M9
543.273 72 M9
543.273 123.073 M9
551.127 123.073 M9
551.127 72 M9
558.982 72 M9
558.982 125.564 M9
566.836 125.564 M9
566.836 72 M9
574.691 72 M9
574.691 133.976 M9
582.545 133.976 M9
582.545 72 M9
598.255 72 M9
598.255 87.3388 M9
606.109 87.3388 M9
606.109 72 M9
613.964 72 M9
613.964 87.3584 M9
621.818 87.3584 M9
621.818 72 M9
629.673 72 M9
629.673 87.6947 M9
637.527 87.6947 M9
637.527 72 M9
645.382 72 M9
645.382 90.1207 M9
653.236 90.1207 M9
653.236 72 M9
661.091 72 M9
661.091 97.6115 M9
668.945 97.6115 M9
668.945 72 M9
684.655 72 M9
684.655 132.633 M9
692.509 132.633 M9
692.509 72 M9
700.364 72 M9
700.364 133.557 M9
708.218 133.557 M9
708.218 72 M9
716.073 72 M9
716.073 135.488 M9
723.927 135.488 M9
723.927 72 M9
731.782 72 M9
731.782 138.86 M9
739.636 138.86 M9
739.636 72 M9
747.491 72 M9
747.491 147.75 M9
755.345 147.75 M9
755.345 72 M9
771.055 72 M9
771.055 146.928 M9
778.909 146.928 M9
778.909 72 M9
786.764 72 M9
786.764 146.933 M9
794.618 146.933 M9
794.618 72 M9
802.473 72 M9
802.473 146.924 M9
810.327 146.924 M9
810.327 72 M9
818.182 72 M9
818.182 146.92 M9
826.036 146.92 M9
826.036 72 M9
833.891 72 M9
833.891 146.921 M9
841.745 146.921 M9
841.745 72 M9
857.455 72 M9
857.455 128.207 M9
865.309 128.207 M9
865.309 72 M9
873.164 72 M9
873.164 136.724 M9
881.018 136.724 M9
881.018 72 M9
888.873 72 M9
888.873 142.321 M9
896.727 142.321 M9
896.727 72 M9
904.582 72 M9
904.582 151.422 M9
912.436 151.422 M9
912.436 72 M9
920.291 72 M9
920.291 177.891 M9
928.145 177.891 M9
928.145 72 M9
gsave
D9
grestore
928.145 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 185.923 M9
87.7091 185.923 M9
87.7091 72 M9
95.5636 72 M9
95.5636 187.173 M9
103.418 187.173 M9
103.418 72 M9
111.273 72 M9
111.273 192.135 M9
119.127 192.135 M9
119.127 72 M9
126.982 72 M9
126.982 222.392 M9
134.836 222.392 M9
134.836 72 M9
142.691 72 M9
142.691 252 M9
150.545 252 M9
150.545 72 M9
166.255 72 M9
166.255 150.349 M9
174.109 150.349 M9
174.109 72 M9
181.964 72 M9
181.964 150.971 M9
189.818 150.971 M9
189.818 72 M9
197.673 72 M9
197.673 153.681 M9
205.527 153.681 M9
205.527 72 M9
213.382 72 M9
213.382 173.073 M9
221.236 173.073 M9
221.236 72 M9
229.091 72 M9
229.091 252 M9
236.945 252 M9
236.945 72 M9
252.655 72 M9
252.655 133.758 M9
260.509 133.758 M9
260.509 72 M9
268.364 72 M9
268.364 126.878 M9
276.218 126.878 M9
276.218 72 M9
284.073 72 M9
284.073 121.179 M9
291.927 121.179 M9
291.927 72 M9
299.782 72 M9
299.782 117.414 M9
307.636 117.414 M9
307.636 72 M9
315.491 72 M9
315.491 119.847 M9
323.345 119.847 M9
323.345 72 M9
339.055 72 M9
339.055 175.373 M9
346.909 175.373 M9
346.909 72 M9
354.764 72 M9
354.764 171.405 M9
362.618 171.405 M9
362.618 72 M9
370.473 72 M9
370.473 170.2 M9
378.327 170.2 M9
378.327 72 M9
386.182 72 M9
386.182 181.376 M9
394.036 181.376 M9
394.036 72 M9
401.891 72 M9
401.891 226.435 M9
409.745 226.435 M9
409.745 72 M9
425.455 72 M9
425.455 106.836 M9
433.309 106.836 M9
433.309 72 M9
441.164 72 M9
441.164 104.613 M9
449.018 104.613 M9
449.018 72 M9
456.873 72 M9
456.873 98.0798 M9
464.727 98.0798 M9
464.727 72 M9
472.582 72 M9
472.582 91.0814 M9
480.436 91.0814 M9
480.436 72 M9
488.291 72 M9
488.291 87.3641 M9
496.145 87.3641 M9
496.145 72 M9
511.855 72 M9
511.855 124.879 M9
519.709 124.879 M9
519.709 72 M9
527.564 72 M9
527.564 122.612 M9
535.418 122.612 M9
535.418 72 M9
543.273 72 M9
543.273 121.221 M9
551.127 121.221 M9
551.127 72 M9
558.982 72 M9
558.982 122.055 M9
566.836 122.055 M9
566.836 72 M9
574.691 72 M9
574.691 130.032 M9
582.545 130.032 M9
582.545 72 M9
598.255 72 M9
598.255 87.3388 M9
606.109 87.3388 M9
606.109 72 M9
613.964 72 M9
613.964 85.1815 M9
621.818 85.1815 M9
621.818 72 M9
629.673 72 M9
629.673 84.2944 M9
637.527 84.2944 M9
637.527 72 M9
645.382 72 M9
645.382 85.7529 M9
653.236 85.7529 M9
653.236 72 M9
661.091 72 M9
661.091 91.4434 M9
668.945 91.4434 M9
668.945 72 M9
684.655 72 M9
684.655 132.633 M9
692.509 132.633 M9
692.509 72 M9
700.364 72 M9
700.364 130.263 M9
708.218 130.263 M9
708.218 72 M9
716.073 72 M9
716.073 129.875 M9
723.927 129.875 M9
723.927 72 M9
731.782 72 M9
731.782 130.15 M9
739.636 130.15 M9
739.636 72 M9
747.491 72 M9
747.491 129.67 M9
755.345 129.67 M9
755.345 72 M9
771.055 72 M9
771.055 146.928 M9
778.909 146.928 M9
778.909 72 M9
786.764 72 M9
786.764 146.933 M9
794.618 146.933 M9
794.618 72 M9
802.473 72 M9
802.473 146.924 M9
810.327 146.924 M9
810.327 72 M9
818.182 72 M9
818.182 146.92 M9
826.036 146.92 M9
826.036 72 M9
833.891 72 M9
833.891 146.921 M9
841.745 146.921 M9
841.745 72 M9
857.455 72 M9
857.455 128.207 M9
865.309 128.207 M9
865.309 72 M9
873.164 72 M9
873.164 124.268 M9
881.018 124.268 M9
881.018 72 M9
888.873 72 M9
888.873 121.686 M9
896.727 121.686 M9
896.727 72 M9
904.582 72 M9
904.582 121.914 M9
912.436 121.914 M9
912.436 72 M9
920.291 72 M9
920.291 129.256 M9
928.145 129.256 M9
928.145 72 M9
gsave
D9
grestore
gsave 50.000000 135.000000 {pop} SS9 0.700000 G9
928.145 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 80.9933 M9
87.7091 80.9933 M9
87.7091 72 M9
95.5636 72 M9
95.5636 81.0415 M9
103.418 81.0415 M9
103.418 72 M9
111.273 72 M9
111.273 81.1708 M9
119.127 81.1708 M9
119.127 72 M9
126.982 72 M9
126.982 81.58 M9
134.836 81.58 M9
134.836 72 M9
142.691 72 M9
142.691 83.3513 M9
150.545 83.3513 M9
150.545 72 M9
166.255 72 M9
166.255 80.126 M9
174.109 80.126 M9
174.109 72 M9
181.964 72 M9
181.964 80.1781 M9
189.818 80.1781 M9
189.818 72 M9
197.673 72 M9
197.673 80.2303 M9
205.527 80.2303 M9
205.527 72 M9
213.382 72 M9
213.382 80.5864 M9
221.236 80.5864 M9
221.236 72 M9
229.091 72 M9
229.091 82.1485 M9
236.945 82.1485 M9
236.945 72 M9
252.655 72 M9
252.655 92.6913 M9
260.509 92.6913 M9
260.509 72 M9
268.364 72 M9
268.364 93.3575 M9
276.218 93.3575 M9
276.218 72 M9
284.073 72 M9
284.073 94.1293 M9
291.927 94.1293 M9
291.927 72 M9
299.782 72 M9
299.782 95.1974 M9
307.636 95.1974 M9
307.636 72 M9
315.491 72 M9
315.491 96.7196 M9
323.345 96.7196 M9
323.345 72 M9
339.055 72 M9
339.055 84.6995 M9
346.909 84.6995 M9
346.909 72 M9
354.764 72 M9
354.764 85.1503 M9
362.618 85.1503 M9
362.618 72 M9
370.473 72 M9
370.473 85.7544 M9
378.327 85.7544 M9
378.327 72 M9
386.182 72 M9
386.182 87.1674 M9
394.036 87.1674 M9
394.036 72 M9
401.891 72 M9
401.891 90.425 M9
409.745 90.425 M9
409.745 72 M9
425.455 72 M9
425.455 79.8476 M9
433.309 79.8476 M9
433.309 72 M9
441.164 72 M9
441.164 80.081 M9
449.018 80.081 M9
449.018 72 M9
456.873 72 M9
456.873 80.6864 M9
464.727 80.6864 M9
464.727 72 M9
472.582 72 M9
472.582 81.3943 M9
480.436 81.3943 M9
480.436 72 M9
488.291 72 M9
488.291 81.6596 M9
496.145 81.6596 M9
496.145 72 M9
511.855 72 M9
511.855 78.1228 M9
519.709 78.1228 M9
519.709 72 M9
527.564 72 M9
527.564 78.25 M9
535.418 78.25 M9
535.418 72 M9
543.273 72 M9
543.273 78.2209 M9
551.127 78.2209 M9
551.127 72 M9
558.982 72 M9
558.982 78.351 M9
566.836 78.351 M9
566.836 72 M9
574.691 72 M9
574.691 79.4027 M9
582.545 79.4027 M9
582.545 72 M9
598.255 72 M9
598.255 77.557 M9
606.109 77.557 M9
606.109 72 M9
613.964 72 M9
613.964 77.5685 M9
621.818 77.5685 M9
621.818 72 M9
629.673 72 M9
629.673 77.579 M9
637.527 77.579 M9
637.527 72 M9
645.382 72 M9
645.382 77.6172 M9
653.236 77.6172 M9
653.236 72 M9
661.091 72 M9
661.091 77.7654 M9
668.945 77.7654 M9
668.945 72 M9
684.655 72 M9
684.655 87.5177 M9
692.509 87.5177 M9
692.509 72 M9
700.364 72 M9
700.364 86.9683 M9
708.218 86.9683 M9
708.218 72 M9
716.073 72 M9
716.073 86.8544 M9
723.927 86.8544 M9
723.927 72 M9
731.782 72 M9
731.782 86.7876 M9
739.636 86.7876 M9
739.636 72 M9
747.491 72 M9
747.491 86.3464 M9
755.345 86.3464 M9
755.345 72 M9
771.055 72 M9
771.055 146.886 M9
778.909 146.886 M9
778.909 72 M9
786.764 72 M9
786.764 146.89 M9
794.618 146.89 M9
794.618 72 M9
802.473 72 M9
802.473 146.882 M9
810.327 146.882 M9
810.327 72 M9
818.182 72 M9
818.182 146.878 M9
826.036 146.878 M9
826.036 72 M9
833.891 72 M9
833.891 146.88 M9
841.745 146.88 M9
841.745 72 M9
857.455 72 M9
857.455 110.657 M9
865.309 110.657 M9
865.309 72 M9
873.164 72 M9
873.164 107.819 M9
881.018 107.819 M9
881.018 72 M9
888.873 72 M9
888.873 106.007 M9
896.727 106.007 M9
896.727 72 M9
904.582 72 M9
904.582 104.736 M9
912.436 104.736 M9
912.436 72 M9
920.291 72 M9
920.291 103.214 M9
928.145 103.214 M9
928.145 72 M9
gsave
D9
grestore
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
928.145 72 M9
72 72 M9
E9
grestore
140.727 177.784 S9
140.727 186.784 M9
152.509 213.784 M9
152.509 204.784 M9
140.727 177.784 M9
gsave 30.000000 45.000000 {cross} SS9 1.000000 G9
E9
grestore
227.127 177.383 S9
227.127 186.383 M9
238.909 213.383 M9
238.909 204.383 M9
227.127 177.383 M9
gsave 30.000000 90.000000 {cross} SS9 1.000000 G9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 132 TXC
9 /Helvetica-Bold SetTxt
(1) 0 68 129.3 TXR
4 /Helvetica SetTxt
(|) -90 72 192 TXC
9 /Helvetica-Bold SetTxt
(2) 0 68 189.3 TXR
4 /Helvetica SetTxt
(|) -90 72 252 TXC
9 /Helvetica-Bold SetTxt
(3) 0 68 249.3 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 132 TXC
(|) 90 936 192 TXC
(|) 90 936 252 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Memory cycles per instruction ) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 83.7818 63 TXC
(2) 0 99.4909 63 TXC
(4) 0 115.2 63 TXC
(8) 0 130.909 63 TXC
(16) 0 146.618 63 TXC
10 /Helvetica SetTxt
(5.49) 90 150.545 253.8 TXL
9 /Helvetica-Bold SetTxt
(tomcatv) 0 115.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 170.182 63 TXC
(2) 0 185.891 63 TXC
(4) 0 201.6 63 TXC
(8) 0 217.309 63 TXC
(16) 0 233.018 63 TXC
10 /Helvetica SetTxt
(3.90) 90 236.945 253.8 TXL
9 /Helvetica-Bold SetTxt
(swim) 0 201.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 256.582 63 TXC
(2) 0 272.291 63 TXC
(4) 0 288 63 TXC
(8) 0 303.709 63 TXC
(16) 0 319.418 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 288 48.6 TXC
8 /Helvetica SetTxt
(1) 0 342.982 63 TXC
(2) 0 358.691 63 TXC
(4) 0 374.4 63 TXC
(8) 0 390.109 63 TXC
(16) 0 405.818 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 374.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 429.382 63 TXC
(2) 0 445.091 63 TXC
(4) 0 460.8 63 TXC
(8) 0 476.509 63 TXC
(16) 0 492.218 63 TXC
9 /Helvetica-Bold SetTxt
(mgrid) 0 460.8 48.6 TXC
8 /Helvetica SetTxt
(1) 0 515.782 63 TXC
(2) 0 531.491 63 TXC
(4) 0 547.2 63 TXC
(8) 0 562.909 63 TXC
(16) 0 578.618 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 547.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 602.182 63 TXC
(2) 0 617.891 63 TXC
(4) 0 633.6 63 TXC
(8) 0 649.309 63 TXC
(16) 0 665.018 63 TXC
9 /Helvetica-Bold SetTxt
(turb3d) 0 633.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 688.582 63 TXC
(2) 0 704.291 63 TXC
(4) 0 720 63 TXC
(8) 0 735.709 63 TXC
(16) 0 751.418 63 TXC
9 /Helvetica-Bold SetTxt
(apsi) 0 720 48.6 TXC
8 /Helvetica SetTxt
(1) 0 774.982 63 TXC
(2) 0 790.691 63 TXC
(4) 0 806.4 63 TXC
(8) 0 822.109 63 TXC
(16) 0 837.818 63 TXC
9 /Helvetica-Bold SetTxt
(fpppp) 0 806.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 861.382 63 TXC
(2) 0 877.091 63 TXC
(4) 0 892.8 63 TXC
(8) 0 908.509 63 TXC
(16) 0 924.218 63 TXC
9 /Helvetica-Bold SetTxt
(wave5) 0 892.8 48.6 TXC
10 /Helvetica-Bold SetTxt
(Memory System Behavior) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 83.7818 54.6 TXC
() 0 99.4909 54.6 TXC
() 0 115.2 54.6 TXC
() 0 130.909 54.6 TXC
() 0 146.618 54.6 TXC
10 /Helvetica SetTxt
() 90 150.545 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 115.2 39.15 TXC
8 /Helvetica SetTxt
() 0 170.182 54.6 TXC
() 0 185.891 54.6 TXC
() 0 201.6 54.6 TXC
() 0 217.309 54.6 TXC
() 0 233.018 54.6 TXC
10 /Helvetica SetTxt
() 90 236.945 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 201.6 39.15 TXC
8 /Helvetica SetTxt
() 0 256.582 54.6 TXC
() 0 272.291 54.6 TXC
() 0 288 54.6 TXC
() 0 303.709 54.6 TXC
() 0 319.418 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 288 39.15 TXC
8 /Helvetica SetTxt
() 0 342.982 54.6 TXC
() 0 358.691 54.6 TXC
() 0 374.4 54.6 TXC
() 0 390.109 54.6 TXC
() 0 405.818 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 374.4 39.15 TXC
8 /Helvetica SetTxt
() 0 429.382 54.6 TXC
() 0 445.091 54.6 TXC
() 0 460.8 54.6 TXC
() 0 476.509 54.6 TXC
() 0 492.218 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 460.8 39.15 TXC
8 /Helvetica SetTxt
() 0 515.782 54.6 TXC
() 0 531.491 54.6 TXC
() 0 547.2 54.6 TXC
() 0 562.909 54.6 TXC
() 0 578.618 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 547.2 39.15 TXC
8 /Helvetica SetTxt
() 0 602.182 54.6 TXC
() 0 617.891 54.6 TXC
() 0 633.6 54.6 TXC
() 0 649.309 54.6 TXC
() 0 665.018 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 633.6 39.15 TXC
8 /Helvetica SetTxt
() 0 688.582 54.6 TXC
() 0 704.291 54.6 TXC
() 0 720 54.6 TXC
() 0 735.709 54.6 TXC
() 0 751.418 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 720 39.15 TXC
8 /Helvetica SetTxt
() 0 774.982 54.6 TXC
() 0 790.691 54.6 TXC
() 0 806.4 54.6 TXC
() 0 822.109 54.6 TXC
() 0 837.818 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 806.4 39.15 TXC
8 /Helvetica SetTxt
() 0 861.382 54.6 TXC
() 0 877.091 54.6 TXC
() 0 892.8 54.6 TXC
() 0 908.509 54.6 TXC
() 0 924.218 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 892.8 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 38 32 972 275 467 121.5 52.33 505.22 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/base-sync.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 135.000000 0.000000 {pop} SS9 0.700000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
[] 1.000000 SL
gsave 135.000000 0.000000 {pop} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( Synchronization) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( Suppressed) 0 960.231 225.9 TXL
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( Sequential) 0 960.231 212.9 TXL
72 72 S9
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
944.64 196.4 958.813 196.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 196.4 958.813 196.4 
L9 grestore
( Load Imbalance) 0 960.231 199.9 TXL
72 72 S9
[] 1.000000 SL
gsave 50.000000 45.000000 {pop} SS9 0.700000 G9
944.64 196.4 958.813 196.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 196.4 958.813 196.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 45.000000 {pop} SS9 1.000000 G9
944.64 183.4 958.813 183.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 183.4 958.813 183.4 
L9 grestore
( Kernel) 0 960.231 186.9 TXL
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 73.3024 M9
87.7091 73.3024 M9
87.7091 72 M9
95.5636 72 M9
95.5636 73.6488 M9
103.418 73.6488 M9
103.418 72 M9
111.273 72 M9
111.273 77.0807 M9
119.127 77.0807 M9
119.127 72 M9
126.982 72 M9
126.982 81.974 M9
134.836 81.974 M9
134.836 72 M9
142.691 72 M9
142.691 86.4349 M9
150.545 86.4349 M9
150.545 72 M9
166.255 72 M9
166.255 73.6469 M9
174.109 73.6469 M9
174.109 72 M9
181.964 72 M9
181.964 76.8723 M9
189.818 76.8723 M9
189.818 72 M9
197.673 72 M9
197.673 81.3678 M9
205.527 81.3678 M9
205.527 72 M9
213.382 72 M9
213.382 86.4405 M9
221.236 86.4405 M9
221.236 72 M9
229.091 72 M9
229.091 89.7183 M9
236.945 89.7183 M9
236.945 72 M9
252.655 72 M9
252.655 75.2008 M9
260.509 75.2008 M9
260.509 72 M9
268.364 72 M9
268.364 85.3511 M9
276.218 85.3511 M9
276.218 72 M9
284.073 72 M9
284.073 101.058 M9
291.927 101.058 M9
291.927 72 M9
299.782 72 M9
299.782 123.97 M9
307.636 123.97 M9
307.636 72 M9
315.491 72 M9
315.491 153.379 M9
323.345 153.379 M9
323.345 72 M9
339.055 72 M9
339.055 74.1954 M9
346.909 74.1954 M9
346.909 72 M9
354.764 72 M9
354.764 79.2321 M9
362.618 79.2321 M9
362.618 72 M9
370.473 72 M9
370.473 89.0128 M9
378.327 89.0128 M9
378.327 72 M9
386.182 72 M9
386.182 102.403 M9
394.036 102.403 M9
394.036 72 M9
401.891 72 M9
401.891 116.732 M9
409.745 116.732 M9
409.745 72 M9
425.455 72 M9
425.455 74.1664 M9
433.309 74.1664 M9
433.309 72 M9
441.164 72 M9
441.164 78.1811 M9
449.018 78.1811 M9
449.018 72 M9
456.873 72 M9
456.873 88.7612 M9
464.727 88.7612 M9
464.727 72 M9
472.582 72 M9
472.582 105.178 M9
480.436 105.178 M9
480.436 72 M9
488.291 72 M9
488.291 129.797 M9
496.145 129.797 M9
496.145 72 M9
511.855 72 M9
511.855 77.1744 M9
519.709 77.1744 M9
519.709 72 M9
527.564 72 M9
527.564 82.9357 M9
535.418 82.9357 M9
535.418 72 M9
543.273 72 M9
543.273 101.924 M9
551.127 101.924 M9
551.127 72 M9
558.982 72 M9
558.982 119.004 M9
566.836 119.004 M9
566.836 72 M9
574.691 72 M9
574.691 147.177 M9
582.545 147.177 M9
582.545 72 M9
598.255 72 M9
598.255 76.6519 M9
606.109 76.6519 M9
606.109 72 M9
613.964 72 M9
613.964 76.8742 M9
621.818 76.8742 M9
621.818 72 M9
629.673 72 M9
629.673 78.7437 M9
637.527 78.7437 M9
637.527 72 M9
645.382 72 M9
645.382 82.0604 M9
653.236 82.0604 M9
653.236 72 M9
661.091 72 M9
661.091 88.9097 M9
668.945 88.9097 M9
668.945 72 M9
684.655 72 M9
684.655 80.3705 M9
692.509 80.3705 M9
692.509 72 M9
700.364 72 M9
700.364 159.034 M9
708.218 159.034 M9
708.218 72 M9
716.073 72 M9
716.073 202.352 M9
723.927 202.352 M9
723.927 72 M9
731.782 72 M9
731.782 224.595 M9
739.636 224.595 M9
739.636 72 M9
747.491 72 M9
747.491 235.615 M9
755.345 235.615 M9
755.345 72 M9
771.055 72 M9
771.055 73.9707 M9
778.909 73.9707 M9
778.909 72 M9
786.764 72 M9
786.764 162.941 M9
794.618 162.941 M9
794.618 72 M9
802.473 72 M9
802.473 207.458 M9
810.327 207.458 M9
810.327 72 M9
818.182 72 M9
818.182 229.735 M9
826.036 229.735 M9
826.036 72 M9
833.891 72 M9
833.891 240.869 M9
841.745 240.869 M9
841.745 72 M9
857.455 72 M9
857.455 85.2985 M9
865.309 85.2985 M9
865.309 72 M9
873.164 72 M9
873.164 135.31 M9
881.018 135.31 M9
881.018 72 M9
888.873 72 M9
888.873 176.255 M9
896.727 176.255 M9
896.727 72 M9
904.582 72 M9
904.582 205.462 M9
912.436 205.462 M9
912.436 72 M9
920.291 72 M9
920.291 221.562 M9
928.145 221.562 M9
928.145 72 M9
gsave
D9
grestore
gsave 135.000000 0.000000 {pop} SS9 0.700000 G9
928.145 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 73.3024 M9
87.7091 73.3024 M9
87.7091 72 M9
95.5636 72 M9
95.5636 73.6408 M9
103.418 73.6408 M9
103.418 72 M9
111.273 72 M9
111.273 77.0739 M9
119.127 77.0739 M9
119.127 72 M9
126.982 72 M9
126.982 81.964 M9
134.836 81.964 M9
134.836 72 M9
142.691 72 M9
142.691 86.4263 M9
150.545 86.4263 M9
150.545 72 M9
166.255 72 M9
166.255 73.6469 M9
174.109 73.6469 M9
174.109 72 M9
181.964 72 M9
181.964 76.8425 M9
189.818 76.8425 M9
189.818 72 M9
197.673 72 M9
197.673 81.2968 M9
205.527 81.2968 M9
205.527 72 M9
213.382 72 M9
213.382 86.3168 M9
221.236 86.3168 M9
221.236 72 M9
229.091 72 M9
229.091 89.5883 M9
236.945 89.5883 M9
236.945 72 M9
252.655 72 M9
252.655 75.2008 M9
260.509 75.2008 M9
260.509 72 M9
268.364 72 M9
268.364 84.7411 M9
276.218 84.7411 M9
276.218 72 M9
284.073 72 M9
284.073 99.8874 M9
291.927 99.8874 M9
291.927 72 M9
299.782 72 M9
299.782 121.806 M9
307.636 121.806 M9
307.636 72 M9
315.491 72 M9
315.491 148.628 M9
323.345 148.628 M9
323.345 72 M9
339.055 72 M9
339.055 74.1954 M9
346.909 74.1954 M9
346.909 72 M9
354.764 72 M9
354.764 79.1083 M9
362.618 79.1083 M9
362.618 72 M9
370.473 72 M9
370.473 88.8093 M9
378.327 88.8093 M9
378.327 72 M9
386.182 72 M9
386.182 102.093 M9
394.036 102.093 M9
394.036 72 M9
401.891 72 M9
401.891 116.153 M9
409.745 116.153 M9
409.745 72 M9
425.455 72 M9
425.455 74.1664 M9
433.309 74.1664 M9
433.309 72 M9
441.164 72 M9
441.164 78.0447 M9
449.018 78.0447 M9
449.018 72 M9
456.873 72 M9
456.873 88.4378 M9
464.727 88.4378 M9
464.727 72 M9
472.582 72 M9
472.582 104.511 M9
480.436 104.511 M9
480.436 72 M9
488.291 72 M9
488.291 128.055 M9
496.145 128.055 M9
496.145 72 M9
511.855 72 M9
511.855 77.1744 M9
519.709 77.1744 M9
519.709 72 M9
527.564 72 M9
527.564 82.9228 M9
535.418 82.9228 M9
535.418 72 M9
543.273 72 M9
543.273 101.901 M9
551.127 101.901 M9
551.127 72 M9
558.982 72 M9
558.982 118.966 M9
566.836 118.966 M9
566.836 72 M9
574.691 72 M9
574.691 147.132 M9
582.545 147.132 M9
582.545 72 M9
598.255 72 M9
598.255 76.6519 M9
606.109 76.6519 M9
606.109 72 M9
613.964 72 M9
613.964 76.8706 M9
621.818 76.8706 M9
621.818 72 M9
629.673 72 M9
629.673 78.7363 M9
637.527 78.7363 M9
637.527 72 M9
645.382 72 M9
645.382 82.0504 M9
653.236 82.0504 M9
653.236 72 M9
661.091 72 M9
661.091 88.8926 M9
668.945 88.8926 M9
668.945 72 M9
684.655 72 M9
684.655 80.3705 M9
692.509 80.3705 M9
692.509 72 M9
700.364 72 M9
700.364 158.742 M9
708.218 158.742 M9
708.218 72 M9
716.073 72 M9
716.073 202.004 M9
723.927 202.004 M9
723.927 72 M9
731.782 72 M9
731.782 224.179 M9
739.636 224.179 M9
739.636 72 M9
747.491 72 M9
747.491 234.7 M9
755.345 234.7 M9
755.345 72 M9
771.055 72 M9
771.055 73.9707 M9
778.909 73.9707 M9
778.909 72 M9
786.764 72 M9
786.764 162.941 M9
794.618 162.941 M9
794.618 72 M9
802.473 72 M9
802.473 207.458 M9
810.327 207.458 M9
810.327 72 M9
818.182 72 M9
818.182 229.735 M9
826.036 229.735 M9
826.036 72 M9
833.891 72 M9
833.891 240.869 M9
841.745 240.869 M9
841.745 72 M9
857.455 72 M9
857.455 85.2985 M9
865.309 85.2985 M9
865.309 72 M9
873.164 72 M9
873.164 133.345 M9
881.018 133.345 M9
881.018 72 M9
888.873 72 M9
888.873 173.14 M9
896.727 173.14 M9
896.727 72 M9
904.582 72 M9
904.582 200.271 M9
912.436 200.271 M9
912.436 72 M9
920.291 72 M9
920.291 212.208 M9
928.145 212.208 M9
928.145 72 M9
gsave
D9
grestore
928.145 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 73.3024 M9
87.7091 73.3024 M9
87.7091 72 M9
95.5636 72 M9
95.5636 73.6408 M9
103.418 73.6408 M9
103.418 72 M9
111.273 72 M9
111.273 77.0739 M9
119.127 77.0739 M9
119.127 72 M9
126.982 72 M9
126.982 81.964 M9
134.836 81.964 M9
134.836 72 M9
142.691 72 M9
142.691 86.4263 M9
150.545 86.4263 M9
150.545 72 M9
166.255 72 M9
166.255 73.6469 M9
174.109 73.6469 M9
174.109 72 M9
181.964 72 M9
181.964 76.8425 M9
189.818 76.8425 M9
189.818 72 M9
197.673 72 M9
197.673 81.2968 M9
205.527 81.2968 M9
205.527 72 M9
213.382 72 M9
213.382 86.3168 M9
221.236 86.3168 M9
221.236 72 M9
229.091 72 M9
229.091 89.5883 M9
236.945 89.5883 M9
236.945 72 M9
252.655 72 M9
252.655 75.2008 M9
260.509 75.2008 M9
260.509 72 M9
268.364 72 M9
268.364 82.7356 M9
276.218 82.7356 M9
276.218 72 M9
284.073 72 M9
284.073 94.0055 M9
291.927 94.0055 M9
291.927 72 M9
299.782 72 M9
299.782 110.224 M9
307.636 110.224 M9
307.636 72 M9
315.491 72 M9
315.491 131.256 M9
323.345 131.256 M9
323.345 72 M9
339.055 72 M9
339.055 74.1954 M9
346.909 74.1954 M9
346.909 72 M9
354.764 72 M9
354.764 79.1083 M9
362.618 79.1083 M9
362.618 72 M9
370.473 72 M9
370.473 88.8093 M9
378.327 88.8093 M9
378.327 72 M9
386.182 72 M9
386.182 102.093 M9
394.036 102.093 M9
394.036 72 M9
401.891 72 M9
401.891 116.153 M9
409.745 116.153 M9
409.745 72 M9
425.455 72 M9
425.455 74.1664 M9
433.309 74.1664 M9
433.309 72 M9
441.164 72 M9
441.164 78.0447 M9
449.018 78.0447 M9
449.018 72 M9
456.873 72 M9
456.873 88.4378 M9
464.727 88.4378 M9
464.727 72 M9
472.582 72 M9
472.582 104.511 M9
480.436 104.511 M9
480.436 72 M9
488.291 72 M9
488.291 128.055 M9
496.145 128.055 M9
496.145 72 M9
511.855 72 M9
511.855 77.1744 M9
519.709 77.1744 M9
519.709 72 M9
527.564 72 M9
527.564 82.9228 M9
535.418 82.9228 M9
535.418 72 M9
543.273 72 M9
543.273 101.901 M9
551.127 101.901 M9
551.127 72 M9
558.982 72 M9
558.982 118.966 M9
566.836 118.966 M9
566.836 72 M9
574.691 72 M9
574.691 147.132 M9
582.545 147.132 M9
582.545 72 M9
598.255 72 M9
598.255 76.6519 M9
606.109 76.6519 M9
606.109 72 M9
613.964 72 M9
613.964 76.8706 M9
621.818 76.8706 M9
621.818 72 M9
629.673 72 M9
629.673 78.7363 M9
637.527 78.7363 M9
637.527 72 M9
645.382 72 M9
645.382 82.0504 M9
653.236 82.0504 M9
653.236 72 M9
661.091 72 M9
661.091 88.8926 M9
668.945 88.8926 M9
668.945 72 M9
684.655 72 M9
684.655 80.3705 M9
692.509 80.3705 M9
692.509 72 M9
700.364 72 M9
700.364 91.3176 M9
708.218 91.3176 M9
708.218 72 M9
716.073 72 M9
716.073 96.4237 M9
723.927 96.4237 M9
723.927 72 M9
731.782 72 M9
731.782 99.6319 M9
739.636 99.6319 M9
739.636 72 M9
747.491 72 M9
747.491 101.067 M9
755.345 101.067 M9
755.345 72 M9
771.055 72 M9
771.055 73.9707 M9
778.909 73.9707 M9
778.909 72 M9
786.764 72 M9
786.764 162.941 M9
794.618 162.941 M9
794.618 72 M9
802.473 72 M9
802.473 207.458 M9
810.327 207.458 M9
810.327 72 M9
818.182 72 M9
818.182 229.735 M9
826.036 229.735 M9
826.036 72 M9
833.891 72 M9
833.891 240.869 M9
841.745 240.869 M9
841.745 72 M9
857.455 72 M9
857.455 85.2985 M9
865.309 85.2985 M9
865.309 72 M9
873.164 72 M9
873.164 119.19 M9
881.018 119.19 M9
881.018 72 M9
888.873 72 M9
888.873 147.12 M9
896.727 147.12 M9
896.727 72 M9
904.582 72 M9
904.582 165.922 M9
912.436 165.922 M9
912.436 72 M9
920.291 72 M9
920.291 174.329 M9
928.145 174.329 M9
928.145 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
928.145 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 73.3024 M9
87.7091 73.3024 M9
87.7091 72 M9
95.5636 72 M9
95.5636 73.633 M9
103.418 73.633 M9
103.418 72 M9
111.273 72 M9
111.273 77.0655 M9
119.127 77.0655 M9
119.127 72 M9
126.982 72 M9
126.982 81.9485 M9
134.836 81.9485 M9
134.836 72 M9
142.691 72 M9
142.691 86.4108 M9
150.545 86.4108 M9
150.545 72 M9
166.255 72 M9
166.255 73.6469 M9
174.109 73.6469 M9
174.109 72 M9
181.964 72 M9
181.964 76.7777 M9
189.818 76.7777 M9
189.818 72 M9
197.673 72 M9
197.673 81.2154 M9
205.527 81.2154 M9
205.527 72 M9
213.382 72 M9
213.382 86.1636 M9
221.236 86.1636 M9
221.236 72 M9
229.091 72 M9
229.091 89.4149 M9
236.945 89.4149 M9
236.945 72 M9
252.655 72 M9
252.655 75.2008 M9
260.509 75.2008 M9
260.509 72 M9
268.364 72 M9
268.364 80.502 M9
276.218 80.502 M9
276.218 72 M9
284.073 72 M9
284.073 89.1975 M9
291.927 89.1975 M9
291.927 72 M9
299.782 72 M9
299.782 102.175 M9
307.636 102.175 M9
307.636 72 M9
315.491 72 M9
315.491 120.283 M9
323.345 120.283 M9
323.345 72 M9
339.055 72 M9
339.055 74.1954 M9
346.909 74.1954 M9
346.909 72 M9
354.764 72 M9
354.764 75.7218 M9
362.618 75.7218 M9
362.618 72 M9
370.473 72 M9
370.473 79.0102 M9
378.327 79.0102 M9
378.327 72 M9
386.182 72 M9
386.182 82.3818 M9
394.036 82.3818 M9
394.036 72 M9
401.891 72 M9
401.891 86.9579 M9
409.745 86.9579 M9
409.745 72 M9
425.455 72 M9
425.455 74.1664 M9
433.309 74.1664 M9
433.309 72 M9
441.164 72 M9
441.164 76.711 M9
449.018 76.711 M9
449.018 72 M9
456.873 72 M9
456.873 84.5224 M9
464.727 84.5224 M9
464.727 72 M9
472.582 72 M9
472.582 96.31 M9
480.436 96.31 M9
480.436 72 M9
488.291 72 M9
488.291 115.611 M9
496.145 115.611 M9
496.145 72 M9
511.855 72 M9
511.855 77.1744 M9
519.709 77.1744 M9
519.709 72 M9
527.564 72 M9
527.564 82.8871 M9
535.418 82.8871 M9
535.418 72 M9
543.273 72 M9
543.273 101.815 M9
551.127 101.815 M9
551.127 72 M9
558.982 72 M9
558.982 118.796 M9
566.836 118.796 M9
566.836 72 M9
574.691 72 M9
574.691 146.897 M9
582.545 146.897 M9
582.545 72 M9
598.255 72 M9
598.255 76.6519 M9
606.109 76.6519 M9
606.109 72 M9
613.964 72 M9
613.964 76.8572 M9
621.818 76.8572 M9
621.818 72 M9
629.673 72 M9
629.673 78.7021 M9
637.527 78.7021 M9
637.527 72 M9
645.382 72 M9
645.382 81.995 M9
653.236 81.995 M9
653.236 72 M9
661.091 72 M9
661.091 88.805 M9
668.945 88.805 M9
668.945 72 M9
684.655 72 M9
684.655 80.3705 M9
692.509 80.3705 M9
692.509 72 M9
700.364 72 M9
700.364 77.5563 M9
708.218 77.5563 M9
708.218 72 M9
716.073 72 M9
716.073 75.0688 M9
723.927 75.0688 M9
723.927 72 M9
731.782 72 M9
731.782 74.7607 M9
739.636 74.7607 M9
739.636 72 M9
747.491 72 M9
747.491 74.4173 M9
755.345 74.4173 M9
755.345 72 M9
771.055 72 M9
771.055 73.9707 M9
778.909 73.9707 M9
778.909 72 M9
786.764 72 M9
786.764 73.092 M9
794.618 73.092 M9
794.618 72 M9
802.473 72 M9
802.473 72.659 M9
810.327 72.659 M9
810.327 72 M9
818.182 72 M9
818.182 72.4769 M9
826.036 72.4769 M9
826.036 72 M9
833.891 72 M9
833.891 72.373 M9
841.745 72.373 M9
841.745 72 M9
857.455 72 M9
857.455 85.2985 M9
865.309 85.2985 M9
865.309 72 M9
873.164 72 M9
873.164 89.3458 M9
881.018 89.3458 M9
881.018 72 M9
888.873 72 M9
888.873 87.4873 M9
896.727 87.4873 M9
896.727 72 M9
904.582 72 M9
904.582 84.8556 M9
912.436 84.8556 M9
912.436 72 M9
920.291 72 M9
920.291 83.7296 M9
928.145 83.7296 M9
928.145 72 M9
gsave
D9
grestore
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
928.145 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 73.3012 M9
87.7091 73.3012 M9
87.7091 72 M9
95.5636 72 M9
95.5636 73.3407 M9
103.418 73.3407 M9
103.418 72 M9
111.273 72 M9
111.273 73.3112 M9
119.127 73.3112 M9
119.127 72 M9
126.982 72 M9
126.982 73.4144 M9
134.836 73.4144 M9
134.836 72 M9
142.691 72 M9
142.691 74.4184 M9
150.545 74.4184 M9
150.545 72 M9
166.255 72 M9
166.255 73.6469 M9
174.109 73.6469 M9
174.109 72 M9
181.964 72 M9
181.964 73.6846 M9
189.818 73.6846 M9
189.818 72 M9
197.673 72 M9
197.673 73.6787 M9
205.527 73.6787 M9
205.527 72 M9
213.382 72 M9
213.382 73.7016 M9
221.236 73.7016 M9
221.236 72 M9
229.091 72 M9
229.091 74.143 M9
236.945 74.143 M9
236.945 72 M9
252.655 72 M9
252.655 75.2008 M9
260.509 75.2008 M9
260.509 72 M9
268.364 72 M9
268.364 75.0531 M9
276.218 75.0531 M9
276.218 72 M9
284.073 72 M9
284.073 74.6513 M9
291.927 74.6513 M9
291.927 72 M9
299.782 72 M9
299.782 74.38 M9
307.636 74.38 M9
307.636 72 M9
315.491 72 M9
315.491 74.2878 M9
323.345 74.2878 M9
323.345 72 M9
339.055 72 M9
339.055 74.1954 M9
346.909 74.1954 M9
346.909 72 M9
354.764 72 M9
354.764 73.8937 M9
362.618 73.8937 M9
362.618 72 M9
370.473 72 M9
370.473 73.6709 M9
378.327 73.6709 M9
378.327 72 M9
386.182 72 M9
386.182 73.5611 M9
394.036 73.5611 M9
394.036 72 M9
401.891 72 M9
401.891 74.0747 M9
409.745 74.0747 M9
409.745 72 M9
425.455 72 M9
425.455 74.1664 M9
433.309 74.1664 M9
433.309 72 M9
441.164 72 M9
441.164 74.1864 M9
449.018 74.1864 M9
449.018 72 M9
456.873 72 M9
456.873 74.1745 M9
464.727 74.1745 M9
464.727 72 M9
472.582 72 M9
472.582 74.1406 M9
480.436 74.1406 M9
480.436 72 M9
488.291 72 M9
488.291 74.0064 M9
496.145 74.0064 M9
496.145 72 M9
511.855 72 M9
511.855 77.1744 M9
519.709 77.1744 M9
519.709 72 M9
527.564 72 M9
527.564 76.6815 M9
535.418 76.6815 M9
535.418 72 M9
543.273 72 M9
543.273 75.8606 M9
551.127 75.8606 M9
551.127 72 M9
558.982 72 M9
558.982 74.9593 M9
566.836 74.9593 M9
566.836 72 M9
574.691 72 M9
574.691 74.4686 M9
582.545 74.4686 M9
582.545 72 M9
598.255 72 M9
598.255 76.6519 M9
606.109 76.6519 M9
606.109 72 M9
613.964 72 M9
613.964 76.6553 M9
621.818 76.6553 M9
621.818 72 M9
629.673 72 M9
629.673 76.4788 M9
637.527 76.4788 M9
637.527 72 M9
645.382 72 M9
645.382 76.3011 M9
653.236 76.3011 M9
653.236 72 M9
661.091 72 M9
661.091 76.4171 M9
668.945 76.4171 M9
668.945 72 M9
684.655 72 M9
684.655 80.3705 M9
692.509 80.3705 M9
692.509 72 M9
700.364 72 M9
700.364 76.3552 M9
708.218 76.3552 M9
708.218 72 M9
716.073 72 M9
716.073 74.3148 M9
723.927 74.3148 M9
723.927 72 M9
731.782 72 M9
731.782 73.3523 M9
739.636 73.3523 M9
739.636 72 M9
747.491 72 M9
747.491 72.9027 M9
755.345 72.9027 M9
755.345 72 M9
771.055 72 M9
771.055 73.9707 M9
778.909 73.9707 M9
778.909 72 M9
786.764 72 M9
786.764 73.092 M9
794.618 73.092 M9
794.618 72 M9
802.473 72 M9
802.473 72.659 M9
810.327 72.659 M9
810.327 72 M9
818.182 72 M9
818.182 72.4769 M9
826.036 72.4769 M9
826.036 72 M9
833.891 72 M9
833.891 72.373 M9
841.745 72.373 M9
841.745 72 M9
857.455 72 M9
857.455 85.2985 M9
865.309 85.2985 M9
865.309 72 M9
873.164 72 M9
873.164 80.9537 M9
881.018 80.9537 M9
881.018 72 M9
888.873 72 M9
888.873 77.1637 M9
896.727 77.1637 M9
896.727 72 M9
904.582 72 M9
904.582 74.8137 M9
912.436 74.8137 M9
912.436 72 M9
920.291 72 M9
920.291 73.9286 M9
928.145 73.9286 M9
928.145 72 M9
gsave
D9
grestore
gsave 50.000000 45.000000 {pop} SS9 0.700000 G9
928.145 72 M9
72 72 M9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 108 TXC
9 /Helvetica-Bold SetTxt
(20) 0 68 105.3 TXR
4 /Helvetica SetTxt
(|) -90 72 144 TXC
9 /Helvetica-Bold SetTxt
(40) 0 68 141.3 TXR
4 /Helvetica SetTxt
(|) -90 72 180 TXC
9 /Helvetica-Bold SetTxt
(60) 0 68 177.3 TXR
4 /Helvetica SetTxt
(|) -90 72 216 TXC
9 /Helvetica-Bold SetTxt
(80) 0 68 213.3 TXR
4 /Helvetica SetTxt
(|) -90 72 252 TXC
9 /Helvetica-Bold SetTxt
(100) 0 68 249.3 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 108 TXC
(|) 90 936 144 TXC
(|) 90 936 180 TXC
(|) 90 936 216 TXC
(|) 90 936 252 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Percentage of combined execution time (%)  ) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 83.7818 63 TXC
(2) 0 99.4909 63 TXC
(4) 0 115.2 63 TXC
(8) 0 130.909 63 TXC
(16) 0 146.618 63 TXC
9 /Helvetica-Bold SetTxt
(tomcatv) 0 115.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 170.182 63 TXC
(2) 0 185.891 63 TXC
(4) 0 201.6 63 TXC
(8) 0 217.309 63 TXC
(16) 0 233.018 63 TXC
9 /Helvetica-Bold SetTxt
(swim) 0 201.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 256.582 63 TXC
(2) 0 272.291 63 TXC
(4) 0 288 63 TXC
(8) 0 303.709 63 TXC
(16) 0 319.418 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 288 48.6 TXC
8 /Helvetica SetTxt
(1) 0 342.982 63 TXC
(2) 0 358.691 63 TXC
(4) 0 374.4 63 TXC
(8) 0 390.109 63 TXC
(16) 0 405.818 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 374.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 429.382 63 TXC
(2) 0 445.091 63 TXC
(4) 0 460.8 63 TXC
(8) 0 476.509 63 TXC
(16) 0 492.218 63 TXC
9 /Helvetica-Bold SetTxt
(mgrid) 0 460.8 48.6 TXC
8 /Helvetica SetTxt
(1) 0 515.782 63 TXC
(2) 0 531.491 63 TXC
(4) 0 547.2 63 TXC
(8) 0 562.909 63 TXC
(16) 0 578.618 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 547.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 602.182 63 TXC
(2) 0 617.891 63 TXC
(4) 0 633.6 63 TXC
(8) 0 649.309 63 TXC
(16) 0 665.018 63 TXC
9 /Helvetica-Bold SetTxt
(turb3d) 0 633.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 688.582 63 TXC
(2) 0 704.291 63 TXC
(4) 0 720 63 TXC
(8) 0 735.709 63 TXC
(16) 0 751.418 63 TXC
9 /Helvetica-Bold SetTxt
(apsi) 0 720 48.6 TXC
8 /Helvetica SetTxt
(1) 0 774.982 63 TXC
(2) 0 790.691 63 TXC
(4) 0 806.4 63 TXC
(8) 0 822.109 63 TXC
(16) 0 837.818 63 TXC
9 /Helvetica-Bold SetTxt
(fpppp) 0 806.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 861.382 63 TXC
(2) 0 877.091 63 TXC
(4) 0 892.8 63 TXC
(8) 0 908.509 63 TXC
(16) 0 924.218 63 TXC
9 /Helvetica-Bold SetTxt
(wave5) 0 892.8 48.6 TXC
10 /Helvetica-Bold SetTxt
(Overheads) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 83.7818 54.6 TXC
() 0 99.4909 54.6 TXC
() 0 115.2 54.6 TXC
() 0 130.909 54.6 TXC
() 0 146.618 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 115.2 39.15 TXC
8 /Helvetica SetTxt
() 0 170.182 54.6 TXC
() 0 185.891 54.6 TXC
() 0 201.6 54.6 TXC
() 0 217.309 54.6 TXC
() 0 233.018 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 201.6 39.15 TXC
8 /Helvetica SetTxt
() 0 256.582 54.6 TXC
() 0 272.291 54.6 TXC
() 0 288 54.6 TXC
() 0 303.709 54.6 TXC
() 0 319.418 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 288 39.15 TXC
8 /Helvetica SetTxt
() 0 342.982 54.6 TXC
() 0 358.691 54.6 TXC
() 0 374.4 54.6 TXC
() 0 390.109 54.6 TXC
() 0 405.818 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 374.4 39.15 TXC
8 /Helvetica SetTxt
() 0 429.382 54.6 TXC
() 0 445.091 54.6 TXC
() 0 460.8 54.6 TXC
() 0 476.509 54.6 TXC
() 0 492.218 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 460.8 39.15 TXC
8 /Helvetica SetTxt
() 0 515.782 54.6 TXC
() 0 531.491 54.6 TXC
() 0 547.2 54.6 TXC
() 0 562.909 54.6 TXC
() 0 578.618 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 547.2 39.15 TXC
8 /Helvetica SetTxt
() 0 602.182 54.6 TXC
() 0 617.891 54.6 TXC
() 0 633.6 54.6 TXC
() 0 649.309 54.6 TXC
() 0 665.018 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 633.6 39.15 TXC
8 /Helvetica SetTxt
() 0 688.582 54.6 TXC
() 0 704.291 54.6 TXC
() 0 720 54.6 TXC
() 0 735.709 54.6 TXC
() 0 751.418 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 720 39.15 TXC
8 /Helvetica SetTxt
() 0 774.982 54.6 TXC
() 0 790.691 54.6 TXC
() 0 806.4 54.6 TXC
() 0 822.109 54.6 TXC
() 0 837.818 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 806.4 39.15 TXC
8 /Helvetica SetTxt
() 0 861.382 54.6 TXC
() 0 877.091 54.6 TXC
() 0 892.8 54.6 TXC
() 0 908.509 54.6 TXC
() 0 924.218 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 892.8 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
55 150.5 557.5 276.5 R
7 X
0 0 0 1 0 0 0 K
V
55 263 557.5 276.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55 263 557.5 276.5 R
7 X
0 0 0 1 0 0 0 K
V
55 272 523 272 2 L
V
1 H
2 Z
0 X
N
54 162.2 558 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 2.  High Level Characterization of the W) 55 257 T
(orkloads) 248.24 257 T
1 F
0.25 (This \336gure shows four complementary views of the performance of all ten benchmarks of the SPEC95fp suite, for 1 to 16 processors. The) 55 246 P
2 F
0.06 (combined execution time) 55 235 P
1 F
0.06 ( is the sum of the execution time over all processors. Using this metric, bars of same height for a given application) 144.59 235 P
0.21 (correspond to a linear speedup. The) 55 224 P
2 F
0.21 (over) 186.99 224 P
0.21 (head) 202.82 224 P
1 F
0.21 (graph corresponds to the time spent in the operating system and in synchronization routines.) 222.78 224 P
-0.13 (The) 55 213 P
2 F
-0.13 (memory system behavior) 71.12 213 P
1 F
-0.13 ( graph quanti\336es and classi\336es the memory system behavior) 160.34 213 P
-0.13 (. The memory system behavior is only reported for) 375.3 213 P
0.34 (the useful execution of each processor) 55 202 P
0.34 (. W) 193.9 202 P
0.34 (e use the de\336nition of true and false sharing based on inter) 206.52 202 P
0.34 (-processor word communication from) 420.26 202 P
1.35 (Dubois et al. [8]. The last graph shows the occupancy of the bus. The results were generated with a 1MB direct-mapped cache. The) 55 191 P
55 163.5 557.5 177 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55 163.5 557.5 177 R
7 X
0 0 0 1 0 0 0 K
V
55 172.5 523 172.5 2 L
V
1 H
2 Z
0 X
N
54 162.2 558 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(operating system is IRIX and uses a page coloring policy for page mapping.) 55 180 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 38 32 972 275 467 121.5 54.5 614.5 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/base-high.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( Overhead) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( Memory Stall) 0 960.231 225.9 TXL
72 72 S9
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( Execution) 0 960.231 212.9 TXL
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 143.995 M9
87.7091 143.995 M9
87.7091 72 M9
95.5636 72 M9
95.5636 144.698 M9
103.418 144.698 M9
103.418 72 M9
111.273 72 M9
111.273 148.389 M9
119.127 148.389 M9
119.127 72 M9
126.982 72 M9
126.982 164.657 M9
134.836 164.657 M9
134.836 72 M9
142.691 72 M9
142.691 249.849 M9
150.545 249.849 M9
150.545 72 M9
166.255 72 M9
166.255 143.989 M9
174.109 143.989 M9
174.109 72 M9
181.964 72 M9
181.964 145.737 M9
189.818 145.737 M9
189.818 72 M9
197.673 72 M9
197.673 149.317 M9
205.527 149.317 M9
205.527 72 M9
213.382 72 M9
213.382 163.522 M9
221.236 163.522 M9
221.236 72 M9
229.091 72 M9
229.091 243.203 M9
236.945 243.203 M9
236.945 72 M9
252.655 72 M9
252.655 143.988 M9
260.509 143.988 M9
260.509 72 M9
268.364 72 M9
268.364 145.381 M9
276.218 145.381 M9
276.218 72 M9
284.073 72 M9
284.073 150.897 M9
291.927 150.897 M9
291.927 72 M9
299.782 72 M9
299.782 166.917 M9
307.636 166.917 M9
307.636 72 M9
315.491 72 M9
315.491 209.279 M9
323.345 209.279 M9
323.345 72 M9
339.055 72 M9
339.055 143.995 M9
346.909 143.995 M9
346.909 72 M9
354.764 72 M9
354.764 144.948 M9
362.618 144.948 M9
362.618 72 M9
370.473 72 M9
370.473 149.395 M9
378.327 149.395 M9
378.327 72 M9
386.182 72 M9
386.182 163.447 M9
394.036 163.447 M9
394.036 72 M9
401.891 72 M9
401.891 205.622 M9
409.745 205.622 M9
409.745 72 M9
425.455 72 M9
425.455 143.991 M9
433.309 143.991 M9
433.309 72 M9
441.164 72 M9
441.164 144.457 M9
449.018 144.457 M9
449.018 72 M9
456.873 72 M9
456.873 144.782 M9
464.727 144.782 M9
464.727 72 M9
472.582 72 M9
472.582 148.138 M9
480.436 148.138 M9
480.436 72 M9
488.291 72 M9
488.291 166.569 M9
496.145 166.569 M9
496.145 72 M9
511.855 72 M9
511.855 143.953 M9
519.709 143.953 M9
519.709 72 M9
527.564 72 M9
527.564 145.359 M9
535.418 145.359 M9
535.418 72 M9
543.273 72 M9
543.273 154.67 M9
551.127 154.67 M9
551.127 72 M9
558.982 72 M9
558.982 168.376 M9
566.836 168.376 M9
566.836 72 M9
574.691 72 M9
574.691 205.717 M9
582.545 205.717 M9
582.545 72 M9
598.255 72 M9
598.255 143.912 M9
606.109 143.912 M9
606.109 72 M9
613.964 72 M9
613.964 144.005 M9
621.818 144.005 M9
621.818 72 M9
629.673 72 M9
629.673 146.728 M9
637.527 146.728 M9
637.527 72 M9
645.382 72 M9
645.382 150.962 M9
653.236 150.962 M9
653.236 72 M9
661.091 72 M9
661.091 162.917 M9
668.945 162.917 M9
668.945 72 M9
684.655 72 M9
684.655 143.815 M9
692.509 143.815 M9
692.509 72 M9
700.364 72 M9
700.364 210.142 M9
708.218 210.142 M9
708.218 72 M9
716.073 72 M9
716.073 252 M9
723.927 252 M9
723.927 72 M9
731.782 72 M9
731.782 252 M9
739.636 252 M9
739.636 72 M9
747.491 72 M9
747.491 252 M9
755.345 252 M9
755.345 72 M9
771.055 72 M9
771.055 143.996 M9
778.909 143.996 M9
778.909 72 M9
786.764 72 M9
786.764 215.928 M9
794.618 215.928 M9
794.618 72 M9
802.473 72 M9
802.473 252 M9
810.327 252 M9
810.327 72 M9
818.182 72 M9
818.182 252 M9
826.036 252 M9
826.036 72 M9
833.891 72 M9
833.891 252 M9
841.745 252 M9
841.745 72 M9
857.455 72 M9
857.455 143.785 M9
865.309 143.785 M9
865.309 72 M9
873.164 72 M9
873.164 186.173 M9
881.018 186.173 M9
881.018 72 M9
888.873 72 M9
888.873 252 M9
896.727 252 M9
896.727 72 M9
904.582 72 M9
904.582 252 M9
912.436 252 M9
912.436 72 M9
920.291 72 M9
920.291 252 M9
928.145 252 M9
928.145 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
928.145 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 143.474 M9
87.7091 143.474 M9
87.7091 72 M9
95.5636 72 M9
95.5636 144.032 M9
103.418 144.032 M9
103.418 72 M9
111.273 72 M9
111.273 146.232 M9
119.127 146.232 M9
119.127 72 M9
126.982 72 M9
126.982 159.523 M9
134.836 159.523 M9
134.836 72 M9
142.691 72 M9
142.691 235.586 M9
150.545 235.586 M9
150.545 72 M9
166.255 72 M9
166.255 143.331 M9
174.109 143.331 M9
174.109 72 M9
181.964 72 M9
181.964 143.741 M9
189.818 143.741 M9
189.818 72 M9
197.673 72 M9
197.673 145.293 M9
205.527 145.293 M9
205.527 72 M9
213.382 72 M9
213.382 156.179 M9
221.236 156.179 M9
221.236 72 M9
229.091 72 M9
229.091 226.35 M9
236.945 226.35 M9
236.945 72 M9
252.655 72 M9
252.655 142.708 M9
260.509 142.708 M9
260.509 72 M9
268.364 72 M9
268.364 139.937 M9
276.218 139.937 M9
276.218 72 M9
284.073 72 M9
284.073 138.158 M9
291.927 138.158 M9
291.927 72 M9
299.782 72 M9
299.782 139.506 M9
307.636 139.506 M9
307.636 72 M9
315.491 72 M9
315.491 147.191 M9
323.345 147.191 M9
323.345 72 M9
339.055 72 M9
339.055 143.116 M9
346.909 143.116 M9
346.909 72 M9
354.764 72 M9
354.764 142.016 M9
362.618 142.016 M9
362.618 72 M9
370.473 72 M9
370.473 142.08 M9
378.327 142.08 M9
378.327 72 M9
386.182 72 M9
386.182 147.999 M9
394.036 147.999 M9
394.036 72 M9
401.891 72 M9
401.891 172.414 M9
409.745 172.414 M9
409.745 72 M9
425.455 72 M9
425.455 143.125 M9
433.309 143.125 M9
433.309 72 M9
441.164 72 M9
441.164 141.969 M9
449.018 141.969 M9
449.018 72 M9
456.873 72 M9
456.873 138.004 M9
464.727 138.004 M9
464.727 72 M9
472.582 72 M9
472.582 134.103 M9
480.436 134.103 M9
480.436 72 M9
488.291 72 M9
488.291 136.202 M9
496.145 136.202 M9
496.145 72 M9
511.855 72 M9
511.855 141.883 M9
519.709 141.883 M9
519.709 72 M9
527.564 72 M9
527.564 140.899 M9
535.418 140.899 M9
535.418 72 M9
543.273 72 M9
543.273 140.919 M9
551.127 140.919 M9
551.127 72 M9
558.982 72 M9
558.982 143.201 M9
566.836 143.201 M9
566.836 72 M9
574.691 72 M9
574.691 149.865 M9
582.545 149.865 M9
582.545 72 M9
598.255 72 M9
598.255 142.051 M9
606.109 142.051 M9
606.109 72 M9
613.964 72 M9
613.964 142.052 M9
621.818 142.052 M9
621.818 72 M9
629.673 72 M9
629.673 143.926 M9
637.527 143.926 M9
637.527 72 M9
645.382 72 M9
645.382 146.544 M9
653.236 146.544 M9
653.236 72 M9
661.091 72 M9
661.091 154.368 M9
668.945 154.368 M9
668.945 72 M9
684.655 72 M9
684.655 140.467 M9
692.509 140.467 M9
692.509 72 M9
700.364 72 M9
700.364 143.264 M9
708.218 143.264 M9
708.218 72 M9
716.073 72 M9
716.073 145.359 M9
723.927 145.359 M9
723.927 72 M9
731.782 72 M9
731.782 152.261 M9
739.636 152.261 M9
739.636 72 M9
747.491 72 M9
747.491 167.63 M9
755.345 167.63 M9
755.345 72 M9
771.055 72 M9
771.055 143.208 M9
778.909 143.208 M9
778.909 72 M9
786.764 72 M9
786.764 143.21 M9
794.618 143.21 M9
794.618 72 M9
802.473 72 M9
802.473 143.205 M9
810.327 143.205 M9
810.327 72 M9
818.182 72 M9
818.182 143.198 M9
826.036 143.198 M9
826.036 72 M9
833.891 72 M9
833.891 143.213 M9
841.745 143.213 M9
841.745 72 M9
857.455 72 M9
857.455 138.465 M9
865.309 138.465 M9
865.309 72 M9
873.164 72 M9
873.164 145.943 M9
881.018 145.943 M9
881.018 72 M9
888.873 72 M9
888.873 150.762 M9
896.727 150.762 M9
896.727 72 M9
904.582 72 M9
904.582 159.037 M9
912.436 159.037 M9
912.436 72 M9
920.291 72 M9
920.291 183.354 M9
928.145 183.354 M9
928.145 72 M9
gsave
D9
grestore
928.145 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
79.8545 72 M9
79.8545 95.3832 M9
87.7091 95.3832 M9
87.7091 72 M9
95.5636 72 M9
95.5636 95.3963 M9
103.418 95.3963 M9
103.418 72 M9
111.273 72 M9
111.273 95.4189 M9
119.127 95.4189 M9
119.127 72 M9
126.982 72 M9
126.982 95.4691 M9
134.836 95.4691 M9
134.836 72 M9
142.691 72 M9
142.691 95.6001 M9
150.545 95.6001 M9
150.545 72 M9
166.255 72 M9
166.255 101.252 M9
174.109 101.252 M9
174.109 72 M9
181.964 72 M9
181.964 101.253 M9
189.818 101.253 M9
189.818 72 M9
197.673 72 M9
197.673 101.254 M9
205.527 101.254 M9
205.527 72 M9
213.382 72 M9
213.382 101.26 M9
221.236 101.26 M9
221.236 72 M9
229.091 72 M9
229.091 101.268 M9
236.945 101.268 M9
236.945 72 M9
252.655 72 M9
252.655 106.173 M9
260.509 106.173 M9
260.509 72 M9
268.364 72 M9
268.364 106.25 M9
276.218 106.25 M9
276.218 72 M9
284.073 72 M9
284.073 106.317 M9
291.927 106.317 M9
291.927 72 M9
299.782 72 M9
299.782 106.47 M9
307.636 106.47 M9
307.636 72 M9
315.491 72 M9
315.491 106.877 M9
323.345 106.877 M9
323.345 72 M9
339.055 72 M9
339.055 97.2819 M9
346.909 97.2819 M9
346.909 72 M9
354.764 72 M9
354.764 97.2865 M9
362.618 97.2865 M9
362.618 72 M9
370.473 72 M9
370.473 97.2949 M9
378.327 97.2949 M9
378.327 72 M9
386.182 72 M9
386.182 97.3082 M9
394.036 97.3082 M9
394.036 72 M9
401.891 72 M9
401.891 97.3382 M9
409.745 97.3382 M9
409.745 72 M9
425.455 72 M9
425.455 115.491 M9
433.309 115.491 M9
433.309 72 M9
441.164 72 M9
441.164 115.499 M9
449.018 115.499 M9
449.018 72 M9
456.873 72 M9
456.873 115.512 M9
464.727 115.512 M9
464.727 72 M9
472.582 72 M9
472.582 115.538 M9
480.436 115.538 M9
480.436 72 M9
488.291 72 M9
488.291 115.593 M9
496.145 115.593 M9
496.145 72 M9
511.855 72 M9
511.855 108.669 M9
519.709 108.669 M9
519.709 72 M9
527.564 72 M9
527.564 108.718 M9
535.418 108.718 M9
535.418 72 M9
543.273 72 M9
543.273 108.824 M9
551.127 108.824 M9
551.127 72 M9
558.982 72 M9
558.982 109.001 M9
566.836 109.001 M9
566.836 72 M9
574.691 72 M9
574.691 109.17 M9
582.545 109.17 M9
582.545 72 M9
598.255 72 M9
598.255 125.719 M9
606.109 125.719 M9
606.109 72 M9
613.964 72 M9
613.964 125.726 M9
621.818 125.726 M9
621.818 72 M9
629.673 72 M9
629.673 125.723 M9
637.527 125.723 M9
637.527 72 M9
645.382 72 M9
645.382 125.723 M9
653.236 125.723 M9
653.236 72 M9
661.091 72 M9
661.091 125.721 M9
668.945 125.721 M9
668.945 72 M9
684.655 72 M9
684.655 105.652 M9
692.509 105.652 M9
692.509 72 M9
700.364 72 M9
700.364 106.466 M9
708.218 106.466 M9
708.218 72 M9
716.073 72 M9
716.073 106.632 M9
723.927 106.632 M9
723.927 72 M9
731.782 72 M9
731.782 107.073 M9
739.636 107.073 M9
739.636 72 M9
747.491 72 M9
747.491 108.667 M9
755.345 108.667 M9
755.345 72 M9
771.055 72 M9
771.055 103.664 M9
778.909 103.664 M9
778.909 72 M9
786.764 72 M9
786.764 103.664 M9
794.618 103.664 M9
794.618 72 M9
802.473 72 M9
802.473 103.664 M9
810.327 103.664 M9
810.327 72 M9
818.182 72 M9
818.182 103.662 M9
826.036 103.662 M9
826.036 72 M9
833.891 72 M9
833.891 103.669 M9
841.745 103.669 M9
841.745 72 M9
857.455 72 M9
857.455 105.613 M9
865.309 105.613 M9
865.309 72 M9
873.164 72 M9
873.164 106.111 M9
881.018 106.111 M9
881.018 72 M9
888.873 72 M9
888.873 106.521 M9
896.727 106.521 M9
896.727 72 M9
904.582 72 M9
904.582 107.321 M9
912.436 107.321 M9
912.436 72 M9
920.291 72 M9
920.291 108.933 M9
928.145 108.933 M9
928.145 72 M9
gsave
D9
grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
928.145 72 M9
72 72 M9
E9
grestore
714.109 198.453 S9
714.109 207.453 M9
725.891 234.453 M9
725.891 225.453 M9
714.109 198.453 M9
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
E9
grestore
729.818 200.754 S9
729.818 209.754 M9
741.6 236.754 M9
741.6 227.754 M9
729.818 200.754 M9
gsave 30.000000 45.000000 {cross} SS9 1.000000 G9
E9
grestore
745.527 205.877 S9
745.527 214.877 M9
757.309 241.877 M9
757.309 232.877 M9
745.527 205.877 M9
gsave 30.000000 90.000000 {cross} SS9 1.000000 G9
E9
grestore
800.509 197.735 S9
800.509 206.735 M9
812.291 233.735 M9
812.291 224.735 M9
800.509 197.735 M9
gsave 30.000000 135.000000 {cross} SS9 1.000000 G9
E9
grestore
816.218 197.733 S9
816.218 206.733 M9
828 233.733 M9
828 224.733 M9
816.218 197.733 M9
gsave 30.000000 180.000000 {cross} SS9 1.000000 G9
E9
grestore
831.927 197.738 S9
831.927 206.738 M9
843.709 233.738 M9
843.709 224.738 M9
831.927 197.738 M9
gsave 45.000000 45.000000 {pop} SS9 1.000000 G9
E9
grestore
886.909 200.254 S9
886.909 209.254 M9
898.691 236.254 M9
898.691 227.254 M9
886.909 200.254 M9
gsave 45.000000 90.000000 {pop} SS9 1.000000 G9
E9
grestore
902.618 203.012 S9
902.618 212.012 M9
914.4 239.012 M9
914.4 230.012 M9
902.618 203.012 M9
gsave 45.000000 135.000000 {pop} SS9 1.000000 G9
E9
grestore
918.327 211.118 S9
918.327 220.118 M9
930.109 247.118 M9
930.109 238.118 M9
918.327 211.118 M9
gsave 45.000000 180.000000 {pop} SS9 1.000000 G9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 144 TXC
9 /Helvetica-Bold SetTxt
(100) 0 68 141.3 TXR
4 /Helvetica SetTxt
(|) -90 72 216 TXC
9 /Helvetica-Bold SetTxt
(200) 0 68 213.3 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 144 TXC
(|) 90 936 216 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Combined execution time (normalized)) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 83.7818 63 TXC
(2) 0 99.4909 63 TXC
(4) 0 115.2 63 TXC
(8) 0 130.909 63 TXC
(16) 0 146.618 63 TXC
9 /Helvetica-Bold SetTxt
(tomcatv) 0 115.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 170.182 63 TXC
(2) 0 185.891 63 TXC
(4) 0 201.6 63 TXC
(8) 0 217.309 63 TXC
(16) 0 233.018 63 TXC
9 /Helvetica-Bold SetTxt
(swim) 0 201.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 256.582 63 TXC
(2) 0 272.291 63 TXC
(4) 0 288 63 TXC
(8) 0 303.709 63 TXC
(16) 0 319.418 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 288 48.6 TXC
8 /Helvetica SetTxt
(1) 0 342.982 63 TXC
(2) 0 358.691 63 TXC
(4) 0 374.4 63 TXC
(8) 0 390.109 63 TXC
(16) 0 405.818 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 374.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 429.382 63 TXC
(2) 0 445.091 63 TXC
(4) 0 460.8 63 TXC
(8) 0 476.509 63 TXC
(16) 0 492.218 63 TXC
9 /Helvetica-Bold SetTxt
(mgrid) 0 460.8 48.6 TXC
8 /Helvetica SetTxt
(1) 0 515.782 63 TXC
(2) 0 531.491 63 TXC
(4) 0 547.2 63 TXC
(8) 0 562.909 63 TXC
(16) 0 578.618 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 547.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 602.182 63 TXC
(2) 0 617.891 63 TXC
(4) 0 633.6 63 TXC
(8) 0 649.309 63 TXC
(16) 0 665.018 63 TXC
9 /Helvetica-Bold SetTxt
(turb3d) 0 633.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 688.582 63 TXC
(2) 0 704.291 63 TXC
(4) 0 720 63 TXC
10 /Helvetica SetTxt
(370) 90 723.927 253.8 TXL
8 /Helvetica SetTxt
(8) 0 735.709 63 TXC
10 /Helvetica SetTxt
(734) 90 739.636 253.8 TXL
8 /Helvetica SetTxt
(16) 0 751.418 63 TXC
10 /Helvetica SetTxt
(1467) 90 755.345 253.8 TXL
9 /Helvetica-Bold SetTxt
(apsi) 0 720 48.6 TXC
8 /Helvetica SetTxt
(1) 0 774.982 63 TXC
(2) 0 790.691 63 TXC
(4) 0 806.4 63 TXC
10 /Helvetica SetTxt
(400) 90 810.327 253.8 TXL
8 /Helvetica SetTxt
(8) 0 822.109 63 TXC
10 /Helvetica SetTxt
(800) 90 826.036 253.8 TXL
8 /Helvetica SetTxt
(16) 0 837.818 63 TXC
10 /Helvetica SetTxt
(1600) 90 841.745 253.8 TXL
9 /Helvetica-Bold SetTxt
(fpppp) 0 806.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 861.382 63 TXC
(2) 0 877.091 63 TXC
(4) 0 892.8 63 TXC
10 /Helvetica SetTxt
(260) 90 896.727 253.8 TXL
8 /Helvetica SetTxt
(8) 0 908.509 63 TXC
10 /Helvetica SetTxt
(468) 90 912.436 253.8 TXL
8 /Helvetica SetTxt
(16) 0 924.218 63 TXC
10 /Helvetica SetTxt
(916) 90 928.145 253.8 TXL
9 /Helvetica-Bold SetTxt
(wave5) 0 892.8 48.6 TXC
10 /Helvetica-Bold SetTxt
(Combined Execution Time) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 83.7818 54.6 TXC
() 0 99.4909 54.6 TXC
() 0 115.2 54.6 TXC
() 0 130.909 54.6 TXC
() 0 146.618 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 115.2 39.15 TXC
8 /Helvetica SetTxt
() 0 170.182 54.6 TXC
() 0 185.891 54.6 TXC
() 0 201.6 54.6 TXC
() 0 217.309 54.6 TXC
() 0 233.018 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 201.6 39.15 TXC
8 /Helvetica SetTxt
() 0 256.582 54.6 TXC
() 0 272.291 54.6 TXC
() 0 288 54.6 TXC
() 0 303.709 54.6 TXC
() 0 319.418 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 288 39.15 TXC
8 /Helvetica SetTxt
() 0 342.982 54.6 TXC
() 0 358.691 54.6 TXC
() 0 374.4 54.6 TXC
() 0 390.109 54.6 TXC
() 0 405.818 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 374.4 39.15 TXC
8 /Helvetica SetTxt
() 0 429.382 54.6 TXC
() 0 445.091 54.6 TXC
() 0 460.8 54.6 TXC
() 0 476.509 54.6 TXC
() 0 492.218 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 460.8 39.15 TXC
8 /Helvetica SetTxt
() 0 515.782 54.6 TXC
() 0 531.491 54.6 TXC
() 0 547.2 54.6 TXC
() 0 562.909 54.6 TXC
() 0 578.618 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 547.2 39.15 TXC
8 /Helvetica SetTxt
() 0 602.182 54.6 TXC
() 0 617.891 54.6 TXC
() 0 633.6 54.6 TXC
() 0 649.309 54.6 TXC
() 0 665.018 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 633.6 39.15 TXC
8 /Helvetica SetTxt
() 0 688.582 54.6 TXC
() 0 704.291 54.6 TXC
() 0 720 54.6 TXC
10 /Helvetica SetTxt
() 90 723.927 243.3 TXL
8 /Helvetica SetTxt
() 0 735.709 54.6 TXC
10 /Helvetica SetTxt
() 90 739.636 243.3 TXL
8 /Helvetica SetTxt
() 0 751.418 54.6 TXC
10 /Helvetica SetTxt
() 90 755.345 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 720 39.15 TXC
8 /Helvetica SetTxt
() 0 774.982 54.6 TXC
() 0 790.691 54.6 TXC
() 0 806.4 54.6 TXC
10 /Helvetica SetTxt
() 90 810.327 243.3 TXL
8 /Helvetica SetTxt
() 0 822.109 54.6 TXC
10 /Helvetica SetTxt
() 90 826.036 243.3 TXL
8 /Helvetica SetTxt
() 0 837.818 54.6 TXC
10 /Helvetica SetTxt
() 90 841.745 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 806.4 39.15 TXC
8 /Helvetica SetTxt
() 0 861.382 54.6 TXC
() 0 877.091 54.6 TXC
() 0 892.8 54.6 TXC
10 /Helvetica SetTxt
() 90 896.727 243.3 TXL
8 /Helvetica SetTxt
() 0 908.509 54.6 TXC
10 /Helvetica SetTxt
() 90 912.436 243.3 TXL
8 /Helvetica SetTxt
() 0 924.218 54.6 TXC
10 /Helvetica SetTxt
() 90 928.145 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 892.8 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.37 (If a processor accesses a single contiguous region of memory that) 317.88 155.96 P
1.51 (is smaller than the cache, the page coloring policy used by the) 317.88 145.96 P
1.67 (operating system successfully eliminates all con\337icts. However) 317.88 135.96 P
1.67 (,) 555.75 135.96 P
0.04 (we see in Figure) 317.88 125.96 P
0.04 (3 that the access patterns of individual processors) 379.49 125.96 P
0.25 (are rather sparse. Even though each processor accesses less than 1) 317.88 115.96 P
-0.14 (MB of data, it does so in a range that is signi\336cantly lar) 317.88 105.96 P
-0.14 (ger than the) 515.79 105.96 P
1.58 (cache size. The unfortunate consequence is that portions of the) 317.88 95.96 P
2.23 (external cache will be under) 317.88 85.96 P
2.23 (-utilized while other portions will) 428.08 85.96 P
(suf) 317.88 75.96 T
(fer many cache con\337icts.) 328.72 75.96 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(5  Compiler) 54 522.78 T
(-Dir) 114.22 522.78 T
(ected Page Coloring) 135.32 522.78 T
2 9 Q
0.7 (Compiler) 54 503.78 P
0.7 (-dir) 87.82 503.78 P
0.7 (ected page coloring \050CDPC\051) 100.99 503.78 P
1 F
0.7 ( reduces cache con\337icts) 206.81 503.78 P
3.1 (by using information available in the compiler to direct the) 54 493.78 P
3.53 (operating system\325) 54 483.78 P
3.53 (s page mapping policy) 121.28 483.78 P
3.53 (. CDPC extends the) 212.53 483.78 P
0.05 (default mapping policy to allow applications to request a preferred) 54 473.78 P
0.74 (mapping for a particular region in the virtual address space. This) 54 463.78 P
0.46 (extension is compatible with both page coloring and bin hopping.) 54 453.78 P
0.62 (W) 54 443.78 P
0.62 (e implemented compiler) 61.78 443.78 P
0.62 (-directed page coloring with both IRIX) 150.32 443.78 P
0.74 (5.3 \050which has a page coloring policy\051 and Digital UNIX \050which) 54 433.78 P
(has a a bin hopping policy\051.) 54 423.78 T
(Compiler) 54 408.78 T
(-directed page coloring consists of three stages:) 87.82 408.78 T
(1.) 54 393.78 T
0.77 (The compiler creates a summary of the array access patterns.) 67.75 393.78 P
-0.2 (The compiler generates function calls that pass the array access) 67.75 383.78 P
1.15 (patterns to a run-time library) 67.75 373.78 P
1.15 (, along with information known) 175.26 373.78 P
-0.21 (only at program start-up time \050e.g. the exact dimensions of data) 67.75 363.78 P
(structures\051.) 67.75 353.78 T
(2.) 54 338.78 T
-0.05 (The run-time system uses machine-speci\336c parameters \050i.e. the) 67.75 338.78 P
1.58 (number of processors, the cache con\336guration and the page) 67.75 328.78 P
1.85 (size\051 along with the array access information to generate a) 67.75 318.78 P
0.17 (preferred color for each virtual page. These hints are passed to) 67.75 308.78 P
(the operating system through a single system call.) 67.75 298.78 T
(3.) 54 283.78 T
0.24 (The operating system uses the hints and tries to honor them as) 67.75 283.78 P
0.03 (much as possible. For example, it may not be able to honor the) 67.75 273.78 P
(hints if the machine is under memory pressure.) 67.75 263.78 T
0 11 Q
(5.1  Cr) 54 246.45 T
(eating Access Pattern Summaries) 85.88 246.45 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
4.07 (T) 54 229.78 P
4.07 (o create the access pattern summaries, the compiler uses) 58.87 229.78 P
1.89 (information that is directly derived from its parallelization and) 54 219.78 P
1.13 (locality analysis. It also takes advantage of several properties of) 54 209.78 P
0.51 (compiler) 54 199.78 P
0.51 (-parallelized codes. First the compiler uses optimizations) 85.82 199.78 P
-0.19 (to assign the computation and restructure the arrays so that the data) 54 189.78 P
0.38 (within each individual data structure accessed by one processor is) 54 179.78 P
0.16 (contiguous in the virtual address space when possible [2]. Second,) 54 169.78 P
0.18 (to optimize for locality and minimize parallelization overhead, the) 54 159.78 P
1.2 (compiler statically schedules the parallel computation across the) 54 149.78 P
3.67 (processors. The access patterns of individual processors are) 54 139.78 P
(therefore predictable.) 54 129.78 T
4.02 (The compiler extracts three kinds of information from the) 54 114.78 P
(program:) 54 104.78 T
0 F
0.95 (Array Partitioning.) 54 89.78 P
1 F
0.95 ( The partitioning information consists of the) 129.44 89.78 P
1.77 (starting address of the array) 54 79.78 P
1.77 (, its total size, the size of the data) 160.47 79.78 P
54 539.78 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 46 41 216 150 170 109 368 629 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/hydro-virt.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 46 41 216 150
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
87.3496 80 S9
[] 1.200000 SL
87.708 80 M9
D9
88.1858 80 S9
88.3053 80 M9
D9
92.725 80 S9
93.4417 80 M9
D9
95.0543 80 S9
95.2335 80 M9
D9
95.7113 80 S9
95.8308 80 M9
D9
100.191 80 S9
100.967 80 M9
D9
102.58 80 S9
102.759 80 M9
D9
103.177 80 S9
103.297 80 M9
D9
107.716 80 S9
108.493 80 M9
D9
110.105 80 S9
110.225 80 M9
D9
110.703 80 S9
110.822 80 M9
D9
115.182 80 S9
115.959 80 M9
D9
117.571 80 S9
117.75 80 M9
D9
118.228 80 S9
118.348 80 M9
D9
122.708 80 S9
123.484 80 M9
D9
125.097 80 S9
125.276 80 M9
D9
125.694 80 S9
125.813 80 M9
D9
130.233 80 S9
131.01 80 M9
D9
132.622 80 S9
132.742 80 M9
D9
133.219 80 S9
133.339 80 M9
D9
137.699 80 S9
138.475 80 M9
D9
140.088 80 S9
140.267 80 M9
D9
140.745 80 S9
140.805 80 M9
D9
145.224 80 S9
146.001 80 M9
D9
147.613 80 S9
147.673 80 M9
D9
152.989 80 S9
153.586 80 M9
D9
155.438 80 S9
155.497 80 M9
D9
160.455 80 S9
161.112 80 M9
D9
162.844 80 S9
163.023 80 M9
D9
167.92 80 S9
168.637 80 M9
D9
170.309 80 S9
170.548 80 M9
D9
175.565 80 S9
176.222 80 M9
D9
177.954 80 S9
178.014 80 M9
D9
183.33 80 S9
183.867 80 M9
D9
185.719 80 S9
185.779 80 M9
D9
190.796 80 S9
191.333 80 M9
D9
193.185 80 S9
193.304 80 M9
D9
194.558 80 S9
195.096 80 M9
D9
198.261 80 S9
198.918 80 M9
D9
200.65 80 S9
200.889 80 M9
D9
205.727 80 S9
206.444 80 M9
D9
208.116 80 S9
208.415 80 M9
D9
213.253 80 S9
213.969 80 M9
D9
215.642 80 S9
215.881 80 M9
D9
87.3496 84 S9
87.708 84 M9
D9
88.1261 84 S9
88.1858 84 M9
D9
92.2472 84 S9
93.0236 84 M9
D9
95.0543 84 S9
95.2335 84 M9
D9
95.6516 84 S9
95.7113 84 M9
D9
99.713 84 S9
100.549 84 M9
D9
102.58 84 S9
102.759 84 M9
D9
103.177 84 S9
103.237 84 M9
D9
107.238 84 S9
108.075 84 M9
D9
110.105 84 S9
110.225 84 M9
D9
110.643 84 S9
110.703 84 M9
D9
114.764 84 S9
115.54 84 M9
D9
117.571 84 S9
117.75 84 M9
D9
118.168 84 S9
118.228 84 M9
D9
122.23 84 S9
123.066 84 M9
D9
125.097 84 S9
125.216 84 M9
D9
125.694 84 S9
125.754 84 M9
D9
129.755 84 S9
130.532 84 M9
D9
132.562 84 S9
132.742 84 M9
D9
133.16 84 S9
133.219 84 M9
D9
137.281 84 S9
138.057 84 M9
D9
140.088 84 S9
140.267 84 M9
D9
140.685 84 S9
140.745 84 M9
D9
144.747 84 S9
145.583 84 M9
D9
147.613 84 S9
147.673 84 M9
D9
152.511 84 S9
153.108 84 M9
D9
155.438 84 S9
155.497 84 M9
D9
159.977 84 S9
160.693 84 M9
D9
162.844 84 S9
163.023 84 M9
D9
167.502 84 S9
168.159 84 M9
D9
170.309 84 S9
170.548 84 M9
D9
175.088 84 S9
175.745 84 M9
D9
177.954 84 S9
178.014 84 M9
D9
182.852 84 S9
183.389 84 M9
D9
185.659 84 S9
185.779 84 M9
D9
190.318 84 S9
190.915 84 M9
D9
193.185 84 S9
193.304 84 M9
D9
194.08 84 S9
194.618 84 M9
D9
197.783 84 S9
198.44 84 M9
D9
200.65 84 S9
200.889 84 M9
D9
205.309 84 S9
205.966 84 M9
D9
208.116 84 S9
208.415 84 M9
D9
212.835 84 S9
213.551 84 M9
D9
215.642 84 S9
215.881 84 M9
D9
87.3496 88 S9
87.708 88 M9
D9
88.1261 88 S9
88.1858 88 M9
D9
91.7694 88 S9
92.6056 88 M9
D9
95.0543 88 S9
95.2335 88 M9
D9
95.5919 88 S9
95.6516 88 M9
D9
99.2949 88 S9
100.131 88 M9
D9
102.58 88 S9
102.759 88 M9
D9
103.117 88 S9
103.177 88 M9
D9
106.761 88 S9
107.657 88 M9
D9
110.105 88 S9
110.225 88 M9
D9
110.643 88 S9
110.703 88 M9
D9
114.286 88 S9
115.122 88 M9
D9
117.571 88 S9
117.75 88 M9
D9
118.109 88 S9
118.168 88 M9
D9
121.752 88 S9
122.648 88 M9
D9
125.097 88 S9
125.216 88 M9
D9
125.634 88 S9
125.694 88 M9
D9
129.277 88 S9
130.114 88 M9
D9
132.562 88 S9
132.742 88 M9
D9
133.1 88 S9
133.16 88 M9
D9
136.803 88 S9
137.639 88 M9
D9
140.088 88 S9
140.267 88 M9
D9
140.625 88 S9
140.685 88 M9
D9
144.269 88 S9
145.165 88 M9
D9
147.613 88 S9
147.673 88 M9
D9
152.033 88 S9
152.63 88 M9
D9
155.438 88 S9
155.497 88 M9
D9
159.499 88 S9
160.216 88 M9
D9
162.844 88 S9
163.023 88 M9
D9
167.024 88 S9
167.681 88 M9
D9
170.309 88 S9
170.548 88 M9
D9
174.61 88 S9
175.267 88 M9
D9
177.954 88 S9
178.014 88 M9
D9
182.374 88 S9
182.912 88 M9
D9
185.659 88 S9
185.719 88 M9
D9
189.9 88 S9
190.437 88 M9
D9
193.185 88 S9
193.304 88 M9
D9
193.603 88 S9
194.14 88 M9
D9
197.306 88 S9
197.963 88 M9
D9
200.65 88 S9
200.889 88 M9
D9
204.831 88 S9
205.488 88 M9
D9
208.116 88 S9
208.415 88 M9
D9
212.357 88 S9
213.073 88 M9
D9
215.642 88 S9
215.881 88 M9
D9
87.3496 92 S9
87.708 92 M9
D9
88.0664 92 S9
88.1261 92 M9
D9
91.2916 92 S9
92.1875 92 M9
D9
95.0543 92 S9
95.2335 92 M9
D9
95.5919 92 S9
95.6516 92 M9
D9
98.8171 92 S9
99.713 92 M9
D9
102.58 92 S9
102.759 92 M9
D9
103.058 92 S9
103.117 92 M9
D9
106.283 92 S9
107.179 92 M9
D9
110.105 92 S9
110.225 92 M9
D9
110.583 92 S9
110.643 92 M9
D9
113.808 92 S9
114.704 92 M9
D9
117.571 92 S9
117.75 92 M9
D9
118.049 92 S9
118.109 92 M9
D9
121.334 92 S9
122.23 92 M9
D9
125.097 92 S9
125.216 92 M9
D9
125.574 92 S9
125.634 92 M9
D9
128.8 92 S9
129.696 92 M9
D9
132.562 92 S9
132.742 92 M9
D9
133.1 92 S9
133.16 92 M9
D9
136.325 92 S9
137.221 92 M9
D9
140.088 92 S9
140.267 92 M9
D9
140.566 92 S9
140.625 92 M9
D9
143.791 92 S9
144.747 92 M9
D9
147.613 92 S9
147.673 92 M9
D9
151.615 92 S9
152.153 92 M9
D9
155.378 92 S9
155.497 92 M9
D9
159.081 92 S9
159.738 92 M9
D9
162.844 92 S9
163.023 92 M9
D9
166.606 92 S9
167.263 92 M9
D9
170.309 92 S9
170.548 92 M9
D9
174.132 92 S9
174.849 92 M9
D9
177.954 92 S9
178.014 92 M9
D9
181.896 92 S9
182.434 92 M9
D9
185.659 92 S9
185.719 92 M9
D9
189.422 92 S9
189.959 92 M9
D9
193.185 92 S9
193.662 92 M9
D9
196.888 92 S9
197.485 92 M9
D9
200.65 92 S9
200.889 92 M9
D9
204.413 92 S9
205.01 92 M9
D9
208.116 92 S9
208.415 92 M9
D9
211.939 92 S9
212.596 92 M9
D9
215.642 92 S9
215.881 92 M9
D9
87.3496 96 S9
87.708 96 M9
D9
87.9469 96 S9
88.0664 96 M9
D9
90.8138 96 S9
91.8291 96 M9
D9
95.0543 96 S9
95.2335 96 M9
D9
95.4724 96 S9
95.5919 96 M9
D9
98.3393 96 S9
99.3546 96 M9
D9
102.58 96 S9
102.699 96 M9
D9
102.998 96 S9
103.058 96 M9
D9
105.805 96 S9
106.82 96 M9
D9
110.046 96 S9
110.225 96 M9
D9
110.464 96 S9
110.583 96 M9
D9
113.331 96 S9
114.346 96 M9
D9
117.571 96 S9
117.75 96 M9
D9
117.989 96 S9
118.109 96 M9
D9
120.856 96 S9
121.812 96 M9
D9
125.097 96 S9
125.216 96 M9
D9
125.455 96 S9
125.574 96 M9
D9
128.322 96 S9
129.337 96 M9
D9
132.562 96 S9
132.742 96 M9
D9
132.981 96 S9
133.1 96 M9
D9
135.847 96 S9
136.863 96 M9
D9
140.088 96 S9
140.267 96 M9
D9
140.506 96 S9
140.566 96 M9
D9
143.373 96 S9
144.328 96 M9
D9
147.613 96 S9
147.673 96 M9
D9
151.137 96 S9
151.675 96 M9
D9
155.378 96 S9
155.497 96 M9
D9
158.603 96 S9
159.26 96 M9
D9
162.784 96 S9
163.023 96 M9
D9
166.129 96 S9
166.786 96 M9
D9
170.309 96 S9
170.548 96 M9
D9
173.654 96 S9
174.371 96 M9
D9
177.954 96 S9
178.014 96 M9
D9
181.418 96 S9
181.956 96 M9
D9
185.659 96 S9
185.719 96 M9
D9
188.944 96 S9
189.482 96 M9
D9
192.707 96 S9
193.304 96 M9
D9
196.47 96 S9
197.067 96 M9
D9
200.65 96 S9
200.83 96 M9
D9
203.935 96 S9
204.592 96 M9
D9
208.116 96 S9
208.415 96 M9
D9
211.461 96 S9
212.118 96 M9
D9
215.642 96 S9
215.881 96 M9
D9
87.3496 100 S9
87.708 100 M9
D9
87.9469 100 S9
88.0066 100 M9
D9
90.336 100 S9
90.9332 100 M9
D9
90.9929 100 S9
91.411 100 M9
D9
95.0543 100 S9
95.2335 100 M9
D9
95.4127 100 S9
95.4724 100 M9
D9
97.8615 100 S9
98.8768 100 M9
D9
102.58 100 S9
102.699 100 M9
D9
102.938 100 S9
102.998 100 M9
D9
105.387 100 S9
105.925 100 M9
D9
105.984 100 S9
106.402 100 M9
D9
110.046 100 S9
110.225 100 M9
D9
110.404 100 S9
110.464 100 M9
D9
112.853 100 S9
113.928 100 M9
D9
117.571 100 S9
117.75 100 M9
D9
117.929 100 S9
117.989 100 M9
D9
120.378 100 S9
121.394 100 M9
D9
125.097 100 S9
125.216 100 M9
D9
125.455 100 S9
125.515 100 M9
D9
127.844 100 S9
128.919 100 M9
D9
132.562 100 S9
132.742 100 M9
D9
132.921 100 S9
132.981 100 M9
D9
135.37 100 S9
136.445 100 M9
D9
140.088 100 S9
140.267 100 M9
D9
140.446 100 S9
140.506 100 M9
D9
142.895 100 S9
143.91 100 M9
D9
147.613 100 S9
147.673 100 M9
D9
150.659 100 S9
151.257 100 M9
D9
155.378 100 S9
155.497 100 M9
D9
158.125 100 S9
158.782 100 M9
D9
162.784 100 S9
163.023 100 M9
D9
165.651 100 S9
166.308 100 M9
D9
170.309 100 S9
170.548 100 M9
D9
173.176 100 S9
173.893 100 M9
D9
177.954 100 S9
178.014 100 M9
D9
180.941 100 S9
181.478 100 M9
D9
185.659 100 S9
185.719 100 M9
D9
188.466 100 S9
189.004 100 M9
D9
192.229 100 S9
192.766 100 M9
D9
193.185 100 S9
193.304 100 M9
D9
195.992 100 S9
196.589 100 M9
D9
200.65 100 S9
200.83 100 M9
D9
203.457 100 S9
204.114 100 M9
D9
208.116 100 S9
208.415 100 M9
D9
210.983 100 S9
211.64 100 M9
D9
215.642 100 S9
215.881 100 M9
D9
87.3496 104 S9
87.708 104 M9
D9
87.8872 104 S9
87.9469 104 M9
D9
89.9179 104 S9
90.4554 104 M9
D9
90.5151 104 S9
90.9929 104 M9
D9
95.0543 104 S9
95.2335 104 M9
D9
95.353 104 S9
95.4127 104 M9
D9
97.3837 104 S9
97.9809 104 M9
D9
98.0406 104 S9
98.4587 104 M9
D9
102.58 104 S9
102.699 104 M9
D9
102.878 104 S9
102.938 104 M9
D9
104.909 104 S9
105.447 104 M9
D9
105.566 104 S9
105.984 104 M9
D9
110.046 104 S9
110.225 104 M9
D9
110.404 104 S9
110.464 104 M9
D9
112.375 104 S9
112.972 104 M9
D9
113.032 104 S9
113.51 104 M9
D9
117.571 104 S9
117.75 104 M9
D9
117.87 104 S9
117.929 104 M9
D9
119.9 104 S9
120.498 104 M9
D9
120.557 104 S9
120.976 104 M9
D9
125.097 104 S9
125.216 104 M9
D9
125.395 104 S9
125.455 104 M9
D9
127.426 104 S9
128.023 104 M9
D9
128.083 104 S9
128.501 104 M9
D9
132.562 104 S9
132.742 104 M9
D9
132.861 104 S9
132.921 104 M9
D9
134.892 104 S9
136.027 104 M9
D9
140.088 104 S9
140.207 104 M9
D9
140.387 104 S9
140.446 104 M9
D9
142.417 104 S9
143.492 104 M9
D9
147.554 104 S9
147.673 104 M9
D9
150.182 104 S9
150.779 104 M9
D9
155.378 104 S9
155.497 104 M9
D9
157.707 104 S9
158.304 104 M9
D9
162.784 104 S9
163.023 104 M9
D9
165.173 104 S9
165.83 104 M9
D9
170.309 104 S9
170.548 104 M9
D9
172.758 104 S9
173.415 104 M9
D9
177.895 104 S9
178.014 104 M9
D9
180.523 104 S9
181 104 M9
D9
185.659 104 S9
185.719 104 M9
D9
187.988 104 S9
188.526 104 M9
D9
191.751 104 S9
192.289 104 M9
D9
193.185 104 S9
193.304 104 M9
D9
195.514 104 S9
196.111 104 M9
D9
200.65 104 S9
200.83 104 M9
D9
202.98 104 S9
203.637 104 M9
D9
208.116 104 S9
208.355 104 M9
D9
210.505 104 S9
211.162 104 M9
D9
215.642 104 S9
215.881 104 M9
D9
87.3496 108 S9
87.708 108 M9
D9
87.8275 108 S9
87.8872 108 M9
D9
89.4401 108 S9
89.9776 108 M9
D9
90.1568 108 S9
90.5749 108 M9
D9
95.0543 108 S9
95.2335 108 M9
D9
95.353 108 S9
95.4127 108 M9
D9
96.9058 108 S9
97.5031 108 M9
D9
97.6823 108 S9
98.0406 108 M9
D9
102.58 108 S9
102.699 108 M9
D9
102.819 108 S9
102.878 108 M9
D9
104.431 108 S9
105.029 108 M9
D9
105.148 108 S9
105.566 108 M9
D9
110.046 108 S9
110.225 108 M9
D9
110.344 108 S9
110.404 108 M9
D9
111.957 108 S9
112.494 108 M9
D9
112.674 108 S9
113.092 108 M9
D9
117.571 108 S9
117.75 108 M9
D9
117.81 108 S9
117.87 108 M9
D9
119.423 108 S9
120.02 108 M9
D9
120.199 108 S9
120.557 108 M9
D9
125.097 108 S9
125.216 108 M9
D9
125.336 108 S9
125.395 108 M9
D9
126.948 108 S9
127.545 108 M9
D9
127.665 108 S9
128.083 108 M9
D9
132.562 108 S9
132.742 108 M9
D9
132.861 108 S9
132.921 108 M9
D9
134.414 108 S9
135.071 108 M9
D9
135.19 108 S9
135.549 108 M9
D9
140.088 108 S9
140.207 108 M9
D9
140.327 108 S9
140.387 108 M9
D9
141.939 108 S9
142.596 108 M9
D9
142.716 108 S9
143.074 108 M9
D9
147.554 108 S9
147.613 108 M9
D9
149.704 108 S9
150.301 108 M9
D9
155.378 108 S9
155.497 108 M9
D9
157.229 108 S9
157.827 108 M9
D9
162.784 108 S9
163.023 108 M9
D9
164.695 108 S9
165.352 108 M9
D9
170.309 108 S9
170.548 108 M9
D9
172.28 108 S9
172.937 108 M9
D9
177.895 108 S9
177.954 108 M9
D9
180.045 108 S9
180.582 108 M9
D9
185.659 108 S9
185.719 108 M9
D9
187.511 108 S9
188.048 108 M9
D9
191.273 108 S9
191.811 108 M9
D9
193.185 108 S9
193.304 108 M9
D9
195.036 108 S9
195.633 108 M9
D9
200.65 108 S9
200.83 108 M9
D9
202.562 108 S9
203.159 108 M9
D9
208.116 108 S9
208.355 108 M9
D9
210.027 108 S9
210.684 108 M9
D9
215.642 108 S9
215.881 108 M9
D9
87.3496 112 S9
87.8275 112 M9
D9
88.9623 112 S9
89.4998 112 M9
D9
89.7387 112 S9
90.1568 112 M9
D9
95.0543 112 S9
95.353 112 M9
D9
96.428 112 S9
97.0253 112 M9
D9
97.2642 112 S9
97.6823 112 M9
D9
102.58 112 S9
102.699 112 M9
D9
102.759 112 S9
102.819 112 M9
D9
103.954 112 S9
104.551 112 M9
D9
104.73 112 S9
105.208 112 M9
D9
110.046 112 S9
110.344 112 M9
D9
111.479 112 S9
112.017 112 M9
D9
112.255 112 S9
112.674 112 M9
D9
117.571 112 S9
117.87 112 M9
D9
118.945 112 S9
119.542 112 M9
D9
119.781 112 S9
120.199 112 M9
D9
125.097 112 S9
125.216 112 M9
D9
125.276 112 S9
125.336 112 M9
D9
126.47 112 S9
127.068 112 M9
D9
127.247 112 S9
127.725 112 M9
D9
132.562 112 S9
132.861 112 M9
D9
133.996 112 S9
134.593 112 M9
D9
134.772 112 S9
135.19 112 M9
D9
140.088 112 S9
140.207 112 M9
D9
140.267 112 S9
140.387 112 M9
D9
141.462 112 S9
142.119 112 M9
D9
142.298 112 S9
142.716 112 M9
D9
147.554 112 S9
147.613 112 M9
D9
149.226 112 S9
149.823 112 M9
D9
155.378 112 S9
155.497 112 M9
D9
156.752 112 S9
157.409 112 M9
D9
162.784 112 S9
163.023 112 M9
D9
164.217 112 S9
164.874 112 M9
D9
170.309 112 S9
170.548 112 M9
D9
171.803 112 S9
172.46 112 M9
D9
177.895 112 S9
177.954 112 M9
D9
179.567 112 S9
180.105 112 M9
D9
185.659 112 S9
185.719 112 M9
D9
187.092 112 S9
187.57 112 M9
D9
190.796 112 S9
191.333 112 M9
D9
193.185 112 S9
193.304 112 M9
D9
194.558 112 S9
195.156 112 M9
D9
200.65 112 S9
200.83 112 M9
D9
202.084 112 S9
202.741 112 M9
D9
208.116 112 S9
208.355 112 M9
D9
209.55 112 S9
210.266 112 M9
D9
215.642 112 S9
215.881 112 M9
D9
87.3496 116 S9
87.7677 116 M9
D9
88.4844 116 S9
89.0817 116 M9
D9
89.3206 116 S9
89.7387 116 M9
D9
95.0543 116 S9
95.2335 116 M9
D9
96.01 116 S9
96.5475 116 M9
D9
96.8461 116 S9
97.2642 116 M9
D9
102.58 116 S9
102.759 116 M9
D9
103.476 116 S9
104.073 116 M9
D9
104.312 116 S9
104.79 116 M9
D9
110.046 116 S9
110.225 116 M9
D9
111.001 116 S9
111.539 116 M9
D9
111.837 116 S9
112.255 116 M9
D9
117.571 116 S9
117.75 116 M9
D9
118.467 116 S9
119.064 116 M9
D9
119.363 116 S9
119.781 116 M9
D9
125.037 116 S9
125.276 116 M9
D9
125.993 116 S9
126.59 116 M9
D9
126.829 116 S9
127.247 116 M9
D9
132.562 116 S9
132.742 116 M9
D9
133.518 116 S9
134.115 116 M9
D9
134.354 116 S9
134.772 116 M9
D9
140.088 116 S9
140.267 116 M9
D9
140.984 116 S9
141.641 116 M9
D9
141.82 116 S9
142.298 116 M9
D9
147.554 116 S9
147.613 116 M9
D9
148.748 116 S9
149.345 116 M9
D9
155.378 116 S9
155.497 116 M9
D9
156.274 116 S9
156.931 116 M9
D9
162.784 116 S9
163.023 116 M9
D9
163.799 116 S9
164.397 116 M9
D9
170.309 116 S9
170.548 116 M9
D9
171.325 116 S9
172.041 116 M9
D9
177.895 116 S9
177.954 116 M9
D9
179.089 116 S9
179.627 116 M9
D9
185.659 116 S9
185.719 116 M9
D9
186.615 116 S9
187.152 116 M9
D9
190.318 116 S9
190.855 116 M9
D9
193.185 116 S9
193.304 116 M9
D9
194.08 116 S9
194.678 116 M9
D9
200.65 116 S9
200.83 116 M9
D9
201.606 116 S9
202.263 116 M9
D9
208.116 116 S9
208.355 116 M9
D9
209.131 116 S9
209.788 116 M9
D9
215.642 116 S9
215.881 116 M9
D9
87.3496 120 S9
87.708 120 M9
D9
88.0066 120 S9
88.6039 120 M9
D9
88.9025 120 S9
89.3206 120 M9
D9
95.0543 120 S9
95.2335 120 M9
D9
95.5321 120 S9
96.0697 120 M9
D9
96.428 120 S9
96.8461 120 M9
D9
102.58 120 S9
102.699 120 M9
D9
102.998 120 S9
103.595 120 M9
D9
103.894 120 S9
104.372 120 M9
D9
110.046 120 S9
110.225 120 M9
D9
110.523 120 S9
111.121 120 M9
D9
111.419 120 S9
111.837 120 M9
D9
117.571 120 S9
117.691 120 M9
D9
118.049 120 S9
118.586 120 M9
D9
118.945 120 S9
119.363 120 M9
D9
125.037 120 S9
125.216 120 M9
D9
125.515 120 S9
126.112 120 M9
D9
126.411 120 S9
126.829 120 M9
D9
132.562 120 S9
132.742 120 M9
D9
133.04 120 S9
133.637 120 M9
D9
133.936 120 S9
134.354 120 M9
D9
140.088 120 S9
140.207 120 M9
D9
140.506 120 S9
141.163 120 M9
D9
141.402 120 S9
141.88 120 M9
D9
147.554 120 S9
147.613 120 M9
D9
148.33 120 S9
148.868 120 M9
D9
155.378 120 S9
155.497 120 M9
D9
155.796 120 S9
156.453 120 M9
D9
162.784 120 S9
163.023 120 M9
D9
163.321 120 S9
163.978 120 M9
D9
170.309 120 S9
170.548 120 M9
D9
170.847 120 S9
171.564 120 M9
D9
177.895 120 S9
177.954 120 M9
D9
178.611 120 S9
179.149 120 M9
D9
185.659 120 S9
185.719 120 M9
D9
186.137 120 S9
186.674 120 M9
D9
189.9 120 S9
190.377 120 M9
D9
193.185 120 S9
193.304 120 M9
D9
193.603 120 S9
194.2 120 M9
D9
200.591 120 S9
200.83 120 M9
D9
201.128 120 S9
201.785 120 M9
D9
208.116 120 S9
208.355 120 M9
D9
208.654 120 S9
209.311 120 M9
D9
215.642 120 S9
215.881 120 M9
D9
87.3496 124 S9
88.1261 124 M9
D9
88.5442 124 S9
88.9025 124 M9
D9
95.0543 124 S9
95.6516 124 M9
D9
96.01 124 S9
96.428 124 M9
D9
102.52 124 S9
103.117 124 M9
D9
103.535 124 S9
103.894 124 M9
D9
110.046 124 S9
110.643 124 M9
D9
111.061 124 S9
111.419 124 M9
D9
117.571 124 S9
118.109 124 M9
D9
118.527 124 S9
118.945 124 M9
D9
125.037 124 S9
125.634 124 M9
D9
126.052 124 S9
126.411 124 M9
D9
132.562 124 S9
133.16 124 M9
D9
133.518 124 S9
133.936 124 M9
D9
140.088 124 S9
140.685 124 M9
D9
141.044 124 S9
141.462 124 M9
D9
147.554 124 S9
147.613 124 M9
D9
147.852 124 S9
148.39 124 M9
D9
155.378 124 S9
155.975 124 M9
D9
162.784 124 S9
163.501 124 M9
D9
170.309 124 S9
177.954 124 M9
D9
178.134 124 S9
178.671 124 M9
D9
185.659 124 S9
215.881 124 M9
D9
87.3496 128 S9
87.7677 128 M9
D9
88.4247 128 S9
88.5442 128 M9
D9
94.5765 128 S9
95.2335 128 M9
D9
95.9502 128 S9
96.0697 128 M9
D9
102.102 128 S9
102.759 128 M9
D9
103.416 128 S9
103.535 128 M9
D9
109.568 128 S9
110.225 128 M9
D9
110.942 128 S9
111.061 128 M9
D9
117.093 128 S9
117.75 128 M9
D9
118.467 128 S9
118.527 128 M9
D9
124.619 128 S9
125.276 128 M9
D9
125.933 128 S9
126.052 128 M9
D9
132.085 128 S9
132.742 128 M9
D9
133.458 128 S9
133.578 128 M9
D9
139.61 128 S9
140.267 128 M9
D9
140.984 128 S9
141.044 128 M9
D9
147.076 128 S9
147.733 128 M9
D9
154.9 128 S9
155.557 128 M9
D9
162.306 128 S9
163.083 128 M9
D9
169.832 128 S9
170.548 128 M9
D9
177.417 128 S9
178.134 128 M9
D9
185.181 128 S9
185.779 128 M9
D9
192.707 128 S9
193.304 128 M9
D9
196.47 128 S9
196.947 128 M9
D9
200.173 128 S9
200.889 128 M9
D9
207.638 128 S9
208.415 128 M9
D9
215.164 128 S9
215.94 128 M9
D9
87.3496 132 S9
87.7677 132 M9
D9
88.365 132 S9
88.4247 132 M9
D9
94.0987 132 S9
94.696 132 M9
D9
95.1141 132 S9
95.2335 132 M9
D9
95.8905 132 S9
95.9502 132 M9
D9
101.624 132 S9
102.162 132 M9
D9
102.58 132 S9
102.759 132 M9
D9
103.416 132 S9
103.476 132 M9
D9
109.09 132 S9
109.687 132 M9
D9
110.105 132 S9
110.225 132 M9
D9
110.882 132 S9
110.942 132 M9
D9
116.616 132 S9
117.213 132 M9
D9
117.571 132 S9
117.75 132 M9
D9
118.407 132 S9
118.467 132 M9
D9
124.141 132 S9
124.738 132 M9
D9
125.097 132 S9
125.276 132 M9
D9
125.933 132 S9
125.993 132 M9
D9
131.607 132 S9
132.264 132 M9
D9
132.622 132 S9
132.742 132 M9
D9
133.399 132 S9
133.458 132 M9
D9
139.132 132 S9
139.73 132 M9
D9
140.088 132 S9
140.267 132 M9
D9
140.924 132 S9
140.984 132 M9
D9
146.658 132 S9
147.255 132 M9
D9
147.613 132 S9
147.673 132 M9
D9
154.422 132 S9
155.019 132 M9
D9
155.438 132 S9
155.557 132 M9
D9
161.828 132 S9
162.545 132 M9
D9
162.844 132 S9
163.083 132 M9
D9
169.354 132 S9
170.071 132 M9
D9
170.309 132 S9
170.548 132 M9
D9
176.939 132 S9
177.656 132 M9
D9
177.954 132 S9
178.014 132 M9
D9
184.703 132 S9
185.241 132 M9
D9
185.719 132 S9
185.779 132 M9
D9
192.229 132 S9
192.766 132 M9
D9
193.185 132 S9
193.304 132 M9
D9
195.992 132 S9
196.529 132 M9
D9
199.695 132 S9
200.292 132 M9
D9
200.65 132 S9
200.889 132 M9
D9
207.161 132 S9
207.877 132 M9
D9
208.116 132 S9
208.415 132 M9
D9
214.686 132 S9
215.403 132 M9
D9
215.642 132 S9
215.94 132 M9
D9
87.3496 136 S9
87.7677 136 M9
D9
88.365 136 S9
88.4247 136 M9
D9
93.6209 136 S9
94.2779 136 M9
D9
95.1141 136 S9
95.2335 136 M9
D9
95.8308 136 S9
95.8905 136 M9
D9
101.146 136 S9
101.744 136 M9
D9
102.58 136 S9
102.759 136 M9
D9
103.356 136 S9
103.416 136 M9
D9
108.672 136 S9
109.269 136 M9
D9
110.105 136 S9
110.225 136 M9
D9
110.822 136 S9
110.882 136 M9
D9
116.138 136 S9
116.795 136 M9
D9
117.571 136 S9
117.75 136 M9
D9
118.348 136 S9
118.407 136 M9
D9
123.663 136 S9
124.26 136 M9
D9
125.097 136 S9
125.276 136 M9
D9
125.873 136 S9
125.933 136 M9
D9
131.129 136 S9
131.786 136 M9
D9
132.622 136 S9
132.742 136 M9
D9
133.339 136 S9
133.399 136 M9
D9
138.655 136 S9
139.311 136 M9
D9
140.088 136 S9
140.267 136 M9
D9
140.864 136 S9
140.924 136 M9
D9
146.18 136 S9
146.837 136 M9
D9
147.613 136 S9
147.673 136 M9
D9
153.944 136 S9
154.542 136 M9
D9
155.438 136 S9
155.557 136 M9
D9
161.41 136 S9
162.067 136 M9
D9
162.844 136 S9
163.023 136 M9
D9
168.876 136 S9
169.593 136 M9
D9
170.309 136 S9
170.548 136 M9
D9
176.461 136 S9
177.178 136 M9
D9
177.954 136 S9
178.014 136 M9
D9
184.226 136 S9
184.763 136 M9
D9
185.719 136 S9
185.779 136 M9
D9
191.751 136 S9
192.289 136 M9
D9
193.185 136 S9
193.304 136 M9
D9
195.514 136 S9
196.051 136 M9
D9
199.217 136 S9
199.874 136 M9
D9
200.65 136 S9
200.889 136 M9
D9
206.683 136 S9
207.399 136 M9
D9
208.116 136 S9
208.415 136 M9
D9
214.208 136 S9
214.925 136 M9
D9
215.642 136 S9
215.761 136 M9
D9
215.821 136 S9
215.94 136 M9
D9
87.3496 140 S9
87.708 140 M9
D9
88.3053 140 S9
88.365 140 M9
D9
93.1431 140 S9
93.8598 140 M9
D9
95.0543 140 S9
95.2335 140 M9
D9
95.771 140 S9
95.8308 140 M9
D9
100.669 140 S9
101.326 140 M9
D9
102.58 140 S9
102.759 140 M9
D9
103.297 140 S9
103.356 140 M9
D9
108.194 140 S9
108.851 140 M9
D9
110.105 140 S9
110.225 140 M9
D9
110.822 140 S9
110.882 140 M9
D9
115.66 140 S9
116.377 140 M9
D9
117.571 140 S9
117.75 140 M9
D9
118.288 140 S9
118.348 140 M9
D9
123.185 140 S9
123.842 140 M9
D9
125.097 140 S9
125.276 140 M9
D9
125.813 140 S9
125.873 140 M9
D9
130.711 140 S9
131.368 140 M9
D9
132.622 140 S9
132.742 140 M9
D9
133.339 140 S9
133.399 140 M9
D9
138.177 140 S9
138.834 140 M9
D9
140.088 140 S9
140.267 140 M9
D9
140.805 140 S9
140.864 140 M9
D9
145.702 140 S9
146.359 140 M9
D9
147.613 140 S9
147.673 140 M9
D9
153.467 140 S9
154.064 140 M9
D9
155.438 140 S9
155.497 140 M9
D9
160.932 140 S9
161.589 140 M9
D9
162.844 140 S9
163.023 140 M9
D9
168.398 140 S9
169.115 140 M9
D9
170.309 140 S9
170.548 140 M9
D9
176.043 140 S9
176.7 140 M9
D9
177.954 140 S9
178.014 140 M9
D9
183.808 140 S9
184.285 140 M9
D9
185.719 140 S9
185.779 140 M9
D9
191.273 140 S9
191.811 140 M9
D9
193.185 140 S9
193.304 140 M9
D9
195.036 140 S9
195.574 140 M9
D9
198.739 140 S9
199.396 140 M9
D9
200.65 140 S9
200.889 140 M9
D9
206.205 140 S9
206.922 140 M9
D9
208.116 140 S9
208.415 140 M9
D9
213.73 140 S9
214.447 140 M9
D9
215.642 140 S9
215.881 140 M9
D9
12 /Helvetica SetTxt
(|) 0 72 72 TXC
(|) 0 87.2899 72 TXC
(|) 0 102.58 72 TXC
(|) 0 117.87 72 TXC
(|) 0 133.16 72 TXC
(|) 0 148.45 72 TXC
(|) 0 163.74 72 TXC
(|) 0 179.029 72 TXC
(|) 0 194.319 72 TXC
(|) 0 209.609 72 TXC
6 /Helvetica SetTxt
(|) -90 72 72 TXC
(|) -90 72 80 TXC
(|) -90 72 88 TXC
(|) -90 72 96 TXC
(|) -90 72 104 TXC
(|) -90 72 112 TXC
(|) -90 72 120 TXC
(|) -90 72 128 TXC
(|) -90 72 136 TXC
(|) -90 72 144 TXC
7 /Helvetica SetTxt
() 0 144 41.2 TXC
[] 0.400000 SL
2 setlinecap
72 72 216 72 
L9
0 setlinecap
72 72 72 144 
L9
( Virtual address (hydro2d) ) 0 216 55.75 TXR
() 90 53.7 144 TXR
4 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 46 41 216 150 170 109 208 629 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/tomcatv-virt.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 46 41 216 150
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
95.1042 80 S9
[] 1.200000 SL
96.3733 80 M9
D9
114.252 80 S9
115.596 80 M9
D9
133.437 80 S9
134.781 80 M9
D9
152.659 80 S9
153.928 80 M9
D9
171.844 80 S9
173.114 80 M9
D9
191.03 80 S9
192.299 80 M9
D9
210.215 80 S9
211.484 80 M9
D9
215.851 80 S9
216.037 80 M9
D9
93.8725 84 S9
95.1415 84 M9
D9
113.02 84 S9
114.364 84 M9
D9
132.205 84 S9
133.549 84 M9
D9
151.428 84 S9
152.697 84 M9
D9
170.613 84 S9
171.882 84 M9
D9
189.798 84 S9
191.067 84 M9
D9
208.983 84 S9
210.252 84 M9
D9
215.851 84 S9
216.037 84 M9
D9
92.6407 88 S9
93.9098 88 M9
D9
111.788 88 S9
113.132 88 M9
D9
130.974 88 S9
132.317 88 M9
D9
150.196 88 S9
151.465 88 M9
D9
169.381 88 S9
170.65 88 M9
D9
188.566 88 S9
189.835 88 M9
D9
207.751 88 S9
209.02 88 M9
D9
215.851 88 S9
216.037 88 M9
D9
91.409 92 S9
92.6781 92 M9
D9
110.557 92 S9
111.9 92 M9
D9
129.742 92 S9
131.086 92 M9
D9
148.964 92 S9
150.233 92 M9
D9
168.149 92 S9
169.418 92 M9
D9
187.334 92 S9
188.603 92 M9
D9
206.519 92 S9
207.788 92 M9
D9
215.851 92 S9
216.037 92 M9
D9
90.1773 96 S9
91.4463 96 M9
D9
109.325 96 S9
110.669 96 M9
D9
128.51 96 S9
129.854 96 M9
D9
147.733 96 S9
149.002 96 M9
D9
166.918 96 S9
168.187 96 M9
D9
186.103 96 S9
187.372 96 M9
D9
205.288 96 S9
206.557 96 M9
D9
215.851 96 S9
216.037 96 M9
D9
88.9456 100 S9
90.2146 100 M9
D9
108.093 100 S9
109.437 100 M9
D9
127.278 100 S9
128.622 100 M9
D9
146.501 100 S9
147.77 100 M9
D9
165.686 100 S9
166.955 100 M9
D9
184.871 100 S9
186.14 100 M9
D9
204.056 100 S9
205.325 100 M9
D9
215.851 100 S9
216.037 100 M9
D9
87.7138 104 S9
88.9829 104 M9
D9
106.862 104 S9
108.205 104 M9
D9
126.047 104 S9
127.39 104 M9
D9
145.269 104 S9
146.538 104 M9
D9
164.454 104 S9
165.723 104 M9
D9
183.639 104 S9
184.908 104 M9
D9
202.824 104 S9
204.093 104 M9
D9
215.851 104 S9
216.037 104 M9
D9
86.4821 108 S9
87.7512 108 M9
D9
105.63 108 S9
106.974 108 M9
D9
124.815 108 S9
126.159 108 M9
D9
144.037 108 S9
145.306 108 M9
D9
163.222 108 S9
164.491 108 M9
D9
182.407 108 S9
183.677 108 M9
D9
201.593 108 S9
202.862 108 M9
D9
215.851 108 S9
216.037 108 M9
D9
85.2504 112 S9
86.5194 112 M9
D9
104.398 112 S9
105.742 112 M9
D9
123.583 112 S9
124.927 112 M9
D9
142.806 112 S9
144.075 112 M9
D9
161.991 112 S9
163.26 112 M9
D9
181.176 112 S9
182.445 112 M9
D9
200.361 112 S9
201.63 112 M9
D9
215.851 112 S9
216.037 112 M9
D9
84.0187 116 S9
85.2877 116 M9
D9
103.166 116 S9
104.51 116 M9
D9
122.351 116 S9
123.695 116 M9
D9
141.574 116 S9
142.843 116 M9
D9
160.759 116 S9
162.028 116 M9
D9
179.944 116 S9
181.213 116 M9
D9
199.129 116 S9
200.398 116 M9
D9
215.851 116 S9
216.037 116 M9
D9
82.7869 120 S9
84.056 120 M9
D9
101.935 120 S9
103.278 120 M9
D9
121.12 120 S9
122.463 120 M9
D9
140.342 120 S9
141.611 120 M9
D9
159.527 120 S9
160.796 120 M9
D9
178.712 120 S9
179.981 120 M9
D9
197.897 120 S9
199.166 120 M9
D9
215.851 120 S9
216.037 120 M9
D9
81.5925 124 S9
82.8243 124 M9
D9
100.74 124 S9
102.047 124 M9
D9
119.925 124 S9
121.232 124 M9
D9
139.148 124 S9
140.379 124 M9
D9
158.333 124 S9
159.565 124 M9
D9
177.518 124 S9
178.75 124 M9
D9
196.703 124 S9
197.935 124 M9
D9
215.851 124 S9
216.037 124 M9
D9
100.031 128 S9
100.703 128 M9
D9
119.179 128 S9
119.963 128 M9
D9
138.401 128 S9
139.148 128 M9
D9
157.624 128 S9
158.295 128 M9
D9
176.809 128 S9
177.481 128 M9
D9
195.994 128 S9
196.666 128 M9
D9
215.179 128 S9
216.037 128 M9
D9
98.7994 132 S9
100.068 132 M9
D9
117.947 132 S9
119.291 132 M9
D9
137.132 132 S9
138.513 132 M9
D9
156.355 132 S9
157.661 132 M9
D9
175.577 132 S9
176.846 132 M9
D9
194.762 132 S9
196.031 132 M9
D9
213.947 132 S9
215.216 132 M9
D9
215.851 132 S9
216.037 132 M9
D9
97.5677 136 S9
98.8367 136 M9
D9
116.715 136 S9
118.059 136 M9
D9
135.9 136 S9
137.244 136 M9
D9
155.123 136 S9
156.392 136 M9
D9
174.308 136 S9
175.614 136 M9
D9
193.493 136 S9
194.799 136 M9
D9
212.715 136 S9
213.984 136 M9
D9
215.851 136 S9
216.037 136 M9
D9
96.3359 140 S9
97.605 140 M9
D9
115.484 140 S9
116.827 140 M9
D9
134.669 140 S9
136.012 140 M9
D9
153.891 140 S9
155.16 140 M9
D9
173.076 140 S9
174.345 140 M9
D9
192.261 140 S9
193.53 140 M9
D9
211.446 140 S9
212.753 140 M9
D9
215.851 140 S9
216.037 140 M9
D9
12 /Helvetica SetTxt
(|) 0 72 72 TXC
(|) 0 81.5552 72 TXC
(|) 0 91.1104 72 TXC
(|) 0 100.666 72 TXC
(|) 0 110.221 72 TXC
(|) 0 119.776 72 TXC
(|) 0 129.331 72 TXC
(|) 0 138.886 72 TXC
(|) 0 148.442 72 TXC
(|) 0 157.997 72 TXC
(|) 0 167.552 72 TXC
(|) 0 177.107 72 TXC
(|) 0 186.663 72 TXC
(|) 0 196.218 72 TXC
(|) 0 205.773 72 TXC
(|) 0 215.328 72 TXC
6 /Helvetica SetTxt
(|) -90 72 72 TXC
(|) -90 72 80 TXC
(|) -90 72 88 TXC
(|) -90 72 96 TXC
(|) -90 72 104 TXC
(|) -90 72 112 TXC
(|) -90 72 120 TXC
(|) -90 72 128 TXC
(|) -90 72 136 TXC
(|) -90 72 144 TXC
7 /Helvetica SetTxt
() 0 144 41.2 TXC
[] 0.400000 SL
2 setlinecap
72 72 216 72 
L9
0 setlinecap
72 72 72 144 
L9
( Virtual address (tomcatv) ) 0 216 55.75 TXR
() 90 53.7 144 TXR
4 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 46 41 216 150 170 109 53 629 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/swim-virt.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 46 41 216 150
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
81.5651 80 S9
[] 1.200000 SL
81.6025 80 M9
D9
88.1412 80 S9
88.7763 80 M9
D9
91.1303 80 S9
91.205 80 M9
D9
97.7436 80 S9
98.3788 80 M9
D9
100.733 80 S9
100.807 80 M9
D9
107.346 80 S9
107.981 80 M9
D9
110.335 80 S9
110.41 80 M9
D9
116.949 80 S9
117.584 80 M9
D9
119.938 80 S9
120.012 80 M9
D9
126.551 80 S9
127.224 80 M9
D9
129.54 80 S9
129.615 80 M9
D9
136.154 80 S9
136.789 80 M9
D9
139.18 80 S9
139.217 80 M9
D9
145.756 80 S9
146.391 80 M9
D9
148.783 80 S9
148.82 80 M9
D9
155.359 80 S9
156.031 80 M9
D9
158.385 80 S9
158.422 80 M9
D9
164.961 80 S9
165.596 80 M9
D9
167.988 80 S9
168.025 80 M9
D9
174.564 80 S9
175.236 80 M9
D9
177.59 80 S9
177.627 80 M9
D9
184.166 80 S9
184.839 80 M9
D9
187.193 80 S9
187.23 80 M9
D9
193.769 80 S9
194.441 80 M9
D9
196.795 80 S9
196.832 80 M9
D9
203.371 80 S9
204.044 80 M9
D9
206.398 80 S9
206.435 80 M9
D9
81.5651 84 S9
81.6025 84 M9
D9
87.5433 84 S9
88.1785 84 M9
D9
91.1303 84 S9
91.205 84 M9
D9
97.1458 84 S9
97.781 84 M9
D9
100.733 84 S9
100.807 84 M9
D9
106.748 84 S9
107.383 84 M9
D9
110.335 84 S9
110.41 84 M9
D9
116.351 84 S9
116.986 84 M9
D9
119.938 84 S9
120.012 84 M9
D9
125.953 84 S9
126.588 84 M9
D9
129.54 84 S9
129.615 84 M9
D9
135.556 84 S9
136.191 84 M9
D9
139.143 84 S9
139.217 84 M9
D9
145.158 84 S9
145.793 84 M9
D9
148.783 84 S9
148.82 84 M9
D9
154.761 84 S9
155.433 84 M9
D9
158.385 84 S9
158.422 84 M9
D9
164.363 84 S9
164.998 84 M9
D9
167.988 84 S9
168.025 84 M9
D9
173.966 84 S9
174.638 84 M9
D9
177.59 84 S9
177.627 84 M9
D9
183.568 84 S9
184.241 84 M9
D9
187.193 84 S9
187.23 84 M9
D9
193.171 84 S9
193.843 84 M9
D9
196.795 84 S9
196.832 84 M9
D9
202.773 84 S9
203.446 84 M9
D9
206.398 84 S9
206.435 84 M9
D9
81.5651 88 S9
81.6025 88 M9
D9
86.9455 88 S9
87.5807 88 M9
D9
91.1303 88 S9
91.205 88 M9
D9
96.548 88 S9
97.1832 88 M9
D9
100.733 88 S9
100.807 88 M9
D9
106.15 88 S9
106.786 88 M9
D9
110.335 88 S9
110.41 88 M9
D9
115.753 88 S9
116.388 88 M9
D9
119.938 88 S9
120.012 88 M9
D9
125.355 88 S9
125.991 88 M9
D9
129.54 88 S9
129.615 88 M9
D9
134.958 88 S9
135.593 88 M9
D9
139.143 88 S9
139.217 88 M9
D9
144.56 88 S9
145.196 88 M9
D9
148.745 88 S9
148.82 88 M9
D9
154.163 88 S9
154.835 88 M9
D9
158.385 88 S9
158.422 88 M9
D9
163.765 88 S9
164.401 88 M9
D9
167.988 88 S9
168.025 88 M9
D9
173.368 88 S9
174.04 88 M9
D9
177.59 88 S9
177.627 88 M9
D9
182.97 88 S9
183.643 88 M9
D9
187.193 88 S9
187.23 88 M9
D9
192.573 88 S9
193.245 88 M9
D9
196.795 88 S9
196.832 88 M9
D9
202.175 88 S9
202.848 88 M9
D9
206.398 88 S9
206.435 88 M9
D9
81.5651 92 S9
81.6025 92 M9
D9
86.3477 92 S9
86.9829 92 M9
D9
91.1303 92 S9
91.205 92 M9
D9
95.9502 92 S9
96.5854 92 M9
D9
100.733 92 S9
100.807 92 M9
D9
105.553 92 S9
106.188 92 M9
D9
110.335 92 S9
110.41 92 M9
D9
115.155 92 S9
115.79 92 M9
D9
119.938 92 S9
120.012 92 M9
D9
124.758 92 S9
125.393 92 M9
D9
129.54 92 S9
129.615 92 M9
D9
134.36 92 S9
134.995 92 M9
D9
139.143 92 S9
139.217 92 M9
D9
143.963 92 S9
144.598 92 M9
D9
148.745 92 S9
148.82 92 M9
D9
153.565 92 S9
154.2 92 M9
D9
158.348 92 S9
158.422 92 M9
D9
163.168 92 S9
163.803 92 M9
D9
167.988 92 S9
168.025 92 M9
D9
172.77 92 S9
173.443 92 M9
D9
177.59 92 S9
177.627 92 M9
D9
182.373 92 S9
183.045 92 M9
D9
187.193 92 S9
187.23 92 M9
D9
191.975 92 S9
192.648 92 M9
D9
196.795 92 S9
196.832 92 M9
D9
201.578 92 S9
202.25 92 M9
D9
206.398 92 S9
206.435 92 M9
D9
81.5651 96 S9
81.6025 96 M9
D9
85.7499 96 S9
86.3851 96 M9
D9
91.1303 96 S9
91.205 96 M9
D9
95.3524 96 S9
95.9875 96 M9
D9
100.733 96 S9
100.807 96 M9
D9
104.955 96 S9
105.59 96 M9
D9
110.335 96 S9
110.41 96 M9
D9
114.557 96 S9
115.193 96 M9
D9
119.938 96 S9
120.012 96 M9
D9
124.16 96 S9
124.795 96 M9
D9
129.54 96 S9
129.615 96 M9
D9
133.762 96 S9
134.398 96 M9
D9
139.143 96 S9
139.217 96 M9
D9
143.365 96 S9
144 96 M9
D9
148.745 96 S9
148.82 96 M9
D9
152.967 96 S9
153.602 96 M9
D9
158.348 96 S9
158.422 96 M9
D9
162.57 96 S9
163.205 96 M9
D9
167.95 96 S9
168.025 96 M9
D9
172.172 96 S9
172.845 96 M9
D9
177.59 96 S9
177.627 96 M9
D9
181.775 96 S9
182.447 96 M9
D9
187.193 96 S9
187.23 96 M9
D9
191.377 96 S9
192.05 96 M9
D9
196.795 96 S9
196.832 96 M9
D9
200.98 96 S9
201.652 96 M9
D9
206.398 96 S9
206.435 96 M9
D9
81.5651 100 S9
81.6025 100 M9
D9
85.152 100 S9
85.7872 100 M9
D9
91.1303 100 S9
91.205 100 M9
D9
94.7545 100 S9
95.3897 100 M9
D9
100.733 100 S9
100.807 100 M9
D9
104.357 100 S9
104.992 100 M9
D9
110.335 100 S9
110.41 100 M9
D9
113.96 100 S9
114.595 100 M9
D9
119.938 100 S9
120.012 100 M9
D9
123.562 100 S9
124.197 100 M9
D9
129.54 100 S9
129.615 100 M9
D9
133.165 100 S9
133.8 100 M9
D9
139.143 100 S9
139.217 100 M9
D9
142.767 100 S9
143.402 100 M9
D9
148.745 100 S9
148.82 100 M9
D9
152.369 100 S9
153.005 100 M9
D9
158.348 100 S9
158.422 100 M9
D9
161.972 100 S9
162.607 100 M9
D9
167.95 100 S9
168.025 100 M9
D9
171.574 100 S9
172.247 100 M9
D9
177.553 100 S9
177.627 100 M9
D9
181.177 100 S9
181.85 100 M9
D9
187.193 100 S9
187.23 100 M9
D9
190.779 100 S9
191.452 100 M9
D9
196.795 100 S9
196.832 100 M9
D9
200.382 100 S9
201.054 100 M9
D9
206.398 100 S9
206.435 100 M9
D9
81.5651 104 S9
81.6025 104 M9
D9
84.5542 104 S9
85.1894 104 M9
D9
91.1303 104 S9
91.205 104 M9
D9
94.1567 104 S9
94.7919 104 M9
D9
100.733 104 S9
100.807 104 M9
D9
103.759 104 S9
104.394 104 M9
D9
110.335 104 S9
110.41 104 M9
D9
113.362 104 S9
113.997 104 M9
D9
119.938 104 S9
120.012 104 M9
D9
122.964 104 S9
123.599 104 M9
D9
129.54 104 S9
129.615 104 M9
D9
132.567 104 S9
133.202 104 M9
D9
139.143 104 S9
139.217 104 M9
D9
142.169 104 S9
142.804 104 M9
D9
148.745 104 S9
148.82 104 M9
D9
151.772 104 S9
152.407 104 M9
D9
158.348 104 S9
158.422 104 M9
D9
161.374 104 S9
162.009 104 M9
D9
167.95 104 S9
168.025 104 M9
D9
170.977 104 S9
171.612 104 M9
D9
177.553 104 S9
177.627 104 M9
D9
180.579 104 S9
181.252 104 M9
D9
187.155 104 S9
187.23 104 M9
D9
190.182 104 S9
190.854 104 M9
D9
196.795 104 S9
196.832 104 M9
D9
199.784 104 S9
200.457 104 M9
D9
206.398 104 S9
206.435 104 M9
D9
81.5651 108 S9
81.6025 108 M9
D9
83.9564 108 S9
84.5916 108 M9
D9
91.1303 108 S9
91.205 108 M9
D9
93.5589 108 S9
94.1941 108 M9
D9
100.733 108 S9
100.807 108 M9
D9
103.161 108 S9
103.797 108 M9
D9
110.335 108 S9
110.41 108 M9
D9
112.764 108 S9
113.399 108 M9
D9
119.938 108 S9
120.012 108 M9
D9
122.366 108 S9
123.002 108 M9
D9
129.54 108 S9
129.615 108 M9
D9
131.969 108 S9
132.604 108 M9
D9
139.143 108 S9
139.217 108 M9
D9
141.571 108 S9
142.207 108 M9
D9
148.745 108 S9
148.82 108 M9
D9
151.174 108 S9
151.809 108 M9
D9
158.348 108 S9
158.422 108 M9
D9
160.776 108 S9
161.412 108 M9
D9
167.95 108 S9
168.025 108 M9
D9
170.379 108 S9
171.014 108 M9
D9
177.553 108 S9
177.627 108 M9
D9
179.981 108 S9
180.617 108 M9
D9
187.155 108 S9
187.23 108 M9
D9
189.584 108 S9
190.256 108 M9
D9
196.758 108 S9
196.832 108 M9
D9
199.186 108 S9
199.859 108 M9
D9
206.398 108 S9
206.435 108 M9
D9
81.5651 112 S9
81.6025 112 M9
D9
83.3586 112 S9
83.9938 112 M9
D9
91.1303 112 S9
91.205 112 M9
D9
92.9611 112 S9
93.5963 112 M9
D9
100.733 112 S9
100.807 112 M9
D9
102.564 112 S9
103.199 112 M9
D9
110.335 112 S9
110.41 112 M9
D9
112.166 112 S9
112.801 112 M9
D9
119.938 112 S9
120.012 112 M9
D9
121.769 112 S9
122.404 112 M9
D9
129.54 112 S9
129.615 112 M9
D9
131.371 112 S9
132.006 112 M9
D9
139.143 112 S9
139.217 112 M9
D9
140.974 112 S9
141.609 112 M9
D9
148.745 112 S9
148.82 112 M9
D9
150.576 112 S9
151.211 112 M9
D9
158.348 112 S9
158.422 112 M9
D9
160.179 112 S9
160.814 112 M9
D9
167.95 112 S9
168.025 112 M9
D9
169.781 112 S9
170.416 112 M9
D9
177.553 112 S9
177.627 112 M9
D9
179.383 112 S9
180.019 112 M9
D9
187.155 112 S9
187.23 112 M9
D9
188.986 112 S9
189.621 112 M9
D9
196.758 112 S9
196.832 112 M9
D9
198.588 112 S9
199.224 112 M9
D9
206.36 112 S9
206.398 112 M9
D9
81.5651 116 S9
81.6025 116 M9
D9
82.7608 116 S9
83.396 116 M9
D9
91.1303 116 S9
91.205 116 M9
D9
92.3633 116 S9
92.9984 116 M9
D9
100.733 116 S9
100.807 116 M9
D9
101.966 116 S9
102.601 116 M9
D9
110.335 116 S9
110.41 116 M9
D9
111.568 116 S9
112.203 116 M9
D9
119.938 116 S9
120.012 116 M9
D9
121.171 116 S9
121.806 116 M9
D9
129.54 116 S9
129.615 116 M9
D9
130.773 116 S9
131.408 116 M9
D9
139.143 116 S9
139.217 116 M9
D9
140.376 116 S9
141.011 116 M9
D9
148.745 116 S9
148.82 116 M9
D9
149.978 116 S9
150.613 116 M9
D9
158.348 116 S9
158.422 116 M9
D9
159.581 116 S9
160.216 116 M9
D9
167.95 116 S9
168.025 116 M9
D9
169.183 116 S9
169.818 116 M9
D9
177.553 116 S9
177.627 116 M9
D9
178.786 116 S9
179.421 116 M9
D9
187.155 116 S9
187.23 116 M9
D9
188.388 116 S9
189.023 116 M9
D9
196.758 116 S9
196.832 116 M9
D9
197.991 116 S9
198.626 116 M9
D9
206.36 116 S9
206.398 116 M9
D9
81.5651 120 S9
81.6025 120 M9
D9
82.1629 120 S9
82.7981 120 M9
D9
91.1303 120 S9
91.205 120 M9
D9
91.7654 120 S9
92.4006 120 M9
D9
100.733 120 S9
100.807 120 M9
D9
101.368 120 S9
102.003 120 M9
D9
110.335 120 S9
110.41 120 M9
D9
110.97 120 S9
111.606 120 M9
D9
119.938 120 S9
120.012 120 M9
D9
120.573 120 S9
121.208 120 M9
D9
129.54 120 S9
129.615 120 M9
D9
130.175 120 S9
130.811 120 M9
D9
139.143 120 S9
139.217 120 M9
D9
139.778 120 S9
140.413 120 M9
D9
148.745 120 S9
148.82 120 M9
D9
149.38 120 S9
150.016 120 M9
D9
158.348 120 S9
158.422 120 M9
D9
158.983 120 S9
159.618 120 M9
D9
167.95 120 S9
168.025 120 M9
D9
168.585 120 S9
169.221 120 M9
D9
177.553 120 S9
177.627 120 M9
D9
178.188 120 S9
178.823 120 M9
D9
187.155 120 S9
187.23 120 M9
D9
187.79 120 S9
188.426 120 M9
D9
196.758 120 S9
196.832 120 M9
D9
197.393 120 S9
198.028 120 M9
D9
206.36 120 S9
206.398 120 M9
D9
81.5651 124 S9
82.2003 124 M9
D9
91.1303 124 S9
91.8028 124 M9
D9
100.733 124 S9
101.405 124 M9
D9
110.335 124 S9
111.008 124 M9
D9
119.938 124 S9
120.61 124 M9
D9
129.54 124 S9
130.213 124 M9
D9
139.143 124 S9
139.815 124 M9
D9
148.745 124 S9
149.418 124 M9
D9
158.348 124 S9
159.02 124 M9
D9
167.95 124 S9
168.623 124 M9
D9
177.553 124 S9
178.225 124 M9
D9
187.155 124 S9
187.828 124 M9
D9
196.758 124 S9
197.43 124 M9
D9
206.36 124 S9
206.435 124 M9
D9
81.5651 128 S9
81.6025 128 M9
D9
90.5324 128 S9
91.205 128 M9
D9
100.135 128 S9
100.807 128 M9
D9
109.737 128 S9
110.41 128 M9
D9
119.34 128 S9
120.012 128 M9
D9
128.942 128 S9
129.615 128 M9
D9
138.545 128 S9
139.217 128 M9
D9
148.147 128 S9
148.82 128 M9
D9
157.75 128 S9
158.422 128 M9
D9
167.352 128 S9
168.025 128 M9
D9
176.955 128 S9
177.627 128 M9
D9
186.557 128 S9
187.23 128 M9
D9
196.16 128 S9
196.832 128 M9
D9
205.762 128 S9
206.435 128 M9
D9
81.5651 132 S9
81.6025 132 M9
D9
89.9346 132 S9
90.5698 132 M9
D9
91.1303 132 S9
91.205 132 M9
D9
99.5371 132 S9
100.21 132 M9
D9
100.733 132 S9
100.807 132 M9
D9
109.14 132 S9
109.812 132 M9
D9
110.373 132 S9
110.41 132 M9
D9
118.742 132 S9
119.377 132 M9
D9
119.975 132 S9
120.012 132 M9
D9
128.345 132 S9
129.017 132 M9
D9
129.578 132 S9
129.615 132 M9
D9
137.947 132 S9
138.582 132 M9
D9
139.18 132 S9
139.217 132 M9
D9
147.55 132 S9
148.185 132 M9
D9
148.783 132 S9
148.82 132 M9
D9
157.152 132 S9
157.825 132 M9
D9
158.385 132 S9
158.422 132 M9
D9
166.755 132 S9
167.39 132 M9
D9
167.988 132 S9
168.025 132 M9
D9
176.357 132 S9
177.03 132 M9
D9
177.59 132 S9
177.627 132 M9
D9
185.96 132 S9
186.632 132 M9
D9
187.193 132 S9
187.23 132 M9
D9
195.562 132 S9
196.235 132 M9
D9
196.795 132 S9
196.832 132 M9
D9
205.165 132 S9
205.837 132 M9
D9
206.398 132 S9
206.435 132 M9
D9
81.5651 136 S9
81.6025 136 M9
D9
89.3368 136 S9
89.972 136 M9
D9
91.1303 136 S9
91.205 136 M9
D9
98.9393 136 S9
99.5745 136 M9
D9
100.733 136 S9
100.807 136 M9
D9
108.542 136 S9
109.214 136 M9
D9
110.335 136 S9
110.41 136 M9
D9
118.144 136 S9
118.779 136 M9
D9
119.975 136 S9
120.012 136 M9
D9
127.747 136 S9
128.419 136 M9
D9
129.578 136 S9
129.615 136 M9
D9
137.349 136 S9
137.984 136 M9
D9
139.18 136 S9
139.217 136 M9
D9
146.952 136 S9
147.587 136 M9
D9
148.783 136 S9
148.82 136 M9
D9
156.554 136 S9
157.227 136 M9
D9
158.385 136 S9
158.422 136 M9
D9
166.157 136 S9
166.792 136 M9
D9
167.988 136 S9
168.025 136 M9
D9
175.759 136 S9
176.432 136 M9
D9
177.59 136 S9
177.627 136 M9
D9
185.362 136 S9
186.034 136 M9
D9
187.193 136 S9
187.23 136 M9
D9
194.964 136 S9
195.637 136 M9
D9
196.795 136 S9
196.832 136 M9
D9
204.567 136 S9
205.239 136 M9
D9
206.398 136 S9
206.435 136 M9
D9
81.5651 140 S9
81.6025 140 M9
D9
88.739 140 S9
89.3742 140 M9
D9
91.1303 140 S9
91.205 140 M9
D9
98.3415 140 S9
98.9766 140 M9
D9
100.733 140 S9
100.807 140 M9
D9
107.944 140 S9
108.579 140 M9
D9
110.335 140 S9
110.41 140 M9
D9
117.546 140 S9
118.182 140 M9
D9
119.938 140 S9
120.012 140 M9
D9
127.149 140 S9
127.821 140 M9
D9
129.578 140 S9
129.615 140 M9
D9
136.751 140 S9
137.387 140 M9
D9
139.18 140 S9
139.217 140 M9
D9
146.354 140 S9
146.989 140 M9
D9
148.783 140 S9
148.82 140 M9
D9
155.956 140 S9
156.629 140 M9
D9
158.385 140 S9
158.422 140 M9
D9
165.559 140 S9
166.194 140 M9
D9
167.988 140 S9
168.025 140 M9
D9
175.161 140 S9
175.834 140 M9
D9
177.59 140 S9
177.627 140 M9
D9
184.764 140 S9
185.436 140 M9
D9
187.193 140 S9
187.23 140 M9
D9
194.366 140 S9
195.039 140 M9
D9
196.795 140 S9
196.832 140 M9
D9
203.969 140 S9
204.641 140 M9
D9
206.398 140 S9
206.435 140 M9
D9
12 /Helvetica SetTxt
(|) 0 72 72 TXC
(|) 0 81.5651 72 TXC
(|) 0 91.1303 72 TXC
(|) 0 100.695 72 TXC
(|) 0 110.261 72 TXC
(|) 0 119.826 72 TXC
(|) 0 129.391 72 TXC
(|) 0 138.956 72 TXC
(|) 0 148.521 72 TXC
(|) 0 158.086 72 TXC
(|) 0 167.651 72 TXC
(|) 0 177.216 72 TXC
(|) 0 186.782 72 TXC
(|) 0 196.347 72 TXC
(|) 0 205.912 72 TXC
(|) 0 215.477 72 TXC
6 /Helvetica SetTxt
(|) -90 72 72 TXC
(|) -90 72 80 TXC
(|) -90 72 88 TXC
(|) -90 72 96 TXC
(|) -90 72 104 TXC
(|) -90 72 112 TXC
(|) -90 72 120 TXC
(|) -90 72 128 TXC
(|) -90 72 136 TXC
(|) -90 72 144 TXC
7 /Helvetica SetTxt
() 0 144 41.2 TXC
[] 0.400000 SL
2 setlinecap
72 72 216 72 
L9
0 setlinecap
72 72 72 144 
L9
( Virtual address (swim) ) 0 216 55.75 TXR
( Processors ) 90 53.7 144 TXR
4 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
55.11 545 559.11 640.5 R
7 X
0 0 0 1 0 0 0 K
V
55.11 627 558 640.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.11 627 559.11 640.5 R
7 X
0 0 0 1 0 0 0 K
V
55.11 636 523.11 636 2 L
V
1 H
2 Z
0 X
N
54 539.78 558 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 3.  Page-level V) 55.11 621 T
(irtual Access Patterns of 16-pr) 151.01 621 T
(ocessor Runs.) 267.83 621 T
1 F
1.37 (The horizontal axis represents the data segment of the application\325) 55.11 610 P
1.37 (s address space. The vertical axis corresponds to the 16 processors) 306.18 610 P
-0.16 (involved in the computation. The graph plots the virtual pages accessed at least once during the steady state of the workloads by the dif) 55.11 599 P
-0.16 (ferent) 538.12 599 P
1.31 (processors. The sequential component of) 55.11 588 P
2 F
1.31 (hydr) 211.15 588 P
1.31 (o2d) 227.31 588 P
1 F
1.31 ( gives a dif) 240.81 588 P
1.31 (ferent access pattern for the master process, which runs on processor 1) 284.33 588 P
1.31 (1.) 552.36 588 P
0.14 (Measurements were taken with a 4KB page size. The horizontal ticks correspond to 256 pages or 1MB of data. A page coloring policy will) 55.11 577 P
0.47 (cause con\337icts between pages that dif) 55.11 566 P
0.47 (fer by a multiple of the cache size. By comparison, a uniprocessor access pattern would consist of a) 193 566 P
55.11 539.78 558 552 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.11 538.5 559.11 552 R
7 X
0 0 0 1 0 0 0 K
V
55.11 547.5 523.11 547.5 2 L
V
1 H
2 Z
0 X
N
54 539.78 558 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(single horizontal line that spans the address space.) 55.11 555 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
-0.09 (partition unit and the data partitioning policy) 317.88 533.33 P
-0.09 (. The data partitioning) 478.27 533.33 P
0.26 (unit is the amount of data that is operated on in each iteration of a) 317.88 523.33 P
1.47 (parallel loop. For example, if the parallel loops iterate over the) 317.88 513.33 P
0.98 (columns of a 2D array) 317.88 503.33 P
0.98 (, then the partitioning unit is the size of a) 401.69 503.33 P
2.32 (column. Our current implementation supports several common) 317.88 493.33 P
4.65 (partitioning policies, including even partitions \050where each) 317.88 483.33 P
1.58 (processor is allocated a number of iterations that is as close to) 317.88 473.33 P
1.65 (equal as possible\051 and blocked partitions \050where processors are) 317.88 463.33 P
0.64 (allocated) 317.88 453.33 P
0.64 ( iterations where) 382.54 453.33 P
2 F
0.64 (N) 446.68 453.33 P
1 F
0.64 (is the size of the distributed) 455.57 453.33 P
1.01 (array dimension and) 317.88 443.33 P
2 F
1.01 (p) 396.65 443.33 P
1 F
1.01 ( is the number of processors\051. W) 401.15 443.33 P
1.01 (e support) 523.74 443.33 P
4.23 (both forward partitions, with iterations assigned starting at) 317.88 433.33 P
2.77 (processor 0 up to processor) 317.88 423.33 P
2 F
2.77 (p) 432.45 423.33 P
1 F
2.77 (-1, and reverse partitions, with) 436.95 423.33 P
(iterations assigned from processor) 317.88 413.33 T
2 F
( p) 441.11 413.33 T
1 F
(-1 down to 0.) 447.86 413.33 T
3.9 (Overlapping array partitions occur when the same array is) 317.88 398.33 P
0.4 (accessed dif) 317.88 388.33 P
0.4 (ferently in dif) 361.85 388.33 P
0.4 (ferent loops of a program or when there) 411.98 388.33 P
(are unions of data structures.) 317.88 378.33 T
0 F
7.43 (Communication Patterns.) 317.88 363.33 P
1 F
7.43 ( In a shared-memory parallel) 424.3 363.33 P
2.74 (application, communication occurs when a processor accesses) 317.88 353.33 P
2.02 (parts of an array previously written by another processor) 317.88 343.33 P
2.02 (. The) 537.49 343.33 P
2.86 (compiler records information that combines array partitioning) 317.88 333.33 P
8.48 (information with a communication type. Our current) 317.88 323.33 P
1.34 (implementation supports shift and rotate communication of data) 317.88 313.33 P
(on the boundaries between neighboring processors.) 317.88 303.33 T
0 F
0.32 (Gr) 317.88 288.33 P
0.32 (oup Access Information.) 328.72 288.33 P
1 F
0.32 (The compiler records pairs of arrays) 425.68 288.33 P
(that are accessed within the same loops.) 317.88 278.33 T
0 11 Q
(5.2  Generating Page Coloring Hints at Run T) 317.88 261 T
(ime) 533.11 261 T
1 9 Q
0.6 (Our algorithm generates page coloring hints based on two simple) 317.88 244.33 P
0.38 (objectives. The \336rst objective is to map the data accessed by each) 317.88 234.33 P
3.89 (processor as contiguously in the physical address space as) 317.88 224.33 P
0.24 (possible. This strategy will eliminate all con\337ict misses if the data) 317.88 214.33 P
0.1 (accessed by a single processor \336ts in the cache since all pages will) 317.88 204.33 P
1.21 (have a dif) 317.88 194.33 P
1.21 (ferent color) 355.63 194.33 P
1.21 (. Even when the data accessed by a single) 398.08 194.33 P
1.65 (processor does not \336t, the load is spread out evenly across the) 317.88 184.33 P
(cache.) 317.88 174.33 T
1.23 (The second objective is to assign dif) 317.88 159.33 P
1.23 (ferent colors to the starting) 456.09 159.33 P
0.1 (locations of arrays that are used by the same processor at the same) 317.88 149.33 P
0.92 (time. The rationale behind this objective is that element) 317.88 139.33 P
2 F
0.92 (i) 528.66 139.33 P
1 F
0.92 (of one) 534.34 139.33 P
1.76 (array is often accessed with element) 317.88 129.33 P
2 F
1.76 (\050i+c\051) 460.92 129.33 P
1 F
1.76 (of a dif) 483.49 129.33 P
1.76 (ferent array) 512.85 129.33 P
1.76 (,) 555.75 129.33 P
1.34 (where) 317.88 119.33 P
2 F
1.34 (c) 343.46 119.33 P
1 F
1.34 ( is a small constant. Separating the starting locations of) 347.45 119.33 P
0.62 (arrays in the cache is especially important when the working sets) 317.88 109.33 P
0.88 (do not \336t in the cache as it allows the program to exploit spatial) 317.88 99.33 P
(locality) 317.88 89.33 T
(.) 344.3 89.33 T
353.26 449.08 382.54 461.08 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(N) 359.15 453.33 T
(p) 371.15 453.33 T
3 F
(\244) 367.4 453.33 T
355.15 451.98 355.15 460.08 357.84 460.08 3 L
0.41 H
2 Z
N
379.74 451.98 379.74 460.08 377.04 460.08 3 L
N
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.28 (W) 54 468.77 P
0.28 (e \336rst de\336ne a) 61.78 468.77 P
2 F
0.28 (uniform access segment) 115.89 468.77 P
1 F
0.28 ( to be a set of contiguous) 202.44 468.77 P
1.55 (pages within a single array that is accessed by the same set of) 54 458.77 P
-0.13 (processors. Note that a page may be shared by multiple processors,) 54 448.77 P
2.91 (e.g. when there are overlapping partitioning declarations. W) 54 438.77 P
2.91 (e) 290.12 438.77 P
3.1 (partition the virtual address space of an array into maximal) 54 428.77 P
0.38 (uniform access segments. Maximal uniform access segments with) 54 418.77 P
0.62 (the same processor set from dif) 54 408.77 P
0.62 (ferent arrays are grouped together) 169.68 408.77 P
(to form) 54 398.77 T
2 F
(uniform access sets) 83 398.77 T
1 F
(.) 152.99 398.77 T
(Generating the page coloring hints consists of \336ve steps:) 54 383.77 T
(1.) 54 368.77 T
0 F
3.15 (Cr) 67.75 368.77 P
3.15 (eate the Uniform Access Sets.) 78.08 368.77 P
1 F
3.15 ( The maximal uniform) 203.41 368.77 P
1.32 (access segments are easily be computed using the compiler) 67.75 358.77 P
1.32 (-) 291.12 358.77 P
2.08 (supplied array partitioning and communication information,) 67.75 348.77 P
0.33 (along with parameters known only at start up time such as the) 67.75 338.77 P
2.21 (number of processors. The algorithm starts by treating the) 67.75 328.77 P
4.05 (entire virtual address space as a single uniform access) 67.75 318.77 P
8.44 (segment. It processes each array partitioning and) 67.75 308.77 P
0.05 (communication pattern summary in turn, by splitting segments) 67.75 298.77 P
0.08 (at boundaries of arrays and whenever the access pattern within) 67.75 288.77 P
0.2 (the array changes. Figure) 67.75 278.77 P
0.2 (4 illustrates the dif) 161.58 278.77 P
0.2 (ferent steps of the) 229.28 278.77 P
0.26 (CDPC algorithm for a simple example; Figure) 67.75 268.77 P
0.26 (4 \050a\051 shows the) 238.59 268.77 P
(uniform access segments.) 67.75 258.77 T
(2.) 54 243.77 T
0 F
0.74 (Order the Uniform Access Sets) 67.75 243.77 P
1 F
0.74 (. W) 189.67 243.77 P
0.74 (e represent each uniform) 202.69 243.77 P
1.72 (access set as a node in an undirected graph, and edges are) 67.75 233.77 P
2.6 (inserted between two nodes whenever their processor sets) 67.75 223.77 P
0.85 (intersect. W) 67.75 213.77 P
0.85 (e wish to build a path that visits each node once.) 111.37 213.77 P
0.9 (While the path need not include only edges in the graph, the) 67.75 203.77 P
-0.15 (objective is to have the path include as many edges as possible.) 67.75 193.77 P
0.64 (The uniform access sets are sorted according to their order in) 67.75 183.77 P
1.01 (the path. W) 67.75 173.77 P
1.01 (e have developed a simple heuristic for this step.) 110.8 173.77 P
1.04 (W) 67.75 163.77 P
1.04 (e start by considering a subgraph with uniform access sets) 75.53 163.77 P
1.19 (that only have either one or two members in their processor) 67.75 153.77 P
0.53 (sets. W) 67.75 143.77 P
0.53 (e use a greedy algorithm that starts with a node with a) 94.06 143.77 P
1.04 (singleton processor set, and extends the path by choosing an) 67.75 133.77 P
0.16 (adjacent node that has not been visited whenever possible. For) 67.75 123.77 P
0.91 (the remaining nodes, we simply insert them next to the node) 67.75 113.77 P
1.83 (with the maximum overlap of processor set members. This) 67.75 103.77 P
1.67 (heuristic clusters the pages accessed by each processor) 67.75 93.77 P
1.67 (. W) 276.17 93.77 P
1.67 (e) 290.12 93.77 P
54 72 294.12 738 C
54 474.77 294.12 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.24 477.78 294.24 598.78 R
7 X
0 0 0 1 0 0 0 K
V
55.24 585.28 294.12 598.78 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.24 585.28 294.24 598.78 R
7 X
0 0 0 1 0 0 0 K
V
55.24 594.28 523.23 594.28 2 L
V
1 H
2 Z
0 X
N
54 474.77 294.12 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 4.  Illustration of the Algorithm.) 55.24 579.28 T
1 F
3.7 (This example illustrates the compiler) 55.24 568.28 P
3.7 (-directed page coloring) 203.35 568.28 P
2.12 (algorithm for two data structures \050virtual pages 0-7 and 8-13,) 55.24 557.28 P
-0.13 (respectively\051, and two processors. The virtual address space is \336rst) 55.24 546.28 P
0.06 (split into uniform access segments \050a\051. Segments that are accessed) 55.24 535.28 P
-0.13 (by the same processor set are grouped into uniform access sets \050b\051.) 55.24 524.28 P
0.35 (Pages within a segment are cyclically assigned to avoid a con\337ict) 55.24 513.28 P
1.1 (on CPU0 \050c\051. This produces the page coloring hints for a cache) 55.24 502.28 P
55.24 474.78 294.12 488.28 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.24 474.78 294.24 488.28 R
7 X
0 0 0 1 0 0 0 K
V
55.24 483.78 523.23 483.78 2 L
V
1 H
2 Z
0 X
N
54 474.77 294.12 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(con\336guration with four colors \050d\051.) 55.24 491.28 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
57.03 694.19 73 703.19 R
7 X
V
0.5 H
2 Z
0 X
N
0 F
(0) 62.77 695.68 T
73 694.19 88.97 703.19 R
7 X
V
0 X
N
(1) 78.73 695.68 T
88.96 694.19 104.93 703.19 R
7 X
V
0 X
N
(2) 94.7 695.68 T
119.1 694.19 135.06 703.19 R
5 X
V
0 X
N
(4) 124.83 695.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135.06 694.19 151.03 703.19 R
5 X
V
0 X
N
(5) 140.8 695.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
151.03 694.19 167 703.19 R
V
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(6) 156.76 695.68 T
0 0 0 1 0 0 0 K
167 694.19 182.96 703.19 R
0 X
0 0 0 1 0 0 0 K
V
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(7) 172.73 695.68 T
0 0 0 1 0 0 0 K
182.96 694.19 198.93 703.19 R
0 0 0 1 0 0 0 K
V
0 X
N
(8) 188.7 695.68 T
198.93 694.19 214.89 703.19 R
7 X
V
0 X
N
(9) 204.66 695.68 T
214.89 694.19 230.86 703.19 R
7 X
V
0 X
N
(10) 218.38 695.68 T
230.86 694.19 246.83 703.19 R
5 X
V
0 X
N
(1) 234.59 695.68 T
(1) 238.6 695.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
246.83 694.19 262.79 703.19 R
V
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(12) 250.31 695.68 T
0 0 0 1 0 0 0 K
262.79 694.19 278.76 703.19 R
0 X
0 0 0 1 0 0 0 K
V
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(13) 266.27 695.68 T
0 0 0 1 0 0 0 K
73 621.94 88.97 630.94 R
0 0 0 1 0 0 0 K
V
0 X
N
(1) 78.73 623.43 T
88.96 621.94 104.93 630.94 R
7 X
V
0 X
N
(2) 94.7 623.43 T
167 621.94 182.96 630.94 R
5 X
V
0 X
N
(4) 172.73 623.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
182.96 621.94 198.93 630.94 R
5 X
V
0 X
N
(5) 188.7 623.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
214.89 621.94 230.86 630.94 R
V
3 X
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(6) 220.63 623.43 T
0 0 0 1 0 0 0 K
230.86 621.94 246.83 630.94 R
0 X
0 0 0 1 0 0 0 K
V
3 X
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(7) 236.59 623.43 T
0 0 0 1 0 0 0 K
151.03 621.94 167 630.94 R
0 0 0 1 0 0 0 K
V
0 X
N
(8) 156.76 623.43 T
119.1 621.94 135.06 630.94 R
7 X
V
0 X
N
(9) 124.83 623.43 T
135.06 621.94 151.03 630.94 R
7 X
V
0 X
N
(10) 138.55 623.43 T
198.93 621.94 214.89 630.94 R
5 X
V
0 X
N
(1) 202.66 623.43 T
(1) 206.66 623.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
246.83 621.94 262.79 630.94 R
V
4 X
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(12) 250.31 623.43 T
0 0 0 1 0 0 0 K
262.79 621.94 278.76 630.94 R
0 X
0 0 0 1 0 0 0 K
V
4 X
N
0 0 0 0 1 1 1 K
7 X
0 0 0 0 1 1 1 K
(13) 266.27 623.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
57.03 622.2 73 631.2 R
0 0 0 1 0 0 0 K
V
0 X
N
(0) 62.77 623.68 T
57.03 649.2 104.93 658.2 R
7 X
V
N
57.03 658.19 118.68 667.19 R
V
0 X
N
119.1 658.19 167 667.19 R
7 X
V
0 X
N
167 658.19 198.93 667.19 R
5 X
V
0 X
N
198.93 658.19 214.89 667.19 R
5 X
V
0 X
N
214.89 658.19 246.83 667.19 R
V
3 X
N
246.83 658.19 278.76 667.19 R
0 X
V
3 X
N
83.98 672.39 80.98 667.19 77.98 672.39 80.98 672.39 4 Y
0 X
V
80.98 694.19 80.98 672.39 2 L
N
179.91 672.36 182.96 667.2 176.96 667.13 178.43 669.75 4 Y
V
135.06 694.19 178.44 669.75 2 L
N
227.24 671.98 230.86 667.2 224.9 666.46 226.07 669.22 4 Y
V
167 694.19 226.07 669.22 2 L
N
149 666.46 143.05 667.2 146.66 671.98 147.83 669.22 4 Y
V
206.91 694.19 147.83 669.22 2 L
N
212.81 668.26 206.91 667.2 208.94 672.84 210.88 670.55 4 Y
V
238.84 694.19 210.88 670.55 2 L
N
265.79 672.39 262.79 667.19 259.79 672.39 262.79 672.39 4 Y
V
262.79 694.19 262.79 672.39 2 L
N
156.98 636.84 159.01 631.2 153.11 632.26 155.04 634.55 4 Y
V
127.08 658.2 155.04 634.55 2 L
V
N
132.31 634.14 127.08 631.2 127.14 637.2 129.72 635.67 4 Y
V
143.05 658.2 129.73 635.67 2 L
N
148.27 634.14 143.04 631.2 143.11 637.2 145.69 635.67 4 Y
V
159.01 658.2 145.69 635.67 2 L
N
4 F
(Address Space) 57.03 712.19 T
(Coloring Order) 59.68 600.45 T
163.11 718.53 168.3 715.53 163.11 712.53 163.11 715.53 4 Y
V
120.4 715.53 163.11 715.53 2 L
N
183.74 604.03 188.94 601.03 183.74 598.03 183.74 601.03 4 Y
V
141.04 601.03 183.74 601.03 2 L
N
56.54 727.36 72.51 736.36 R
N
(CPU 0) 78.69 729.8 T
128.39 727.36 144.35 736.36 R
5 X
V
0 X
N
(CPU 0&1) 150.54 729.8 T
204.69 727.36 220.65 736.36 R
V
N
(CPU 1) 226.84 729.8 T
1 F
(\050a\051) 282.17 697.25 T
(\050b\051) 281.67 660.25 T
(\050c\051) 280.67 623.61 T
0 F
(0) 63 610.5 T
(1) 78 610.5 T
(2) 95.58 610.5 T
(3) 109.83 610.5 T
(0) 126.42 610.5 T
(1) 141.42 610.5 T
(2) 159 610.5 T
(3) 173.67 610.5 T
(0) 189.42 610.5 T
(1) 204.42 610.5 T
(2) 222 610.5 T
(3) 236.67 610.5 T
(0) 253.67 610.5 T
1 F
(\050d\051) 279.83 611.25 T
105.3 694.11 121.27 703.11 R
7 X
V
0 X
N
0 F
(3) 111.03 695.6 T
104.55 621.94 120.52 630.94 R
7 X
V
0 X
N
(3) 110.28 623.43 T
(1) 269.08 611.25 T
121.6 705.5 121.6 689 2 L
N
151.1 706 151.1 689.5 2 L
N
183.6 706.5 183.6 690 2 L
N
231.1 706.5 231.1 690 2 L
N
247.1 707 247.1 690.5 2 L
N
167.1 671 167.1 654.5 2 L
N
215.6 670.5 215.6 654 2 L
N
54 72 294.12 738 C
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.6 (illustrate this step in Figure) 331.63 733.5 P
0.6 (4\050b\051 where the pages accessed by) 434.79 733.5 P
0.2 (both CPUs are put between the pages accessed by only CPU 0) 331.63 723.5 P
(and only CPU 1.) 331.63 713.5 T
(3.) 317.88 698.5 T
0 F
2.52 (Order the Segments within a Uniform Access Set.) 331.62 698.5 P
1 F
2.52 ( The) 539.23 698.5 P
0.52 (second step lays out the segments within each uniform access) 331.63 688.5 P
0.71 (set. T) 331.63 678.5 P
0.71 (o increase locality) 351.71 678.5 P
0.71 (, we use the group access information) 418.03 678.5 P
0.94 (supplied by the compiler to put arrays used together close to) 331.63 668.5 P
1.09 (each other) 331.63 658.5 P
1.09 (. Again, we represent the segments as nodes in an) 369.46 658.5 P
4.42 (undirected graph, and edges are inserted whenever the) 331.63 648.5 P
2.02 (compiler speci\336es that they are used together in the group) 331.63 638.5 P
0.1 (access information. The objective is the same as in Step 1, and) 331.63 628.5 P
2.78 (that is to include as many edges in the graph in a path) 331.63 618.5 P
2.02 (connecting all the nodes together) 331.63 608.5 P
2.02 (. The segments are sorted) 458.19 608.5 P
1.51 (according to their order in the path. W) 331.63 598.5 P
1.51 (e again use a simple) 479.47 598.5 P
0.07 (greedy algorithm that starts with an arbitrary node and extends) 331.63 588.5 P
1.15 (the path by choosing an adjacent node that has not yet been) 331.63 578.5 P
0.29 (visited whenever possible. If there is a choice, we simply pick) 331.63 568.5 P
0.52 (the segment with the smallest virtual address. In the example,) 331.63 558.5 P
2.41 (each set contains only two segments \050one from each data) 331.63 548.5 P
(structure\051 that are trivially ordered.) 331.63 538.5 T
(4.) 317.88 523.5 T
0 F
0.21 (Order the Pages within a Uniform Access Segment.) 331.62 523.5 P
1 F
0.21 (Instead) 532.01 523.5 P
-0.11 (of laying down the pages within a segment in ascending virtual) 331.63 513.5 P
0.32 (address order) 331.63 503.5 P
0.32 (, we use a cyclic assignment strategy) 379.82 503.5 P
0.32 (. W) 513.85 503.5 P
0.32 (e choose) 526.45 503.5 P
1.28 (a starting point within the segment and lay out the pages in) 331.63 493.5 P
0.2 (ascending order up to the segment boundary) 331.63 483.5 P
0.2 (. At that point, the) 491.71 483.5 P
1.2 (pages are wrapped around and placed in the \336rst part of the) 331.63 473.5 P
1.87 (segment. The starting points are chosen so as to space out) 331.63 463.5 P
2 F
1.02 (con\337icting) 331.63 453.5 P
1 F
1.02 ( segments as much as possible across the range of) 369.63 453.5 P
0.73 (possible colors. T) 331.63 443.5 P
0.73 (wo segments may cause a con\337ict when \0501\051) 396.2 443.5 P
1.99 (the two arrays are used together in the same loop, \0502\051 the) 331.63 433.5 P
0.74 (intersection of the processor sets of the two segments is non-) 331.63 423.5 P
0.05 (empty) 331.63 413.5 P
0.05 (, and \0503\051 the two segments partially overlap in the cache.) 353.55 413.5 P
0.3 (W) 331.63 403.5 P
0.3 (e illustrate this step in Figure) 339.41 403.5 P
0.3 (4 \050c\051 where the pages 8, 9 and) 447.92 403.5 P
0.72 (10 are cyclically assigned to avoid such a con\337ict on CPU 0.) 331.63 393.5 P
-0.13 (The starting pages of the two data structures \050pages 0 and 8\051 no) 331.63 383.5 P
(longer have the same color) 331.63 373.5 T
(.) 428.11 373.5 T
(5.) 317.88 358.5 T
0 F
0.84 (Assign Colors to the Pages.) 331.62 358.5 P
1 F
0.84 ( At this point, the algorithm has) 438.72 358.5 P
-0.18 (sorted the virtual pages. Individual pages are assigned colors in) 331.63 348.5 P
(a round robin order) 331.63 338.5 T
(, as shown in Figure) 401 338.5 T
(4 \050d\051.) 476 338.5 T
0.33 (Figure) 317.88 323.5 P
0.33 (5 shows the impact of this reordering on the locality of the) 343.63 323.5 P
2.07 (access patterns. By comparison with Figure) 317.88 313.5 P
2.07 (3, we see that the) 487.47 313.5 P
(access patterns are signi\336cantly denser) 317.88 303.5 T
(.) 456.85 303.5 T
0 11 Q
(5.3  Implementing Page Coloring Hints) 317.88 286.17 T
1 9 Q
1.47 (The interface to the operating system consists of a sequence of) 317.88 269.5 P
0.05 (virtual pages with their associated preferred color) 317.88 259.5 P
0.05 (. Applications do) 496.15 259.5 P
3.3 (not request particular pages of memory) 317.88 249.5 P
3.3 (, but only suggest a) 475.03 249.5 P
0.14 (particular coloring for a range of pages. The information is treated) 317.88 239.5 P
(as a hint by the operating system.) 317.88 229.5 T
0.87 (In IRIX 5.3, we implemented this mechanism as an extension of) 317.88 214.5 P
2.76 (the) 317.88 204.5 P
5 F
6.63 (madvise) 333.89 204.5 P
1 F
2.76 ( system call. The page mapping information is) 371.69 204.5 P
0.26 (stored in a table that is accessed by the virtual memory subsystem) 317.88 194.5 P
0.9 (during page faults. If no mapping has been de\336ned for the page,) 317.88 184.5 P
0.46 (the virtual memory manager uses IRIX 5.3\325) 317.88 174.5 P
0.46 (s native page coloring) 477.38 174.5 P
2.92 (policy to determine a preferred color) 317.88 164.5 P
2.92 (. In both cases, a page) 464.18 164.5 P
1.16 (allocation request is passed on to the physical memory manager) 317.88 154.5 P
(that ultimately chooses a free page, thereby determining its color) 317.88 144.5 T
(.) 550.84 144.5 T
0.78 (W) 317.88 129.5 P
0.78 (ith Digital UNIX, we take advantage of the operating system\325) 326.02 129.5 P
0.78 (s) 554.5 129.5 P
1.99 (bin-hopping policy to selectively touch the pages in a speci\336c) 317.88 119.5 P
1.58 (order that will generate the desired mapping. The advantage of) 317.88 109.5 P
0.58 (such a scheme over a kernel implementation is that it requires no) 317.88 99.5 P
2.49 (operating system modi\336cation. One drawback is that all page) 317.88 89.5 P
1.18 (faults are serialized at the beginning of the application. Another) 317.88 79.5 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
4.33 (drawback of the implementation is the delay between the) 54 255.88 P
1.14 (initialization of the page, done by the operating system at page-) 54 245.88 P
-0.06 (fault time, and the \336rst ef) 54 235.88 P
-0.06 (fective use of the page by the application.) 144.55 235.88 P
1.4 (In the absence of delay) 54 225.88 P
1.4 (, the application bene\336ts from the likely) 141.98 225.88 P
(presence of the page in the cache, due to the kernel\325) 54 215.88 T
(s initialization.) 240.19 215.88 T
0 11 Q
(5.4  Aligning Data Structur) 54 198.55 T
(es) 181.83 198.55 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
-0.05 (Page mapping policies are only ef) 54 181.88 P
-0.05 (fective at eliminating con\337icts in) 175.82 181.88 P
0.24 (physically indexed caches, not in the virtually indexed caches that) 54 171.88 P
2.36 (are usually found on-chip. Page mapping policies also cannot) 54 161.88 P
2.85 (reduce the number of communication misses suf) 54 151.88 P
2.85 (fered by the) 245.43 151.88 P
-0.19 (application. However) 54 141.88 P
-0.19 (, a simple policy that aligns all data structures) 130.93 141.88 P
0.92 (to start on a cache line boundary is ef) 54 131.88 P
0.92 (fective at eliminating false) 195.64 131.88 P
4.77 (sharing problems between data structures and within data) 54 121.88 P
0.02 (structures when each processor operates on a multiple of the cache) 54 111.88 P
1.82 (line size. In our current implementation, all data structures are) 54 101.88 P
0.74 (dynamically allocated and aligned at start-up time. Such a policy) 54 91.88 P
(could also be implemented at link time.) 54 81.88 T
54 559.8 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 46 41 216 150 170 109 53 627 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/swim-phys.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 46 41 216 150
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
81.5651 84 S9
[] 1.200000 SL
81.6025 84 M9
D9
164.774 84 S9
165.26 84 M9
D9
165.297 84 S9
172.583 84 M9
D9
173.144 84 S9
173.629 84 M9
D9
177.59 84 S9
177.627 84 M9
D9
178.711 84 S9
178.748 84 M9
D9
179.271 84 S9
179.309 84 M9
D9
179.832 84 S9
179.869 84 M9
D9
180.392 84 S9
180.43 84 M9
D9
207.705 84 S9
207.743 84 M9
D9
208.303 84 S9
208.34 84 M9
D9
208.901 84 S9
208.938 84 M9
D9
209.499 84 S9
209.536 84 M9
D9
210.097 84 S9
210.134 84 M9
D9
210.694 84 S9
210.732 84 M9
D9
215.552 84 S9
216.037 84 M9
D9
81.5651 88 S9
81.6025 88 M9
D9
156.405 88 S9
156.891 88 M9
D9
156.928 88 S9
164.214 88 M9
D9
164.774 88 S9
165.26 88 M9
D9
169.221 88 S9
169.258 88 M9
D9
170.341 88 S9
170.379 88 M9
D9
170.902 88 S9
170.939 88 M9
D9
171.462 88 S9
171.5 88 M9
D9
172.023 88 S9
172.06 88 M9
D9
207.705 88 S9
207.743 88 M9
D9
208.303 88 S9
208.34 88 M9
D9
208.901 88 S9
208.938 88 M9
D9
209.499 88 S9
209.536 88 M9
D9
210.097 88 S9
210.134 88 M9
D9
210.694 88 S9
210.732 88 M9
D9
211.292 88 S9
211.33 88 M9
D9
215.552 88 S9
216.037 88 M9
D9
81.5651 92 S9
81.6025 92 M9
D9
148.035 92 S9
148.521 92 M9
D9
148.558 92 S9
155.844 92 M9
D9
156.405 92 S9
156.891 92 M9
D9
161.972 92 S9
162.009 92 M9
D9
162.532 92 S9
162.57 92 M9
D9
163.093 92 S9
163.13 92 M9
D9
163.653 92 S9
163.691 92 M9
D9
207.705 92 S9
207.743 92 M9
D9
208.303 92 S9
208.34 92 M9
D9
208.901 92 S9
208.938 92 M9
D9
209.499 92 S9
209.536 92 M9
D9
210.097 92 S9
210.134 92 M9
D9
210.694 92 S9
210.732 92 M9
D9
211.292 92 S9
211.33 92 M9
D9
211.89 92 S9
211.927 92 M9
D9
215.552 92 S9
216.037 92 M9
D9
81.5651 96 S9
81.6025 96 M9
D9
139.666 96 S9
140.152 96 M9
D9
140.189 96 S9
147.475 96 M9
D9
148.035 96 S9
148.521 96 M9
D9
153.602 96 S9
153.64 96 M9
D9
154.163 96 S9
154.2 96 M9
D9
154.723 96 S9
154.761 96 M9
D9
155.284 96 S9
155.321 96 M9
D9
207.705 96 S9
207.743 96 M9
D9
208.303 96 S9
208.34 96 M9
D9
208.901 96 S9
208.938 96 M9
D9
209.499 96 S9
209.536 96 M9
D9
210.097 96 S9
210.134 96 M9
D9
210.694 96 S9
210.732 96 M9
D9
211.292 96 S9
211.33 96 M9
D9
211.89 96 S9
211.927 96 M9
D9
212.488 96 S9
212.525 96 M9
D9
215.552 96 S9
216.037 96 M9
D9
81.5651 100 S9
81.6025 100 M9
D9
131.296 100 S9
131.782 100 M9
D9
131.819 100 S9
139.105 100 M9
D9
139.666 100 S9
140.152 100 M9
D9
145.233 100 S9
145.27 100 M9
D9
145.793 100 S9
145.831 100 M9
D9
146.354 100 S9
146.391 100 M9
D9
146.914 100 S9
146.952 100 M9
D9
207.705 100 S9
207.743 100 M9
D9
208.303 100 S9
208.34 100 M9
D9
208.901 100 S9
208.938 100 M9
D9
209.499 100 S9
209.536 100 M9
D9
210.097 100 S9
210.134 100 M9
D9
210.694 100 S9
210.732 100 M9
D9
211.292 100 S9
211.33 100 M9
D9
211.89 100 S9
211.927 100 M9
D9
212.488 100 S9
212.525 100 M9
D9
213.086 100 S9
213.123 100 M9
D9
215.552 100 S9
216.037 100 M9
D9
81.5651 104 S9
81.6025 104 M9
D9
122.927 104 S9
123.413 104 M9
D9
123.45 104 S9
130.736 104 M9
D9
131.296 104 S9
131.782 104 M9
D9
137.424 104 S9
137.461 104 M9
D9
137.984 104 S9
138.022 104 M9
D9
138.545 104 S9
138.582 104 M9
D9
207.705 104 S9
207.743 104 M9
D9
208.303 104 S9
208.34 104 M9
D9
208.901 104 S9
208.938 104 M9
D9
209.499 104 S9
209.536 104 M9
D9
210.097 104 S9
210.134 104 M9
D9
210.694 104 S9
210.732 104 M9
D9
211.292 104 S9
211.33 104 M9
D9
211.89 104 S9
211.927 104 M9
D9
212.488 104 S9
212.525 104 M9
D9
213.086 104 S9
213.123 104 M9
D9
213.683 104 S9
213.721 104 M9
D9
215.552 104 S9
216.037 104 M9
D9
81.5651 108 S9
81.6025 108 M9
D9
114.557 108 S9
115.043 108 M9
D9
115.08 108 S9
122.366 108 M9
D9
122.927 108 S9
123.413 108 M9
D9
129.615 108 S9
129.652 108 M9
D9
130.175 108 S9
130.213 108 M9
D9
207.705 108 S9
207.743 108 M9
D9
208.303 108 S9
208.34 108 M9
D9
208.901 108 S9
208.938 108 M9
D9
209.499 108 S9
209.536 108 M9
D9
210.097 108 S9
210.134 108 M9
D9
210.694 108 S9
210.732 108 M9
D9
211.292 108 S9
211.33 108 M9
D9
211.89 108 S9
211.927 108 M9
D9
212.488 108 S9
212.525 108 M9
D9
213.086 108 S9
213.123 108 M9
D9
213.683 108 S9
213.721 108 M9
D9
214.281 108 S9
214.319 108 M9
D9
215.552 108 S9
216.037 108 M9
D9
81.5651 112 S9
81.6025 112 M9
D9
106.188 112 S9
106.674 112 M9
D9
106.711 112 S9
113.997 112 M9
D9
114.557 112 S9
115.043 112 M9
D9
207.705 112 S9
207.743 112 M9
D9
208.303 112 S9
208.34 112 M9
D9
208.901 112 S9
208.938 112 M9
D9
209.499 112 S9
209.536 112 M9
D9
210.097 112 S9
210.134 112 M9
D9
210.694 112 S9
210.732 112 M9
D9
211.292 112 S9
211.33 112 M9
D9
211.89 112 S9
211.927 112 M9
D9
212.488 112 S9
212.525 112 M9
D9
213.086 112 S9
213.123 112 M9
D9
213.683 112 S9
213.721 112 M9
D9
214.281 112 S9
214.319 112 M9
D9
214.879 112 S9
214.916 112 M9
D9
215.552 112 S9
216 112 M9
D9
81.5651 116 S9
81.6025 116 M9
D9
97.8184 116 S9
98.3041 116 M9
D9
98.3415 116 S9
105.627 116 M9
D9
106.188 116 S9
106.674 116 M9
D9
207.705 116 S9
207.743 116 M9
D9
208.303 116 S9
208.34 116 M9
D9
208.901 116 S9
208.938 116 M9
D9
209.499 116 S9
209.536 116 M9
D9
210.097 116 S9
210.134 116 M9
D9
210.694 116 S9
210.732 116 M9
D9
211.292 116 S9
211.33 116 M9
D9
211.89 116 S9
211.927 116 M9
D9
212.488 116 S9
212.525 116 M9
D9
213.086 116 S9
213.123 116 M9
D9
213.683 116 S9
213.721 116 M9
D9
214.281 116 S9
214.319 116 M9
D9
214.879 116 S9
214.916 116 M9
D9
215.552 116 S9
216 116 M9
D9
81.5651 120 S9
81.6025 120 M9
D9
89.4489 120 S9
89.9346 120 M9
D9
89.972 120 S9
97.2579 120 M9
D9
97.8184 120 S9
98.3041 120 M9
D9
207.705 120 S9
207.743 120 M9
D9
208.303 120 S9
208.34 120 M9
D9
208.901 120 S9
208.938 120 M9
D9
209.499 120 S9
209.536 120 M9
D9
210.097 120 S9
210.134 120 M9
D9
210.694 120 S9
210.732 120 M9
D9
211.292 120 S9
211.33 120 M9
D9
211.89 120 S9
211.927 120 M9
D9
212.488 120 S9
212.525 120 M9
D9
213.086 120 S9
213.123 120 M9
D9
213.683 120 S9
213.721 120 M9
D9
214.281 120 S9
214.319 120 M9
D9
214.879 120 S9
214.916 120 M9
D9
215.552 120 S9
216 120 M9
D9
81.5651 124 S9
88.8884 124 M9
D9
89.4489 124 S9
89.9346 124 M9
D9
207.705 124 S9
207.743 124 M9
D9
208.303 124 S9
208.34 124 M9
D9
208.901 124 S9
208.938 124 M9
D9
209.499 124 S9
209.536 124 M9
D9
210.097 124 S9
210.134 124 M9
D9
210.694 124 S9
210.732 124 M9
D9
211.292 124 S9
211.33 124 M9
D9
211.89 124 S9
211.927 124 M9
D9
212.488 124 S9
212.525 124 M9
D9
213.086 124 S9
213.123 124 M9
D9
213.683 124 S9
213.721 124 M9
D9
214.281 124 S9
214.319 124 M9
D9
214.879 124 S9
214.916 124 M9
D9
215.552 124 S9
216.037 124 M9
D9
81.5651 128 S9
81.6025 128 M9
D9
206.622 128 S9
207.107 128 M9
D9
207.145 128 S9
214.916 128 M9
D9
215.552 128 S9
216.037 128 M9
D9
81.5651 132 S9
81.6025 132 M9
D9
198.252 132 S9
198.738 132 M9
D9
198.775 132 S9
206.061 132 M9
D9
206.622 132 S9
207.107 132 M9
D9
207.705 132 S9
207.78 132 M9
D9
208.303 132 S9
208.378 132 M9
D9
209.536 132 S9
209.573 132 M9
D9
211.33 132 S9
211.367 132 M9
D9
212.525 132 S9
212.563 132 M9
D9
213.123 132 S9
213.16 132 M9
D9
213.721 132 S9
213.758 132 M9
D9
214.319 132 S9
214.356 132 M9
D9
215.552 132 S9
216.037 132 M9
D9
81.5651 136 S9
81.6025 136 M9
D9
189.883 136 S9
190.368 136 M9
D9
190.406 136 S9
197.692 136 M9
D9
198.252 136 S9
198.738 136 M9
D9
199.896 136 S9
199.934 136 M9
D9
201.017 136 S9
201.054 136 M9
D9
202.698 136 S9
202.736 136 M9
D9
203.819 136 S9
203.857 136 M9
D9
204.38 136 S9
204.417 136 M9
D9
204.94 136 S9
204.978 136 M9
D9
205.501 136 S9
205.538 136 M9
D9
207.705 136 S9
207.743 136 M9
D9
208.303 136 S9
208.34 136 M9
D9
208.901 136 S9
208.938 136 M9
D9
215.552 136 S9
216.037 136 M9
D9
81.5651 140 S9
81.6025 140 M9
D9
181.513 140 S9
181.999 140 M9
D9
182.036 140 S9
189.322 140 M9
D9
189.883 140 S9
190.368 140 M9
D9
192.648 140 S9
192.685 140 M9
D9
194.329 140 S9
194.366 140 M9
D9
195.45 140 S9
195.487 140 M9
D9
196.01 140 S9
196.048 140 M9
D9
196.571 140 S9
196.608 140 M9
D9
197.131 140 S9
197.169 140 M9
D9
207.705 140 S9
207.743 140 M9
D9
208.303 140 S9
208.34 140 M9
D9
208.901 140 S9
208.938 140 M9
D9
209.499 140 S9
209.536 140 M9
D9
215.552 140 S9
216.037 140 M9
D9
12 /Helvetica SetTxt
(|) 0 72 72 TXC
(|) 0 81.5651 72 TXC
(|) 0 91.1303 72 TXC
(|) 0 100.695 72 TXC
(|) 0 110.261 72 TXC
(|) 0 119.826 72 TXC
(|) 0 129.391 72 TXC
(|) 0 138.956 72 TXC
(|) 0 148.521 72 TXC
(|) 0 158.086 72 TXC
(|) 0 167.651 72 TXC
(|) 0 177.216 72 TXC
(|) 0 186.782 72 TXC
(|) 0 196.347 72 TXC
(|) 0 205.912 72 TXC
(|) 0 215.477 72 TXC
6 /Helvetica SetTxt
(|) -90 72 72 TXC
(|) -90 72 80 TXC
(|) -90 72 88 TXC
(|) -90 72 96 TXC
(|) -90 72 104 TXC
(|) -90 72 112 TXC
(|) -90 72 120 TXC
(|) -90 72 128 TXC
(|) -90 72 136 TXC
(|) -90 72 144 TXC
7 /Helvetica SetTxt
() 0 144 41.2 TXC
[] 0.400000 SL
2 setlinecap
72 72 216 72 
L9
0 setlinecap
72 72 72 144 
L9
( Coloring order (swim)) 0 216 55.75 TXR
( Processors ) 90 53.7 144 TXR
4 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 46 41 216 150 170 109 383 626 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/hydro-phys.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 46 41 216 150
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
87.2963 84 S9
[] 1.200000 SL
87.356 84 M9
D9
87.7145 84 S9
87.7743 84 M9
D9
88.1328 84 S9
88.2523 84 M9
D9
88.551 84 S9
88.6108 84 M9
D9
88.9693 84 S9
89.029 84 M9
D9
89.3278 84 S9
89.3876 84 M9
D9
89.7461 84 S9
89.8058 84 M9
D9
90.1643 84 S9
90.2241 84 M9
D9
91.0008 84 S9
91.0606 84 M9
D9
92.7336 84 S9
92.7934 84 M9
D9
93.0921 84 S9
93.1519 84 M9
D9
93.3909 84 S9
93.4506 84 M9
D9
95.3627 84 S9
95.4224 84 M9
D9
95.7809 84 S9
95.8407 84 M9
D9
96.1992 84 S9
96.2589 84 M9
D9
96.5577 84 S9
96.6174 84 M9
D9
97.0357 84 S9
97.0954 84 M9
D9
97.4539 84 S9
97.5137 84 M9
D9
97.8124 84 S9
97.8722 84 M9
D9
98.171 84 S9
98.2307 84 M9
D9
102.652 84 S9
102.772 84 M9
D9
108.149 84 S9
108.508 84 M9
D9
110.121 84 S9
110.181 84 M9
D9
156.488 84 S9
156.548 84 M9
D9
156.906 84 S9
156.966 84 M9
D9
157.324 84 S9
157.384 84 M9
D9
158.101 84 S9
158.161 84 M9
D9
158.52 84 S9
158.579 84 M9
D9
159.237 84 S9
159.296 84 M9
D9
159.655 84 S9
159.715 84 M9
D9
160.013 84 S9
160.133 84 M9
D9
160.372 84 S9
160.432 84 M9
D9
160.73 84 S9
160.79 84 M9
D9
161.866 84 S9
161.925 84 M9
D9
162.224 84 S9
162.284 84 M9
D9
162.523 84 S9
172.441 84 M9
D9
172.621 84 S9
172.86 84 M9
D9
173.039 84 S9
173.278 84 M9
D9
173.457 84 S9
173.696 84 M9
D9
173.876 84 S9
174.115 84 M9
D9
174.294 84 S9
174.473 84 M9
D9
174.652 84 S9
174.832 84 M9
D9
175.011 84 S9
175.19 84 M9
D9
175.788 84 S9
175.847 84 M9
D9
204.468 84 S9
204.528 84 M9
D9
205.723 84 S9
205.783 84 M9
D9
206.44 84 S9
206.5 84 M9
D9
207.217 84 S9
207.276 84 M9
D9
208.053 84 S9
208.113 84 M9
D9
208.352 84 S9
208.471 84 M9
D9
208.83 84 S9
208.89 84 M9
D9
210.443 84 S9
210.503 84 M9
D9
210.742 84 S9
210.981 84 M9
D9
211.041 84 S9
211.519 84 M9
D9
211.578 84 S9
212.236 84 M9
D9
213.371 84 S9
213.67 84 M9
D9
213.789 84 S9
213.849 84 M9
D9
216 84 S9
216.06 84 M9
D9
87.2963 88 S9
87.356 88 M9
D9
87.7145 88 S9
87.7743 88 M9
D9
88.1328 88 S9
88.2523 88 M9
D9
88.551 88 S9
88.6108 88 M9
D9
88.9693 88 S9
89.029 88 M9
D9
89.3278 88 S9
89.3876 88 M9
D9
89.7461 88 S9
89.8058 88 M9
D9
90.1643 88 S9
90.2241 88 M9
D9
91.0008 88 S9
91.0606 88 M9
D9
92.7336 88 S9
92.7934 88 M9
D9
93.0921 88 S9
93.1519 88 M9
D9
93.3909 88 S9
93.4506 88 M9
D9
93.7494 88 S9
93.8091 88 M9
D9
94.0481 88 S9
94.1079 88 M9
D9
94.1676 88 S9
94.2274 88 M9
D9
94.8846 88 S9
95.0041 88 M9
D9
95.3627 88 S9
95.4224 88 M9
D9
96.1394 88 S9
96.1992 88 M9
D9
96.5577 88 S9
96.6174 88 M9
D9
96.9759 88 S9
97.0357 88 M9
D9
97.3942 88 S9
97.4539 88 M9
D9
100.441 88 S9
100.8 88 M9
D9
102.652 88 S9
102.712 88 M9
D9
148.422 88 S9
148.481 88 M9
D9
149.258 88 S9
149.318 88 M9
D9
149.676 88 S9
149.736 88 M9
D9
150.095 88 S9
150.154 88 M9
D9
150.513 88 S9
150.573 88 M9
D9
151.23 88 S9
151.29 88 M9
D9
151.648 88 S9
151.708 88 M9
D9
152.007 88 S9
152.126 88 M9
D9
152.365 88 S9
152.425 88 M9
D9
152.724 88 S9
152.783 88 M9
D9
153.919 88 S9
153.978 88 M9
D9
154.217 88 S9
154.277 88 M9
D9
154.516 88 S9
164.375 88 M9
D9
164.495 88 S9
164.793 88 M9
D9
164.913 88 S9
165.212 88 M9
D9
165.331 88 S9
165.63 88 M9
D9
165.749 88 S9
166.048 88 M9
D9
166.168 88 S9
166.407 88 M9
D9
166.586 88 S9
166.825 88 M9
D9
166.944 88 S9
167.183 88 M9
D9
167.721 88 S9
167.781 88 M9
D9
204.468 88 S9
204.528 88 M9
D9
205.723 88 S9
205.783 88 M9
D9
206.44 88 S9
206.5 88 M9
D9
207.217 88 S9
207.276 88 M9
D9
208.053 88 S9
208.113 88 M9
D9
208.352 88 S9
208.471 88 M9
D9
208.83 88 S9
208.89 88 M9
D9
210.443 88 S9
210.503 88 M9
D9
210.742 88 S9
210.981 88 M9
D9
211.041 88 S9
211.519 88 M9
D9
211.578 88 S9
212.236 88 M9
D9
213.371 88 S9
213.67 88 M9
D9
216 88 S9
216.06 88 M9
D9
87.2963 92 S9
87.356 92 M9
D9
87.7145 92 S9
87.7743 92 M9
D9
88.1328 92 S9
88.2523 92 M9
D9
88.551 92 S9
88.6108 92 M9
D9
88.9693 92 S9
89.029 92 M9
D9
89.3278 92 S9
89.3876 92 M9
D9
89.7461 92 S9
89.8058 92 M9
D9
90.1643 92 S9
90.2241 92 M9
D9
91.0008 92 S9
91.0606 92 M9
D9
92.7336 92 S9
93.1519 92 M9
D9
93.3909 92 S9
93.4506 92 M9
D9
93.6896 92 S9
94.1676 92 M9
D9
94.8846 92 S9
94.9444 92 M9
D9
141.072 92 S9
141.132 92 M9
D9
141.849 92 S9
141.909 92 M9
D9
142.267 92 S9
142.327 92 M9
D9
142.984 92 S9
143.044 92 M9
D9
143.343 92 S9
143.402 92 M9
D9
143.701 92 S9
143.761 92 M9
D9
144.478 92 S9
144.538 92 M9
D9
144.837 92 S9
144.896 92 M9
D9
145.195 92 S9
145.255 92 M9
D9
146.629 92 S9
156.428 92 M9
D9
156.548 92 S9
156.906 92 M9
D9
156.966 92 S9
157.265 92 M9
D9
157.384 92 S9
157.683 92 M9
D9
157.743 92 S9
158.101 92 M9
D9
158.161 92 S9
158.46 92 M9
D9
158.579 92 S9
158.878 92 M9
D9
158.938 92 S9
159.237 92 M9
D9
159.715 92 S9
159.774 92 M9
D9
160.432 92 S9
160.491 92 M9
D9
204.468 92 S9
204.528 92 M9
D9
205.723 92 S9
205.783 92 M9
D9
206.44 92 S9
206.5 92 M9
D9
207.217 92 S9
207.276 92 M9
D9
208.053 92 S9
208.113 92 M9
D9
208.352 92 S9
208.471 92 M9
D9
208.83 92 S9
208.89 92 M9
D9
210.443 92 S9
210.503 92 M9
D9
210.742 92 S9
210.981 92 M9
D9
211.041 92 S9
212.236 92 M9
D9
213.371 92 S9
213.67 92 M9
D9
214.984 92 S9
215.044 92 M9
D9
216 92 S9
216.06 92 M9
D9
87.2963 96 S9
87.356 96 M9
D9
87.595 96 S9
87.7743 96 M9
D9
88.0133 96 S9
88.1925 96 M9
D9
88.4913 96 S9
88.6108 96 M9
D9
88.8498 96 S9
89.029 96 M9
D9
89.268 96 S9
89.3876 96 M9
D9
89.6266 96 S9
89.8058 96 M9
D9
90.0448 96 S9
90.2241 96 M9
D9
90.4631 96 S9
90.5228 96 M9
D9
91.0008 96 S9
91.0606 96 M9
D9
92.7336 96 S9
92.7934 96 M9
D9
93.3909 96 S9
93.4506 96 M9
D9
93.9286 96 S9
93.9884 96 M9
D9
133.544 96 S9
133.603 96 M9
D9
133.962 96 S9
134.022 96 M9
D9
134.38 96 S9
134.44 96 M9
D9
134.798 96 S9
134.858 96 M9
D9
135.515 96 S9
135.575 96 M9
D9
135.874 96 S9
135.934 96 M9
D9
136.89 96 S9
136.949 96 M9
D9
137.248 96 S9
137.308 96 M9
D9
137.607 96 S9
137.666 96 M9
D9
139.1 96 S9
151.29 96 M9
D9
151.708 96 S9
151.768 96 M9
D9
152.425 96 S9
152.485 96 M9
D9
153.62 96 S9
153.68 96 M9
D9
154.636 96 S9
154.695 96 M9
D9
154.934 96 S9
154.994 96 M9
D9
203.572 96 S9
203.632 96 M9
D9
204.468 96 S9
204.528 96 M9
D9
205.305 96 S9
205.364 96 M9
D9
205.723 96 S9
205.783 96 M9
D9
206.44 96 S9
206.5 96 M9
D9
207.217 96 S9
207.276 96 M9
D9
207.993 96 S9
208.113 96 M9
D9
208.352 96 S9
208.471 96 M9
D9
208.83 96 S9
208.89 96 M9
D9
209.427 96 S9
209.846 96 M9
D9
210.443 96 S9
210.503 96 M9
D9
210.742 96 S9
210.981 96 M9
D9
211.041 96 S9
212.594 96 M9
D9
213.371 96 S9
213.67 96 M9
D9
214.984 96 S9
215.104 96 M9
D9
215.761 96 S9
215.821 96 M9
D9
216 96 S9
216.06 96 M9
D9
87.2963 100 S9
87.356 100 M9
D9
87.595 100 S9
87.6548 100 M9
D9
87.7145 100 S9
87.7743 100 M9
D9
87.9535 100 S9
88.0133 100 M9
D9
88.1328 100 S9
88.1925 100 M9
D9
88.4315 100 S9
88.4913 100 M9
D9
88.551 100 S9
88.6108 100 M9
D9
88.79 100 S9
88.8498 100 M9
D9
88.9693 100 S9
89.029 100 M9
D9
89.2083 100 S9
89.268 100 M9
D9
89.3278 100 S9
89.3876 100 M9
D9
89.6266 100 S9
89.6863 100 M9
D9
89.7461 100 S9
89.8058 100 M9
D9
89.9851 100 S9
90.0448 100 M9
D9
90.1643 100 S9
90.2241 100 M9
D9
90.4033 100 S9
90.4631 100 M9
D9
91.0008 100 S9
91.0606 100 M9
D9
92.7336 100 S9
92.7934 100 M9
D9
93.3909 100 S9
93.4506 100 M9
D9
126.075 100 S9
126.134 100 M9
D9
126.493 100 S9
126.553 100 M9
D9
127.27 100 S9
127.329 100 M9
D9
127.688 100 S9
127.748 100 M9
D9
128.046 100 S9
128.106 100 M9
D9
128.405 100 S9
128.465 100 M9
D9
128.763 100 S9
128.823 100 M9
D9
129.182 100 S9
129.241 100 M9
D9
129.54 100 S9
129.6 100 M9
D9
129.899 100 S9
129.959 100 M9
D9
130.257 100 S9
130.317 100 M9
D9
131.632 100 S9
140.714 100 M9
D9
140.773 100 S9
141.49 100 M9
D9
141.55 100 S9
143.761 100 M9
D9
144.12 100 S9
144.179 100 M9
D9
144.896 100 S9
144.956 100 M9
D9
145.673 100 S9
145.733 100 M9
D9
146.629 100 S9
147.107 100 M9
D9
195.744 100 S9
195.804 100 M9
D9
201.002 100 S9
201.421 100 M9
D9
203.572 100 S9
203.632 100 M9
D9
204.468 100 S9
204.528 100 M9
D9
205.305 100 S9
205.364 100 M9
D9
205.723 100 S9
205.783 100 M9
D9
206.44 100 S9
206.5 100 M9
D9
207.217 100 S9
207.276 100 M9
D9
207.993 100 S9
208.113 100 M9
D9
208.352 100 S9
208.471 100 M9
D9
208.83 100 S9
208.89 100 M9
D9
210.443 100 S9
210.503 100 M9
D9
210.742 100 S9
210.981 100 M9
D9
211.041 100 S9
212.236 100 M9
D9
213.072 100 S9
213.311 100 M9
D9
213.371 100 S9
213.67 100 M9
D9
215.163 100 S9
215.402 100 M9
D9
215.761 100 S9
215.821 100 M9
D9
216 100 S9
216.06 100 M9
D9
87.2963 104 S9
87.356 104 M9
D9
87.5353 104 S9
87.595 104 M9
D9
87.7145 104 S9
87.7743 104 M9
D9
87.8938 104 S9
87.9535 104 M9
D9
88.1328 104 S9
88.1925 104 M9
D9
88.3718 104 S9
88.4315 104 M9
D9
88.551 104 S9
88.6108 104 M9
D9
88.79 104 S9
88.8498 104 M9
D9
88.9693 104 S9
89.029 104 M9
D9
89.1485 104 S9
89.2083 104 M9
D9
89.3278 104 S9
89.3876 104 M9
D9
89.5668 104 S9
89.6266 104 M9
D9
89.7461 104 S9
89.8058 104 M9
D9
89.9253 104 S9
89.9851 104 M9
D9
90.3436 104 S9
90.4033 104 M9
D9
91.0008 104 S9
91.0606 104 M9
D9
92.7336 104 S9
92.7934 104 M9
D9
118.964 104 S9
119.024 104 M9
D9
119.383 104 S9
119.442 104 M9
D9
119.801 104 S9
119.861 104 M9
D9
120.219 104 S9
120.279 104 M9
D9
120.936 104 S9
120.996 104 M9
D9
121.295 104 S9
121.354 104 M9
D9
121.713 104 S9
121.773 104 M9
D9
122.43 104 S9
122.49 104 M9
D9
122.788 104 S9
122.848 104 M9
D9
124.163 104 S9
133.185 104 M9
D9
133.245 104 S9
133.603 104 M9
D9
133.663 104 S9
134.022 104 M9
D9
134.141 104 S9
134.44 104 M9
D9
134.5 104 S9
134.858 104 M9
D9
134.918 104 S9
135.217 104 M9
D9
135.276 104 S9
136.232 104 M9
D9
137.308 104 S9
137.368 104 M9
D9
138.085 104 S9
138.144 104 M9
D9
139.1 104 S9
139.817 104 M9
D9
140.714 104 S9
140.773 104 M9
D9
141.49 104 S9
141.55 104 M9
D9
141.909 104 S9
141.968 104 M9
D9
187.618 104 S9
187.678 104 M9
D9
192.996 104 S9
193.414 104 M9
D9
195.744 104 S9
195.804 104 M9
D9
204.468 104 S9
204.528 104 M9
D9
205.305 104 S9
205.364 104 M9
D9
205.723 104 S9
205.783 104 M9
D9
206.44 104 S9
206.5 104 M9
D9
207.157 104 S9
207.276 104 M9
D9
207.993 104 S9
208.113 104 M9
D9
208.352 104 S9
208.471 104 M9
D9
208.77 104 S9
208.89 104 M9
D9
210.443 104 S9
210.503 104 M9
D9
210.742 104 S9
210.981 104 M9
D9
211.041 104 S9
212.236 104 M9
D9
213.371 104 S9
213.67 104 M9
D9
213.849 104 S9
214.207 104 M9
D9
215.343 104 S9
215.462 104 M9
D9
215.88 104 S9
215.94 104 M9
D9
216 104 S9
216.06 104 M9
D9
87.2963 108 S9
87.356 108 M9
D9
87.4755 108 S9
87.5353 108 M9
D9
87.7145 108 S9
87.7743 108 M9
D9
87.8938 108 S9
87.9535 108 M9
D9
88.1328 108 S9
88.1925 108 M9
D9
88.312 108 S9
88.3718 108 M9
D9
88.551 108 S9
88.6108 108 M9
D9
88.7303 108 S9
88.79 108 M9
D9
88.9693 108 S9
89.029 108 M9
D9
89.0888 108 S9
89.1485 108 M9
D9
89.3278 108 S9
89.3876 108 M9
D9
89.5071 108 S9
89.5668 108 M9
D9
89.7461 108 S9
89.8058 108 M9
D9
89.9253 108 S9
89.9851 108 M9
D9
90.2838 108 S9
90.3436 108 M9
D9
91.0008 108 S9
91.0606 108 M9
D9
92.7336 108 S9
92.7934 108 M9
D9
111.316 108 S9
111.376 108 M9
D9
111.734 108 S9
111.794 108 M9
D9
112.571 108 S9
112.631 108 M9
D9
112.989 108 S9
113.049 108 M9
D9
113.348 108 S9
113.407 108 M9
D9
113.706 108 S9
113.766 108 M9
D9
114.124 108 S9
114.184 108 M9
D9
114.841 108 S9
114.901 108 M9
D9
115.2 108 S9
115.26 108 M9
D9
116.634 108 S9
125.716 108 M9
D9
125.895 108 S9
126.134 108 M9
D9
126.314 108 S9
126.553 108 M9
D9
126.672 108 S9
126.911 108 M9
D9
127.09 108 S9
127.329 108 M9
D9
127.509 108 S9
127.748 108 M9
D9
127.867 108 S9
128.106 108 M9
D9
128.226 108 S9
128.465 108 M9
D9
128.584 108 S9
128.823 108 M9
D9
129.959 108 S9
130.018 108 M9
D9
131.632 108 S9
132.289 108 M9
D9
133.185 108 S9
133.305 108 M9
D9
133.603 108 S9
133.663 108 M9
D9
134.022 108 S9
134.141 108 M9
D9
134.44 108 S9
134.559 108 M9
D9
134.858 108 S9
134.918 108 M9
D9
135.217 108 S9
135.276 108 M9
D9
179.552 108 S9
179.612 108 M9
D9
185.049 108 S9
185.467 108 M9
D9
187.618 108 S9
187.678 108 M9
D9
204.468 108 S9
204.528 108 M9
D9
205.305 108 S9
205.364 108 M9
D9
205.723 108 S9
205.783 108 M9
D9
206.44 108 S9
206.5 108 M9
D9
207.157 108 S9
207.217 108 M9
D9
207.993 108 S9
208.113 108 M9
D9
208.352 108 S9
208.471 108 M9
D9
208.77 108 S9
208.83 108 M9
D9
210.443 108 S9
210.503 108 M9
D9
210.742 108 S9
210.981 108 M9
D9
211.041 108 S9
212.236 108 M9
D9
213.371 108 S9
213.67 108 M9
D9
214.566 108 S9
214.984 108 M9
D9
215.88 108 S9
216.06 108 M9
D9
87.2963 112 S9
87.4755 112 M9
D9
87.7145 112 S9
87.8938 112 M9
D9
88.1328 112 S9
88.1925 112 M9
D9
88.2523 112 S9
88.312 112 M9
D9
88.551 112 S9
88.7303 112 M9
D9
88.9693 112 S9
89.1485 112 M9
D9
89.3278 112 S9
89.3876 112 M9
D9
89.4473 112 S9
89.5071 112 M9
D9
89.7461 112 S9
89.9253 112 M9
D9
90.2241 112 S9
90.3436 112 M9
D9
91.0008 112 S9
91.0606 112 M9
D9
92.7336 112 S9
92.7934 112 M9
D9
103.429 112 S9
103.489 112 M9
D9
103.847 112 S9
103.907 112 M9
D9
104.266 112 S9
104.325 112 M9
D9
105.042 112 S9
105.102 112 M9
D9
105.461 112 S9
105.52 112 M9
D9
106.178 112 S9
106.237 112 M9
D9
106.596 112 S9
106.656 112 M9
D9
107.014 112 S9
107.074 112 M9
D9
107.313 112 S9
107.373 112 M9
D9
107.671 112 S9
107.731 112 M9
D9
109.105 112 S9
118.188 112 M9
D9
118.427 112 S9
118.606 112 M9
D9
118.845 112 S9
119.024 112 M9
D9
119.203 112 S9
119.442 112 M9
D9
119.681 112 S9
119.861 112 M9
D9
120.1 112 S9
120.279 112 M9
D9
120.458 112 S9
120.637 112 M9
D9
120.817 112 S9
120.996 112 M9
D9
121.175 112 S9
121.354 112 M9
D9
121.773 112 S9
121.832 112 M9
D9
123.625 112 S9
123.685 112 M9
D9
124.163 112 S9
124.82 112 M9
D9
125.716 112 S9
125.895 112 M9
D9
126.134 112 S9
126.314 112 M9
D9
126.553 112 S9
126.732 112 M9
D9
126.911 112 S9
127.09 112 M9
D9
127.329 112 S9
127.509 112 M9
D9
127.748 112 S9
127.927 112 M9
D9
128.106 112 S9
128.226 112 M9
D9
128.465 112 S9
128.584 112 M9
D9
171.605 112 S9
171.724 112 M9
D9
177.281 112 S9
177.64 112 M9
D9
179.552 112 S9
179.612 112 M9
D9
204.468 112 S9
204.528 112 M9
D9
205.305 112 S9
205.364 112 M9
D9
205.723 112 S9
205.783 112 M9
D9
206.44 112 S9
206.5 112 M9
D9
207.157 112 S9
207.217 112 M9
D9
207.993 112 S9
208.113 112 M9
D9
208.352 112 S9
208.471 112 M9
D9
208.77 112 S9
208.83 112 M9
D9
210.443 112 S9
210.503 112 M9
D9
210.742 112 S9
210.981 112 M9
D9
211.041 112 S9
212.236 112 M9
D9
212.594 112 S9
212.773 112 M9
D9
212.953 112 S9
213.072 112 M9
D9
213.371 112 S9
213.67 112 M9
D9
215.701 112 S9
215.761 112 M9
D9
215.821 112 S9
215.88 112 M9
D9
215.94 112 S9
216.06 112 M9
D9
87.2963 116 S9
87.4158 116 M9
D9
87.7145 116 S9
87.7743 116 M9
D9
88.1328 116 S9
88.2523 116 M9
D9
88.551 116 S9
88.6108 116 M9
D9
88.9693 116 S9
89.029 116 M9
D9
89.3278 116 S9
89.4473 116 M9
D9
89.7461 116 S9
89.8058 116 M9
D9
90.1643 116 S9
90.2241 116 M9
D9
91.0008 116 S9
91.0606 116 M9
D9
92.7336 116 S9
92.7934 116 M9
D9
95.7212 116 S9
95.7809 116 M9
D9
96.4979 116 S9
96.5577 116 M9
D9
96.9162 116 S9
96.9759 116 M9
D9
97.3344 116 S9
97.3942 116 M9
D9
97.7527 116 S9
97.8124 116 M9
D9
98.4697 116 S9
98.5295 116 M9
D9
98.888 116 S9
98.9477 116 M9
D9
99.3062 116 S9
99.366 116 M9
D9
99.9635 116 S9
100.023 116 M9
D9
101.398 116 S9
102.473 116 M9
D9
102.652 116 S9
110.599 116 M9
D9
110.838 116 S9
110.958 116 M9
D9
111.256 116 S9
111.376 116 M9
D9
111.615 116 S9
111.794 116 M9
D9
112.093 116 S9
112.212 116 M9
D9
112.511 116 S9
112.631 116 M9
D9
112.87 116 S9
113.049 116 M9
D9
113.288 116 S9
113.407 116 M9
D9
113.587 116 S9
113.766 116 M9
D9
114.184 116 S9
114.244 116 M9
D9
114.901 116 S9
114.961 116 M9
D9
116.037 116 S9
116.096 116 M9
D9
116.634 116 S9
117.232 116 M9
D9
118.188 116 S9
118.427 116 M9
D9
118.606 116 S9
118.845 116 M9
D9
119.024 116 S9
119.263 116 M9
D9
119.442 116 S9
119.681 116 M9
D9
119.861 116 S9
120.1 116 M9
D9
120.279 116 S9
120.458 116 M9
D9
120.637 116 S9
120.817 116 M9
D9
120.996 116 S9
121.175 116 M9
D9
163.539 116 S9
163.658 116 M9
D9
169.215 116 S9
169.573 116 M9
D9
171.605 116 S9
171.665 116 M9
D9
204.468 116 S9
204.528 116 M9
D9
205.305 116 S9
205.364 116 M9
D9
205.723 116 S9
205.783 116 M9
D9
206.081 116 S9
206.141 116 M9
D9
206.44 116 S9
206.5 116 M9
D9
207.157 116 S9
207.217 116 M9
D9
207.993 116 S9
208.113 116 M9
D9
208.352 116 S9
208.471 116 M9
D9
208.77 116 S9
208.83 116 M9
D9
210.443 116 S9
210.503 116 M9
D9
210.742 116 S9
210.981 116 M9
D9
211.041 116 S9
212.236 116 M9
D9
213.371 116 S9
213.67 116 M9
D9
214.207 116 S9
214.566 116 M9
D9
215.462 116 S9
215.522 116 M9
D9
215.641 116 S9
215.701 116 M9
D9
215.821 116 S9
215.88 116 M9
D9
216 116 S9
216.06 116 M9
D9
87.2963 120 S9
87.356 120 M9
D9
87.6548 120 S9
87.7743 120 M9
D9
88.073 120 S9
88.1925 120 M9
D9
88.4913 120 S9
88.6108 120 M9
D9
88.9095 120 S9
88.9693 120 M9
D9
89.3278 120 S9
89.3876 120 M9
D9
89.6863 120 S9
89.8058 120 M9
D9
90.1046 120 S9
90.1643 120 M9
D9
90.4631 120 S9
90.5228 120 M9
D9
91.0008 120 S9
91.0606 120 M9
D9
91.3593 120 S9
91.4191 120 M9
D9
91.7178 120 S9
91.7776 120 M9
D9
92.0763 120 S9
92.1361 120 M9
D9
92.7336 120 S9
92.7934 120 M9
D9
93.6896 120 S9
94.6456 120 M9
D9
94.8846 120 S9
103.071 120 M9
D9
103.369 120 S9
103.489 120 M9
D9
103.847 120 S9
103.907 120 M9
D9
104.206 120 S9
104.325 120 M9
D9
104.624 120 S9
104.684 120 M9
D9
105.042 120 S9
105.102 120 M9
D9
105.401 120 S9
105.52 120 M9
D9
105.819 120 S9
105.879 120 M9
D9
106.118 120 S9
106.237 120 M9
D9
106.656 120 S9
106.715 120 M9
D9
107.373 120 S9
107.432 120 M9
D9
108.508 120 S9
108.568 120 M9
D9
109.105 120 S9
109.703 120 M9
D9
110.599 120 S9
110.838 120 M9
D9
110.958 120 S9
111.256 120 M9
D9
111.376 120 S9
111.675 120 M9
D9
111.794 120 S9
112.093 120 M9
D9
112.212 120 S9
112.511 120 M9
D9
112.631 120 S9
112.87 120 M9
D9
113.049 120 S9
113.288 120 M9
D9
113.407 120 S9
113.646 120 M9
D9
155.651 120 S9
155.711 120 M9
D9
161.208 120 S9
161.567 120 M9
D9
163.539 120 S9
163.598 120 M9
D9
204.468 120 S9
204.528 120 M9
D9
205.305 120 S9
205.364 120 M9
D9
205.723 120 S9
205.783 120 M9
D9
206.081 120 S9
206.141 120 M9
D9
206.44 120 S9
206.5 120 M9
D9
207.157 120 S9
207.217 120 M9
D9
207.993 120 S9
208.113 120 M9
D9
208.352 120 S9
208.471 120 M9
D9
208.77 120 S9
208.83 120 M9
D9
210.144 120 S9
210.204 120 M9
D9
210.443 120 S9
210.503 120 M9
D9
210.742 120 S9
210.981 120 M9
D9
211.041 120 S9
212.236 120 M9
D9
212.773 120 S9
212.953 120 M9
D9
213.371 120 S9
213.67 120 M9
D9
215.522 120 S9
215.701 120 M9
D9
216 120 S9
216.06 120 M9
D9
87.2963 124 S9
95.3627 124 M9
D9
98.9477 124 S9
99.0075 124 M9
D9
99.6647 124 S9
100.023 124 M9
D9
100.441 124 S9
101.995 124 M9
D9
102.294 124 S9
102.413 124 M9
D9
102.473 124 S9
103.369 124 M9
D9
103.489 124 S9
103.847 124 M9
D9
103.907 124 S9
104.206 124 M9
D9
104.325 124 S9
104.624 124 M9
D9
104.684 124 S9
105.042 124 M9
D9
105.102 124 S9
105.401 124 M9
D9
105.52 124 S9
105.819 124 M9
D9
105.879 124 S9
106.178 124 M9
D9
107.373 124 S9
107.731 124 M9
D9
108.149 124 S9
109.105 124 M9
D9
109.942 124 S9
110.061 124 M9
D9
110.121 124 S9
110.599 124 M9
D9
114.901 124 S9
115.26 124 M9
D9
115.678 124 S9
116.634 124 M9
D9
117.53 124 S9
117.65 124 M9
D9
117.71 124 S9
118.188 124 M9
D9
122.49 124 S9
122.848 124 M9
D9
123.266 124 S9
124.163 124 M9
D9
125.119 124 S9
125.178 124 M9
D9
125.238 124 S9
125.716 124 M9
D9
129.959 124 S9
130.317 124 M9
D9
130.676 124 S9
131.632 124 M9
D9
132.588 124 S9
132.707 124 M9
D9
132.767 124 S9
133.185 124 M9
D9
137.308 124 S9
137.666 124 M9
D9
138.085 124 S9
139.1 124 M9
D9
140.116 124 S9
140.236 124 M9
D9
140.295 124 S9
140.714 124 M9
D9
144.896 124 S9
145.255 124 M9
D9
145.673 124 S9
146.629 124 M9
D9
147.406 124 S9
147.525 124 M9
D9
147.585 124 S9
148.063 124 M9
D9
152.425 124 S9
152.783 124 M9
D9
153.202 124 S9
154.576 124 M9
D9
155.472 124 S9
155.592 124 M9
D9
155.651 124 S9
156.129 124 M9
D9
160.432 124 S9
160.79 124 M9
D9
161.208 124 S9
162.523 124 M9
D9
163.359 124 S9
163.479 124 M9
D9
163.539 124 S9
164.136 124 M9
D9
168.438 124 S9
168.797 124 M9
D9
169.215 124 S9
170.529 124 M9
D9
171.426 124 S9
171.545 124 M9
D9
171.605 124 S9
172.202 124 M9
D9
176.505 124 S9
176.863 124 M9
D9
177.281 124 S9
178.536 124 M9
D9
179.432 124 S9
179.492 124 M9
D9
179.552 124 S9
180.09 124 M9
D9
184.332 124 S9
184.69 124 M9
D9
185.049 124 S9
186.423 124 M9
D9
187.439 124 S9
187.559 124 M9
D9
187.618 124 S9
188.096 124 M9
D9
192.219 124 S9
192.578 124 M9
D9
192.996 124 S9
194.43 124 M9
D9
195.565 124 S9
195.685 124 M9
D9
195.744 124 S9
196.222 124 M9
D9
200.226 124 S9
200.584 124 M9
D9
201.002 124 S9
202.377 124 M9
D9
203.393 124 S9
203.512 124 M9
D9
203.572 124 S9
204.11 124 M9
D9
204.468 124 S9
204.528 124 M9
D9
204.886 124 S9
204.946 124 M9
D9
205.305 124 S9
205.364 124 M9
D9
205.723 124 S9
205.783 124 M9
D9
206.081 124 S9
206.141 124 M9
D9
206.44 124 S9
206.5 124 M9
D9
207.157 124 S9
207.217 124 M9
D9
207.993 124 S9
208.113 124 M9
D9
208.352 124 S9
208.83 124 M9
D9
209.427 124 S9
210.981 124 M9
D9
211.041 124 S9
213.311 124 M9
D9
213.371 124 S9
213.67 124 M9
D9
213.789 124 S9
215.104 124 M9
D9
215.163 124 S9
216.06 124 M9
D9
87.2963 128 S9
87.4158 128 M9
D9
87.7145 128 S9
87.7743 128 M9
D9
88.1328 128 S9
88.2523 128 M9
D9
88.551 128 S9
88.6108 128 M9
D9
88.9693 128 S9
89.029 128 M9
D9
89.3278 128 S9
89.4473 128 M9
D9
89.7461 128 S9
89.8058 128 M9
D9
90.1643 128 S9
90.2241 128 M9
D9
91.0008 128 S9
91.1203 128 M9
D9
91.4191 128 S9
91.4788 128 M9
D9
92.7336 128 S9
92.7934 128 M9
D9
93.0921 128 S9
93.1519 128 M9
D9
93.3909 128 S9
93.4506 128 M9
D9
95.6614 128 S9
95.7809 128 M9
D9
96.0797 128 S9
96.1394 128 M9
D9
96.4382 128 S9
96.5577 128 M9
D9
96.8564 128 S9
96.9759 128 M9
D9
97.3344 128 S9
97.3942 128 M9
D9
97.6929 128 S9
97.8124 128 M9
D9
98.1112 128 S9
98.171 128 M9
D9
98.4697 128 S9
98.5295 128 M9
D9
101.457 128 S9
101.517 128 M9
D9
101.756 128 S9
101.816 128 M9
D9
140.295 128 S9
140.355 128 M9
D9
145.673 128 S9
146.032 128 M9
D9
147.585 128 S9
147.645 128 M9
D9
196.581 128 S9
196.641 128 M9
D9
197.358 128 S9
197.417 128 M9
D9
197.776 128 S9
197.836 128 M9
D9
198.493 128 S9
198.553 128 M9
D9
198.851 128 S9
198.911 128 M9
D9
199.15 128 S9
199.21 128 M9
D9
199.807 128 S9
199.927 128 M9
D9
200.166 128 S9
200.226 128 M9
D9
200.524 128 S9
200.584 128 M9
D9
202.018 128 S9
202.078 128 M9
D9
202.317 128 S9
212.236 128 M9
D9
213.371 128 S9
213.67 128 M9
D9
213.789 128 S9
213.849 128 M9
D9
216 128 S9
216.06 128 M9
D9
87.2963 132 S9
87.4158 132 M9
D9
87.7145 132 S9
87.7743 132 M9
D9
88.1328 132 S9
88.2523 132 M9
D9
88.551 132 S9
88.6108 132 M9
D9
88.9693 132 S9
89.029 132 M9
D9
89.3278 132 S9
89.4473 132 M9
D9
89.7461 132 S9
89.8058 132 M9
D9
90.1643 132 S9
90.2241 132 M9
D9
91.0008 132 S9
91.1203 132 M9
D9
91.4191 132 S9
91.4788 132 M9
D9
92.7336 132 S9
92.7934 132 M9
D9
93.0921 132 S9
93.1519 132 M9
D9
93.3909 132 S9
93.4506 132 M9
D9
95.6017 132 S9
95.6614 132 M9
D9
96.0199 132 S9
96.0797 132 M9
D9
96.4382 132 S9
96.4979 132 M9
D9
96.7967 132 S9
96.8564 132 M9
D9
97.2747 132 S9
97.3344 132 M9
D9
97.6929 132 S9
97.7527 132 M9
D9
98.0515 132 S9
98.1112 132 M9
D9
98.41 132 S9
98.4697 132 M9
D9
132.767 132 S9
132.827 132 M9
D9
138.085 132 S9
138.503 132 M9
D9
140.295 132 S9
140.355 132 M9
D9
188.455 132 S9
188.515 132 M9
D9
188.873 132 S9
188.933 132 M9
D9
189.291 132 S9
189.351 132 M9
D9
189.71 132 S9
189.769 132 M9
D9
190.427 132 S9
190.486 132 M9
D9
190.785 132 S9
190.845 132 M9
D9
191.741 132 S9
191.861 132 M9
D9
192.1 132 S9
192.219 132 M9
D9
192.518 132 S9
192.578 132 M9
D9
193.773 132 S9
193.832 132 M9
D9
194.071 132 S9
194.131 132 M9
D9
194.37 132 S9
204.11 132 M9
D9
205.723 132 S9
205.783 132 M9
D9
207.217 132 S9
207.276 132 M9
D9
207.695 132 S9
207.754 132 M9
D9
208.053 132 S9
208.113 132 M9
D9
208.352 132 S9
208.531 132 M9
D9
208.83 132 S9
208.89 132 M9
D9
210.443 132 S9
210.503 132 M9
D9
210.742 132 S9
211.519 132 M9
D9
211.578 132 S9
212.236 132 M9
D9
213.371 132 S9
213.67 132 M9
D9
213.789 132 S9
213.849 132 M9
D9
87.2963 136 S9
87.4158 136 M9
D9
87.7145 136 S9
87.7743 136 M9
D9
88.1328 136 S9
88.2523 136 M9
D9
88.551 136 S9
88.6108 136 M9
D9
88.9693 136 S9
89.029 136 M9
D9
89.3278 136 S9
89.4473 136 M9
D9
89.7461 136 S9
89.8058 136 M9
D9
90.1643 136 S9
90.2241 136 M9
D9
91.0008 136 S9
91.1203 136 M9
D9
92.7336 136 S9
92.7934 136 M9
D9
93.0921 136 S9
93.1519 136 M9
D9
93.3909 136 S9
93.4506 136 M9
D9
95.6017 136 S9
95.6614 136 M9
D9
95.9602 136 S9
96.0199 136 M9
D9
96.3784 136 S9
96.4382 136 M9
D9
96.7369 136 S9
96.7967 136 M9
D9
97.2149 136 S9
97.2747 136 M9
D9
97.6332 136 S9
97.6929 136 M9
D9
97.9917 136 S9
98.0515 136 M9
D9
98.3502 136 S9
98.41 136 M9
D9
125.238 136 S9
125.358 136 M9
D9
130.676 136 S9
131.034 136 M9
D9
132.767 136 S9
132.827 136 M9
D9
180.448 136 S9
180.508 136 M9
D9
180.866 136 S9
180.926 136 M9
D9
181.703 136 S9
181.763 136 M9
D9
182.121 136 S9
182.181 136 M9
D9
182.48 136 S9
182.539 136 M9
D9
182.838 136 S9
182.898 136 M9
D9
183.555 136 S9
183.615 136 M9
D9
183.914 136 S9
183.973 136 M9
D9
184.212 136 S9
184.332 136 M9
D9
184.631 136 S9
184.69 136 M9
D9
185.766 136 S9
185.826 136 M9
D9
186.065 136 S9
186.124 136 M9
D9
186.363 136 S9
196.282 136 M9
D9
196.999 136 S9
197.059 136 M9
D9
197.417 136 S9
197.477 136 M9
D9
200.226 136 S9
200.285 136 M9
D9
201.421 136 S9
201.48 136 M9
D9
205.723 136 S9
205.783 136 M9
D9
207.217 136 S9
207.276 136 M9
D9
208.053 136 S9
208.113 136 M9
D9
208.352 136 S9
208.471 136 M9
D9
208.83 136 S9
208.89 136 M9
D9
210.443 136 S9
210.503 136 M9
D9
210.742 136 S9
210.861 136 M9
D9
210.921 136 S9
211.519 136 M9
D9
211.578 136 S9
212.236 136 M9
D9
213.371 136 S9
213.67 136 M9
D9
213.789 136 S9
213.849 136 M9
D9
87.2963 140 S9
87.356 140 M9
D9
87.7145 140 S9
87.7743 140 M9
D9
88.1328 140 S9
88.2523 140 M9
D9
88.551 140 S9
88.6108 140 M9
D9
88.9693 140 S9
89.029 140 M9
D9
89.3278 140 S9
89.4473 140 M9
D9
89.7461 140 S9
89.8058 140 M9
D9
90.1643 140 S9
90.2241 140 M9
D9
91.0008 140 S9
91.0606 140 M9
D9
92.7336 140 S9
92.7934 140 M9
D9
93.0921 140 S9
93.1519 140 M9
D9
93.3909 140 S9
93.4506 140 M9
D9
95.5419 140 S9
95.6017 140 M9
D9
95.9004 140 S9
95.9602 140 M9
D9
96.3187 140 S9
96.3784 140 M9
D9
96.7369 140 S9
96.7967 140 M9
D9
97.1552 140 S9
97.2149 140 M9
D9
97.5734 140 S9
97.6332 140 M9
D9
97.9917 140 S9
98.0515 140 M9
D9
98.2905 140 S9
98.3502 140 M9
D9
117.71 140 S9
117.829 140 M9
D9
123.266 140 S9
123.625 140 M9
D9
125.238 140 S9
125.298 140 M9
D9
172.561 140 S9
172.621 140 M9
D9
172.979 140 S9
173.039 140 M9
D9
173.398 140 S9
173.457 140 M9
D9
173.816 140 S9
173.876 140 M9
D9
174.234 140 S9
174.294 140 M9
D9
174.951 140 S9
175.011 140 M9
D9
175.31 140 S9
175.369 140 M9
D9
175.728 140 S9
175.788 140 M9
D9
176.086 140 S9
176.146 140 M9
D9
176.385 140 S9
176.505 140 M9
D9
176.803 140 S9
176.863 140 M9
D9
177.939 140 S9
177.998 140 M9
D9
178.237 140 S9
178.297 140 M9
D9
178.476 140 S9
188.216 140 M9
D9
188.515 140 S9
188.574 140 M9
D9
188.933 140 S9
189.052 140 M9
D9
189.351 140 S9
189.471 140 M9
D9
189.769 140 S9
189.829 140 M9
D9
190.128 140 S9
190.188 140 M9
D9
192.219 140 S9
192.279 140 M9
D9
193.414 140 S9
193.474 140 M9
D9
204.468 140 S9
204.528 140 M9
D9
205.723 140 S9
205.783 140 M9
D9
207.217 140 S9
207.276 140 M9
D9
208.053 140 S9
208.113 140 M9
D9
208.352 140 S9
208.471 140 M9
D9
208.83 140 S9
208.89 140 M9
D9
210.443 140 S9
210.503 140 M9
D9
210.742 140 S9
210.981 140 M9
D9
211.041 140 S9
211.519 140 M9
D9
211.578 140 S9
212.236 140 M9
D9
213.371 140 S9
213.67 140 M9
D9
213.789 140 S9
213.849 140 M9
D9
12 /Helvetica SetTxt
(|) 0 72 72 TXC
(|) 0 87.2963 72 TXC
(|) 0 102.593 72 TXC
(|) 0 117.889 72 TXC
(|) 0 133.185 72 TXC
(|) 0 148.481 72 TXC
(|) 0 163.778 72 TXC
(|) 0 179.074 72 TXC
(|) 0 194.37 72 TXC
(|) 0 209.666 72 TXC
6 /Helvetica SetTxt
(|) -90 72 72 TXC
(|) -90 72 80 TXC
(|) -90 72 88 TXC
(|) -90 72 96 TXC
(|) -90 72 104 TXC
(|) -90 72 112 TXC
(|) -90 72 120 TXC
(|) -90 72 128 TXC
(|) -90 72 136 TXC
(|) -90 72 144 TXC
7 /Helvetica SetTxt
() 0 144 41.2 TXC
[] 0.400000 SL
2 setlinecap
72 72 216 72 
L9
0 setlinecap
72 72 72 144 
L9
( Coloring order (hydro2d)) 0 216 55.75 TXR
() 90 53.7 144 TXR
4 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 46 41 216 150 170 109 226 626 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/tomcatv-phys.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 46 41 216 150
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
161.543 84 S9
[] 1.200000 SL
161.58 84 M9
D9
162.737 84 S9
162.774 84 M9
D9
167.552 84 S9
176.435 84 M9
D9
177.63 84 S9
177.667 84 M9
D9
178.824 84 S9
178.862 84 M9
D9
211.11 84 S9
211.148 84 M9
D9
215.888 84 S9
216.037 84 M9
D9
152.921 88 S9
152.958 88 M9
D9
154.115 88 S9
154.152 88 M9
D9
158.93 88 S9
167.813 88 M9
D9
169.008 88 S9
169.045 88 M9
D9
170.202 88 S9
170.24 88 M9
D9
211.11 88 S9
211.148 88 M9
D9
215.888 88 S9
216.037 88 M9
D9
144.299 92 S9
144.336 92 M9
D9
145.493 92 S9
145.53 92 M9
D9
150.308 92 S9
159.191 92 M9
D9
160.386 92 S9
160.423 92 M9
D9
161.58 92 S9
161.617 92 M9
D9
211.11 92 S9
211.148 92 M9
D9
215.888 92 S9
216.037 92 M9
D9
135.677 96 S9
135.714 96 M9
D9
136.871 96 S9
136.908 96 M9
D9
141.686 96 S9
150.569 96 M9
D9
151.764 96 S9
151.801 96 M9
D9
152.958 96 S9
152.995 96 M9
D9
211.11 96 S9
211.148 96 M9
D9
215.888 96 S9
216.037 96 M9
D9
127.054 100 S9
127.092 100 M9
D9
128.249 100 S9
128.286 100 M9
D9
133.064 100 S9
141.947 100 M9
D9
143.142 100 S9
143.179 100 M9
D9
144.336 100 S9
144.373 100 M9
D9
211.11 100 S9
211.148 100 M9
D9
215.888 100 S9
216.037 100 M9
D9
118.432 104 S9
118.47 104 M9
D9
119.627 104 S9
119.664 104 M9
D9
124.442 104 S9
133.325 104 M9
D9
134.519 104 S9
134.557 104 M9
D9
135.714 104 S9
135.751 104 M9
D9
211.11 104 S9
211.148 104 M9
D9
215.888 104 S9
216.037 104 M9
D9
109.81 108 S9
109.848 108 M9
D9
111.005 108 S9
111.042 108 M9
D9
115.82 108 S9
124.703 108 M9
D9
125.897 108 S9
125.935 108 M9
D9
127.092 108 S9
127.129 108 M9
D9
211.11 108 S9
211.148 108 M9
D9
215.888 108 S9
216.037 108 M9
D9
101.188 112 S9
101.226 112 M9
D9
102.383 112 S9
102.42 112 M9
D9
107.198 112 S9
116.081 112 M9
D9
117.275 112 S9
117.313 112 M9
D9
118.47 112 S9
118.507 112 M9
D9
211.11 112 S9
211.148 112 M9
D9
215.888 112 S9
216.037 112 M9
D9
92.5661 116 S9
92.6034 116 M9
D9
93.7605 116 S9
93.7978 116 M9
D9
98.5754 116 S9
107.459 116 M9
D9
108.653 116 S9
108.691 116 M9
D9
109.848 116 S9
109.885 116 M9
D9
211.11 116 S9
211.148 116 M9
D9
215.888 116 S9
216.037 116 M9
D9
83.944 120 S9
83.9813 120 M9
D9
85.1384 120 S9
85.1757 120 M9
D9
89.9533 120 S9
98.8367 120 M9
D9
100.031 120 S9
100.068 120 M9
D9
101.226 120 S9
101.263 120 M9
D9
211.11 120 S9
211.148 120 M9
D9
215.888 120 S9
216.037 120 M9
D9
81.5925 124 S9
90.2146 124 M9
D9
91.409 124 S9
91.4463 124 M9
D9
92.6034 124 S9
92.6407 124 M9
D9
211.11 124 S9
211.148 124 M9
D9
215.664 124 S9
215.739 124 M9
D9
215.888 124 S9
216.037 124 M9
D9
204.765 128 S9
204.802 128 M9
D9
205.997 128 S9
206.034 128 M9
D9
210.849 128 S9
211.782 128 M9
D9
211.82 128 S9
215.664 128 M9
D9
215.701 128 S9
215.776 128 M9
D9
215.888 128 S9
216.037 128 M9
D9
196.068 132 S9
196.106 132 M9
D9
197.263 132 S9
197.3 132 M9
D9
202.152 132 S9
211.148 132 M9
D9
211.82 132 S9
211.857 132 M9
D9
212.491 132 S9
212.529 132 M9
D9
215.888 132 S9
216.037 132 M9
D9
187.409 136 S9
187.446 136 M9
D9
188.603 136 S9
188.641 136 M9
D9
193.456 136 S9
202.414 136 M9
D9
203.608 136 S9
203.645 136 M9
D9
204.802 136 S9
204.84 136 M9
D9
211.11 136 S9
211.148 136 M9
D9
215.888 136 S9
216.037 136 M9
D9
178.787 140 S9
178.824 140 M9
D9
179.981 140 S9
180.019 140 M9
D9
184.796 140 S9
193.717 140 M9
D9
194.911 140 S9
194.949 140 M9
D9
196.106 140 S9
196.143 140 M9
D9
211.11 140 S9
211.148 140 M9
D9
215.888 140 S9
216.037 140 M9
D9
12 /Helvetica SetTxt
(|) 0 72 72 TXC
(|) 0 81.5552 72 TXC
(|) 0 91.1104 72 TXC
(|) 0 100.666 72 TXC
(|) 0 110.221 72 TXC
(|) 0 119.776 72 TXC
(|) 0 129.331 72 TXC
(|) 0 138.886 72 TXC
(|) 0 148.442 72 TXC
(|) 0 157.997 72 TXC
(|) 0 167.552 72 TXC
(|) 0 177.107 72 TXC
(|) 0 186.663 72 TXC
(|) 0 196.218 72 TXC
(|) 0 205.773 72 TXC
(|) 0 215.328 72 TXC
6 /Helvetica SetTxt
(|) -90 72 72 TXC
(|) -90 72 80 TXC
(|) -90 72 88 TXC
(|) -90 72 96 TXC
(|) -90 72 104 TXC
(|) -90 72 112 TXC
(|) -90 72 120 TXC
(|) -90 72 128 TXC
(|) -90 72 136 TXC
(|) -90 72 144 TXC
7 /Helvetica SetTxt
() 0 144 41.2 TXC
[] 0.400000 SL
2 setlinecap
72 72 216 72 
L9
0 setlinecap
72 72 72 144 
L9
( Coloring order (tomcatv)) 0 216 55.75 TXR
() 90 53.7 144 TXR
4 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
56.72 569.95 555.22 638.39 R
7 X
0 0 0 1 0 0 0 K
V
56.72 624.89 555.22 638.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.72 624.89 555.22 638.39 R
7 X
0 0 0 1 0 0 0 K
V
56.72 633.89 524.72 633.89 2 L
V
1 H
2 Z
0 X
N
54 559.8 558 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 5.   Effect of Compiler) 56.72 618.89 T
(-Dir) 178.62 618.89 T
(ected Page Coloring on Page-level Access Patterns.) 194.45 618.89 T
1 F
-0.17 (The \336gure plots the access patterns in the coloring order for the same workloads as in Figure) 56.72 607.89 P
-0.17 (3. The coloring order is determined by CDPC.) 389.68 607.89 P
0.43 (Each tick of the horizontal axis corresponds to color zero in a 1MB cache. Con\337icts occur only between pages that have the same color) 56.72 596.89 P
0.43 (.) 552.97 596.89 P
56.72 569.39 555.22 582.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.72 569.39 555.22 582.89 R
7 X
0 0 0 1 0 0 0 K
V
56.72 578.39 524.72 578.39 2 L
V
1 H
2 Z
0 X
N
54 559.8 558 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(The \336gure plots all page-level accesses that occur during the steady state of the computation.) 56.72 585.89 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
54 261.88 558 559.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 38 32 972 275 467 121.5 54 438.3 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/cdc-high.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( Overhead) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( Memory Stall) 0 960.231 225.9 TXL
72 72 S9
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( Execution) 0 960.231 212.9 TXL
72 72 S9
[] 1.000000 SL
78 72 M9
78 143.995 M9
84 143.995 M9
84 72 M9
86.4 72 M9
86.4 143.995 M9
92.4 143.995 M9
92.4 72 M9
98.4 72 M9
98.4 144.698 M9
104.4 144.698 M9
104.4 72 M9
106.8 72 M9
106.8 130.377 M9
112.8 130.377 M9
112.8 72 M9
118.8 72 M9
118.8 148.389 M9
124.8 148.389 M9
124.8 72 M9
127.2 72 M9
127.2 130.927 M9
133.2 130.927 M9
133.2 72 M9
139.2 72 M9
139.2 164.657 M9
145.2 164.657 M9
145.2 72 M9
147.6 72 M9
147.6 125.698 M9
153.6 125.698 M9
153.6 72 M9
159.6 72 M9
159.6 249.849 M9
165.6 249.849 M9
165.6 72 M9
168 72 M9
168 109.144 M9
174 109.144 M9
174 72 M9
186 72 M9
186 143.989 M9
192 143.989 M9
192 72 M9
194.4 72 M9
194.4 144.683 M9
200.4 144.683 M9
200.4 72 M9
206.4 72 M9
206.4 145.737 M9
212.4 145.737 M9
212.4 72 M9
214.8 72 M9
214.8 145.53 M9
220.8 145.53 M9
220.8 72 M9
226.8 72 M9
226.8 149.317 M9
232.8 149.317 M9
232.8 72 M9
235.2 72 M9
235.2 148.358 M9
241.2 148.358 M9
241.2 72 M9
247.2 72 M9
247.2 163.522 M9
253.2 163.522 M9
253.2 72 M9
255.6 72 M9
255.6 140.089 M9
261.6 140.089 M9
261.6 72 M9
267.6 72 M9
267.6 243.203 M9
273.6 243.203 M9
273.6 72 M9
276 72 M9
276 117.87 M9
282 117.87 M9
282 72 M9
294 72 M9
294 143.988 M9
300 143.988 M9
300 72 M9
302.4 72 M9
302.4 149.231 M9
308.4 149.231 M9
308.4 72 M9
314.4 72 M9
314.4 145.381 M9
320.4 145.381 M9
320.4 72 M9
322.8 72 M9
322.8 147.68 M9
328.8 147.68 M9
328.8 72 M9
334.8 72 M9
334.8 150.897 M9
340.8 150.897 M9
340.8 72 M9
343.2 72 M9
343.2 151.635 M9
349.2 151.635 M9
349.2 72 M9
355.2 72 M9
355.2 166.917 M9
361.2 166.917 M9
361.2 72 M9
363.6 72 M9
363.6 169.576 M9
369.6 169.576 M9
369.6 72 M9
375.6 72 M9
375.6 209.279 M9
381.6 209.279 M9
381.6 72 M9
384 72 M9
384 213.474 M9
390 213.474 M9
390 72 M9
402 72 M9
402 143.995 M9
408 143.995 M9
408 72 M9
410.4 72 M9
410.4 144.103 M9
416.4 144.103 M9
416.4 72 M9
422.4 72 M9
422.4 144.948 M9
428.4 144.948 M9
428.4 72 M9
430.8 72 M9
430.8 138.344 M9
436.8 138.344 M9
436.8 72 M9
442.8 72 M9
442.8 149.395 M9
448.8 149.395 M9
448.8 72 M9
451.2 72 M9
451.2 132.641 M9
457.2 132.641 M9
457.2 72 M9
463.2 72 M9
463.2 163.447 M9
469.2 163.447 M9
469.2 72 M9
471.6 72 M9
471.6 129.701 M9
477.6 129.701 M9
477.6 72 M9
483.6 72 M9
483.6 205.622 M9
489.6 205.622 M9
489.6 72 M9
492 72 M9
492 147.958 M9
498 147.958 M9
498 72 M9
510 72 M9
510 143.991 M9
516 143.991 M9
516 72 M9
518.4 72 M9
518.4 143.447 M9
524.4 143.447 M9
524.4 72 M9
530.4 72 M9
530.4 144.457 M9
536.4 144.457 M9
536.4 72 M9
538.8 72 M9
538.8 143.528 M9
544.8 143.528 M9
544.8 72 M9
550.8 72 M9
550.8 144.782 M9
556.8 144.782 M9
556.8 72 M9
559.2 72 M9
559.2 145.15 M9
565.2 145.15 M9
565.2 72 M9
571.2 72 M9
571.2 148.138 M9
577.2 148.138 M9
577.2 72 M9
579.6 72 M9
579.6 143.471 M9
585.6 143.471 M9
585.6 72 M9
591.6 72 M9
591.6 166.569 M9
597.6 166.569 M9
597.6 72 M9
600 72 M9
600 166.242 M9
606 166.242 M9
606 72 M9
618 72 M9
618 143.953 M9
624 143.953 M9
624 72 M9
626.4 72 M9
626.4 143.752 M9
632.4 143.752 M9
632.4 72 M9
638.4 72 M9
638.4 145.359 M9
644.4 145.359 M9
644.4 72 M9
646.8 72 M9
646.8 145.21 M9
652.8 145.21 M9
652.8 72 M9
658.8 72 M9
658.8 154.67 M9
664.8 154.67 M9
664.8 72 M9
667.2 72 M9
667.2 156.09 M9
673.2 156.09 M9
673.2 72 M9
679.2 72 M9
679.2 168.376 M9
685.2 168.376 M9
685.2 72 M9
687.6 72 M9
687.6 167.732 M9
693.6 167.732 M9
693.6 72 M9
699.6 72 M9
699.6 205.717 M9
705.6 205.717 M9
705.6 72 M9
708 72 M9
708 206.814 M9
714 206.814 M9
714 72 M9
726 72 M9
726 143.912 M9
732 143.912 M9
732 72 M9
734.4 72 M9
734.4 143.837 M9
740.4 143.837 M9
740.4 72 M9
746.4 72 M9
746.4 144.005 M9
752.4 144.005 M9
752.4 72 M9
754.8 72 M9
754.8 144.211 M9
760.8 144.211 M9
760.8 72 M9
766.8 72 M9
766.8 146.728 M9
772.8 146.728 M9
772.8 72 M9
775.2 72 M9
775.2 146.665 M9
781.2 146.665 M9
781.2 72 M9
787.2 72 M9
787.2 150.962 M9
793.2 150.962 M9
793.2 72 M9
795.6 72 M9
795.6 148.808 M9
801.6 148.808 M9
801.6 72 M9
807.6 72 M9
807.6 162.917 M9
813.6 162.917 M9
813.6 72 M9
816 72 M9
816 154.945 M9
822 154.945 M9
822 72 M9
834 72 M9
834 143.785 M9
840 143.785 M9
840 72 M9
842.4 72 M9
842.4 140.494 M9
848.4 140.494 M9
848.4 72 M9
854.4 72 M9
854.4 186.173 M9
860.4 186.173 M9
860.4 72 M9
862.8 72 M9
862.8 183.976 M9
868.8 183.976 M9
868.8 72 M9
874.8 72 M9
874.8 252 M9
880.8 252 M9
880.8 72 M9
883.2 72 M9
883.2 252 M9
889.2 252 M9
889.2 72 M9
895.2 72 M9
895.2 252 M9
901.2 252 M9
901.2 72 M9
903.6 72 M9
903.6 252 M9
909.6 252 M9
909.6 72 M9
915.6 72 M9
915.6 252 M9
921.6 252 M9
921.6 72 M9
924 72 M9
924 252 M9
930 252 M9
930 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
930 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
78 72 M9
78 143.474 M9
84 143.474 M9
84 72 M9
86.4 72 M9
86.4 143.475 M9
92.4 143.475 M9
92.4 72 M9
98.4 72 M9
98.4 144.032 M9
104.4 144.032 M9
104.4 72 M9
106.8 72 M9
106.8 129.719 M9
112.8 129.719 M9
112.8 72 M9
118.8 72 M9
118.8 146.232 M9
124.8 146.232 M9
124.8 72 M9
127.2 72 M9
127.2 129.057 M9
133.2 129.057 M9
133.2 72 M9
139.2 72 M9
139.2 159.523 M9
145.2 159.523 M9
145.2 72 M9
147.6 72 M9
147.6 121.497 M9
153.6 121.497 M9
153.6 72 M9
159.6 72 M9
159.6 235.586 M9
165.6 235.586 M9
165.6 72 M9
168 72 M9
168 105.395 M9
174 105.395 M9
174 72 M9
186 72 M9
186 143.331 M9
192 143.331 M9
192 72 M9
194.4 72 M9
194.4 143.85 M9
200.4 143.85 M9
200.4 72 M9
206.4 72 M9
206.4 143.741 M9
212.4 143.741 M9
212.4 72 M9
214.8 72 M9
214.8 144.304 M9
220.8 144.304 M9
220.8 72 M9
226.8 72 M9
226.8 145.293 M9
232.8 145.293 M9
232.8 72 M9
235.2 72 M9
235.2 145.645 M9
241.2 145.645 M9
241.2 72 M9
247.2 72 M9
247.2 156.179 M9
253.2 156.179 M9
253.2 72 M9
255.6 72 M9
255.6 136.506 M9
261.6 136.506 M9
261.6 72 M9
267.6 72 M9
267.6 226.35 M9
273.6 226.35 M9
273.6 72 M9
276 72 M9
276 111.854 M9
282 111.854 M9
282 72 M9
294 72 M9
294 142.708 M9
300 142.708 M9
300 72 M9
302.4 72 M9
302.4 147.956 M9
308.4 147.956 M9
308.4 72 M9
314.4 72 M9
314.4 139.937 M9
320.4 139.937 M9
320.4 72 M9
322.8 72 M9
322.8 141.698 M9
328.8 141.698 M9
328.8 72 M9
334.8 72 M9
334.8 138.158 M9
340.8 138.158 M9
340.8 72 M9
343.2 72 M9
343.2 138.97 M9
349.2 138.97 M9
349.2 72 M9
355.2 72 M9
355.2 139.506 M9
361.2 139.506 M9
361.2 72 M9
363.6 72 M9
363.6 139.758 M9
369.6 139.758 M9
369.6 72 M9
375.6 72 M9
375.6 147.191 M9
381.6 147.191 M9
381.6 72 M9
384 72 M9
384 146.446 M9
390 146.446 M9
390 72 M9
402 72 M9
402 143.116 M9
408 143.116 M9
408 72 M9
410.4 72 M9
410.4 143.209 M9
416.4 143.209 M9
416.4 72 M9
422.4 72 M9
422.4 142.016 M9
428.4 142.016 M9
428.4 72 M9
430.8 72 M9
430.8 134.333 M9
436.8 134.333 M9
436.8 72 M9
442.8 72 M9
442.8 142.08 M9
448.8 142.08 M9
448.8 72 M9
451.2 72 M9
451.2 123.662 M9
457.2 123.662 M9
457.2 72 M9
463.2 72 M9
463.2 147.999 M9
469.2 147.999 M9
469.2 72 M9
471.6 72 M9
471.6 113.343 M9
477.6 113.343 M9
477.6 72 M9
483.6 72 M9
483.6 172.414 M9
489.6 172.414 M9
489.6 72 M9
492 72 M9
492 114.758 M9
498 114.758 M9
498 72 M9
510 72 M9
510 143.125 M9
516 143.125 M9
516 72 M9
518.4 72 M9
518.4 142.59 M9
524.4 142.59 M9
524.4 72 M9
530.4 72 M9
530.4 141.969 M9
536.4 141.969 M9
536.4 72 M9
538.8 72 M9
538.8 140.942 M9
544.8 140.942 M9
544.8 72 M9
550.8 72 M9
550.8 138.004 M9
556.8 138.004 M9
556.8 72 M9
559.2 72 M9
559.2 139.151 M9
565.2 139.151 M9
565.2 72 M9
571.2 72 M9
571.2 134.103 M9
577.2 134.103 M9
577.2 72 M9
579.6 72 M9
579.6 132.183 M9
585.6 132.183 M9
585.6 72 M9
591.6 72 M9
591.6 136.202 M9
597.6 136.202 M9
597.6 72 M9
600 72 M9
600 138.024 M9
606 138.024 M9
606 72 M9
618 72 M9
618 141.883 M9
624 141.883 M9
624 72 M9
626.4 72 M9
626.4 141.712 M9
632.4 141.712 M9
632.4 72 M9
638.4 72 M9
638.4 140.899 M9
644.4 140.899 M9
644.4 72 M9
646.8 72 M9
646.8 140.867 M9
652.8 140.867 M9
652.8 72 M9
658.8 72 M9
658.8 140.919 M9
664.8 140.919 M9
664.8 72 M9
667.2 72 M9
667.2 141.564 M9
673.2 141.564 M9
673.2 72 M9
679.2 72 M9
679.2 143.201 M9
685.2 143.201 M9
685.2 72 M9
687.6 72 M9
687.6 142.324 M9
693.6 142.324 M9
693.6 72 M9
699.6 72 M9
699.6 149.865 M9
705.6 149.865 M9
705.6 72 M9
708 72 M9
708 149.653 M9
714 149.653 M9
714 72 M9
726 72 M9
726 142.051 M9
732 142.051 M9
732 72 M9
734.4 72 M9
734.4 141.999 M9
740.4 141.999 M9
740.4 72 M9
746.4 72 M9
746.4 142.052 M9
752.4 142.052 M9
752.4 72 M9
754.8 72 M9
754.8 142.257 M9
760.8 142.257 M9
760.8 72 M9
766.8 72 M9
766.8 143.926 M9
772.8 143.926 M9
772.8 72 M9
775.2 72 M9
775.2 143.985 M9
781.2 143.985 M9
781.2 72 M9
787.2 72 M9
787.2 146.544 M9
793.2 146.544 M9
793.2 72 M9
795.6 72 M9
795.6 144.956 M9
801.6 144.956 M9
801.6 72 M9
807.6 72 M9
807.6 154.368 M9
813.6 154.368 M9
813.6 72 M9
816 72 M9
816 147.018 M9
822 147.018 M9
822 72 M9
834 72 M9
834 138.465 M9
840 138.465 M9
840 72 M9
842.4 72 M9
842.4 135.128 M9
848.4 135.128 M9
848.4 72 M9
854.4 72 M9
854.4 145.943 M9
860.4 145.943 M9
860.4 72 M9
862.8 72 M9
862.8 144.961 M9
868.8 144.961 M9
868.8 72 M9
874.8 72 M9
874.8 150.762 M9
880.8 150.762 M9
880.8 72 M9
883.2 72 M9
883.2 148.791 M9
889.2 148.791 M9
889.2 72 M9
895.2 72 M9
895.2 159.037 M9
901.2 159.037 M9
901.2 72 M9
903.6 72 M9
903.6 156.966 M9
909.6 156.966 M9
909.6 72 M9
915.6 72 M9
915.6 183.354 M9
921.6 183.354 M9
921.6 72 M9
924 72 M9
924 180.858 M9
930 180.858 M9
930 72 M9
gsave
D9
grestore
930 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
78 72 M9
78 95.3832 M9
84 95.3832 M9
84 72 M9
86.4 72 M9
86.4 95.3829 M9
92.4 95.3829 M9
92.4 72 M9
98.4 72 M9
98.4 95.3963 M9
104.4 95.3963 M9
104.4 72 M9
106.8 72 M9
106.8 95.3968 M9
112.8 95.3968 M9
112.8 72 M9
118.8 72 M9
118.8 95.4189 M9
124.8 95.4189 M9
124.8 72 M9
127.2 72 M9
127.2 95.4197 M9
133.2 95.4197 M9
133.2 72 M9
139.2 72 M9
139.2 95.4691 M9
145.2 95.4691 M9
145.2 72 M9
147.6 72 M9
147.6 95.4692 M9
153.6 95.4692 M9
153.6 72 M9
159.6 72 M9
159.6 95.6001 M9
165.6 95.6001 M9
165.6 72 M9
168 72 M9
168 95.748 M9
174 95.748 M9
174 72 M9
186 72 M9
186 101.252 M9
192 101.252 M9
192 72 M9
194.4 72 M9
194.4 101.252 M9
200.4 101.252 M9
200.4 72 M9
206.4 72 M9
206.4 101.253 M9
212.4 101.253 M9
212.4 72 M9
214.8 72 M9
214.8 101.252 M9
220.8 101.252 M9
220.8 72 M9
226.8 72 M9
226.8 101.254 M9
232.8 101.254 M9
232.8 72 M9
235.2 72 M9
235.2 101.256 M9
241.2 101.256 M9
241.2 72 M9
247.2 72 M9
247.2 101.26 M9
253.2 101.26 M9
253.2 72 M9
255.6 72 M9
255.6 101.259 M9
261.6 101.259 M9
261.6 72 M9
267.6 72 M9
267.6 101.268 M9
273.6 101.268 M9
273.6 72 M9
276 72 M9
276 101.27 M9
282 101.27 M9
282 72 M9
294 72 M9
294 106.173 M9
300 106.173 M9
300 72 M9
302.4 72 M9
302.4 106.172 M9
308.4 106.172 M9
308.4 72 M9
314.4 72 M9
314.4 106.25 M9
320.4 106.25 M9
320.4 72 M9
322.8 72 M9
322.8 106.25 M9
328.8 106.25 M9
328.8 72 M9
334.8 72 M9
334.8 106.317 M9
340.8 106.317 M9
340.8 72 M9
343.2 72 M9
343.2 106.314 M9
349.2 106.314 M9
349.2 72 M9
355.2 72 M9
355.2 106.47 M9
361.2 106.47 M9
361.2 72 M9
363.6 72 M9
363.6 106.451 M9
369.6 106.451 M9
369.6 72 M9
375.6 72 M9
375.6 106.877 M9
381.6 106.877 M9
381.6 72 M9
384 72 M9
384 106.873 M9
390 106.873 M9
390 72 M9
402 72 M9
402 97.2819 M9
408 97.2819 M9
408 72 M9
410.4 72 M9
410.4 97.2813 M9
416.4 97.2813 M9
416.4 72 M9
422.4 72 M9
422.4 97.2865 M9
428.4 97.2865 M9
428.4 72 M9
430.8 72 M9
430.8 97.2855 M9
436.8 97.2855 M9
436.8 72 M9
442.8 72 M9
442.8 97.2949 M9
448.8 97.2949 M9
448.8 72 M9
451.2 72 M9
451.2 97.2921 M9
457.2 97.2921 M9
457.2 72 M9
463.2 72 M9
463.2 97.3082 M9
469.2 97.3082 M9
469.2 72 M9
471.6 72 M9
471.6 97.3067 M9
477.6 97.3067 M9
477.6 72 M9
483.6 72 M9
483.6 97.3382 M9
489.6 97.3382 M9
489.6 72 M9
492 72 M9
492 97.3371 M9
498 97.3371 M9
498 72 M9
510 72 M9
510 115.491 M9
516 115.491 M9
516 72 M9
518.4 72 M9
518.4 115.493 M9
524.4 115.493 M9
524.4 72 M9
530.4 72 M9
530.4 115.499 M9
536.4 115.499 M9
536.4 72 M9
538.8 72 M9
538.8 115.501 M9
544.8 115.501 M9
544.8 72 M9
550.8 72 M9
550.8 115.512 M9
556.8 115.512 M9
556.8 72 M9
559.2 72 M9
559.2 115.512 M9
565.2 115.512 M9
565.2 72 M9
571.2 72 M9
571.2 115.538 M9
577.2 115.538 M9
577.2 72 M9
579.6 72 M9
579.6 115.538 M9
585.6 115.538 M9
585.6 72 M9
591.6 72 M9
591.6 115.593 M9
597.6 115.593 M9
597.6 72 M9
600 72 M9
600 115.592 M9
606 115.592 M9
606 72 M9
618 72 M9
618 108.669 M9
624 108.669 M9
624 72 M9
626.4 72 M9
626.4 108.665 M9
632.4 108.665 M9
632.4 72 M9
638.4 72 M9
638.4 108.718 M9
644.4 108.718 M9
644.4 72 M9
646.8 72 M9
646.8 108.715 M9
652.8 108.715 M9
652.8 72 M9
658.8 72 M9
658.8 108.824 M9
664.8 108.824 M9
664.8 72 M9
667.2 72 M9
667.2 108.815 M9
673.2 108.815 M9
673.2 72 M9
679.2 72 M9
679.2 109.001 M9
685.2 109.001 M9
685.2 72 M9
687.6 72 M9
687.6 109.009 M9
693.6 109.009 M9
693.6 72 M9
699.6 72 M9
699.6 109.17 M9
705.6 109.17 M9
705.6 72 M9
708 72 M9
708 109.162 M9
714 109.162 M9
714 72 M9
726 72 M9
726 125.719 M9
732 125.719 M9
732 72 M9
734.4 72 M9
734.4 125.722 M9
740.4 125.722 M9
740.4 72 M9
746.4 72 M9
746.4 125.726 M9
752.4 125.726 M9
752.4 72 M9
754.8 72 M9
754.8 125.724 M9
760.8 125.724 M9
760.8 72 M9
766.8 72 M9
766.8 125.723 M9
772.8 125.723 M9
772.8 72 M9
775.2 72 M9
775.2 125.726 M9
781.2 125.726 M9
781.2 72 M9
787.2 72 M9
787.2 125.723 M9
793.2 125.723 M9
793.2 72 M9
795.6 72 M9
795.6 125.724 M9
801.6 125.724 M9
801.6 72 M9
807.6 72 M9
807.6 125.721 M9
813.6 125.721 M9
813.6 72 M9
816 72 M9
816 125.728 M9
822 125.728 M9
822 72 M9
834 72 M9
834 105.613 M9
840 105.613 M9
840 72 M9
842.4 72 M9
842.4 105.611 M9
848.4 105.611 M9
848.4 72 M9
854.4 72 M9
854.4 106.111 M9
860.4 106.111 M9
860.4 72 M9
862.8 72 M9
862.8 106.109 M9
868.8 106.109 M9
868.8 72 M9
874.8 72 M9
874.8 106.521 M9
880.8 106.521 M9
880.8 72 M9
883.2 72 M9
883.2 106.525 M9
889.2 106.525 M9
889.2 72 M9
895.2 72 M9
895.2 107.321 M9
901.2 107.321 M9
901.2 72 M9
903.6 72 M9
903.6 107.319 M9
909.6 107.319 M9
909.6 72 M9
915.6 72 M9
915.6 108.933 M9
921.6 108.933 M9
921.6 72 M9
924 72 M9
924 108.948 M9
930 108.948 M9
930 72 M9
gsave
D9
grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
930 72 M9
72 72 M9
E9
grestore
873.3 200.254 S9
873.3 209.254 M9
882.3 236.254 M9
882.3 227.254 M9
873.3 200.254 M9
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
E9
grestore
881.7 199.597 S9
881.7 208.597 M9
890.7 235.597 M9
890.7 226.597 M9
881.7 199.597 M9
gsave 30.000000 45.000000 {cross} SS9 1.000000 G9
E9
grestore
893.7 203.012 S9
893.7 212.012 M9
902.7 239.012 M9
902.7 230.012 M9
893.7 203.012 M9
gsave 30.000000 90.000000 {cross} SS9 1.000000 G9
E9
grestore
902.1 202.322 S9
902.1 211.322 M9
911.1 238.322 M9
911.1 229.322 M9
902.1 202.322 M9
gsave 30.000000 135.000000 {cross} SS9 1.000000 G9
E9
grestore
914.1 211.118 S9
914.1 220.118 M9
923.1 247.118 M9
923.1 238.118 M9
914.1 211.118 M9
gsave 30.000000 180.000000 {cross} SS9 1.000000 G9
E9
grestore
922.5 210.286 S9
922.5 219.286 M9
931.5 246.286 M9
931.5 237.286 M9
922.5 210.286 M9
gsave 45.000000 45.000000 {pop} SS9 1.000000 G9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 144 TXC
9 /Helvetica-Bold SetTxt
(100) 0 68 141.3 TXR
4 /Helvetica SetTxt
(|) -90 72 216 TXC
9 /Helvetica-Bold SetTxt
(200) 0 68 213.3 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 144 TXC
(|) 90 936 216 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Combined execution time (normalized)) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 89.4 63 TXC
(2) 0 109.8 63 TXC
(4) 0 130.2 63 TXC
(8) 0 150.6 63 TXC
(16) 0 171 63 TXC
9 /Helvetica-Bold SetTxt
(tomcatv) 0 126 48.6 TXC
8 /Helvetica SetTxt
(1) 0 197.4 63 TXC
(2) 0 217.8 63 TXC
(4) 0 238.2 63 TXC
(8) 0 258.6 63 TXC
(16) 0 279 63 TXC
9 /Helvetica-Bold SetTxt
(swim) 0 234 48.6 TXC
8 /Helvetica SetTxt
(1) 0 305.4 63 TXC
(2) 0 325.8 63 TXC
(4) 0 346.2 63 TXC
(8) 0 366.6 63 TXC
(16) 0 387 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 342 48.6 TXC
8 /Helvetica SetTxt
(1) 0 413.4 63 TXC
(2) 0 433.8 63 TXC
(4) 0 454.2 63 TXC
(8) 0 474.6 63 TXC
(16) 0 495 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 450 48.6 TXC
8 /Helvetica SetTxt
(1) 0 521.4 63 TXC
(2) 0 541.8 63 TXC
(4) 0 562.2 63 TXC
(8) 0 582.6 63 TXC
(16) 0 603 63 TXC
9 /Helvetica-Bold SetTxt
(mgrid) 0 558 48.6 TXC
8 /Helvetica SetTxt
(1) 0 629.4 63 TXC
(2) 0 649.8 63 TXC
(4) 0 670.2 63 TXC
(8) 0 690.6 63 TXC
(16) 0 711 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 666 48.6 TXC
8 /Helvetica SetTxt
(1) 0 737.4 63 TXC
(2) 0 757.8 63 TXC
(4) 0 778.2 63 TXC
(8) 0 798.6 63 TXC
(16) 0 819 63 TXC
9 /Helvetica-Bold SetTxt
(turb3d) 0 774 48.6 TXC
8 /Helvetica SetTxt
(1) 0 845.4 63 TXC
(2) 0 865.8 63 TXC
10 /Helvetica SetTxt
(260) 90 880.8 253.8 TXL
8 /Helvetica SetTxt
(4) 0 886.2 63 TXC
10 /Helvetica SetTxt
(251) 90 889.2 253.8 TXL
(468) 90 901.2 253.8 TXL
8 /Helvetica SetTxt
(8) 0 906.6 63 TXC
10 /Helvetica SetTxt
(462) 90 909.6 253.8 TXL
(916) 90 921.6 253.8 TXL
8 /Helvetica SetTxt
(16) 0 927 63 TXC
10 /Helvetica SetTxt
(917) 90 930 253.8 TXL
9 /Helvetica-Bold SetTxt
(wave5) 0 882 48.6 TXC
10 /Helvetica-Bold SetTxt
(Combined Execution Time) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 89.4 54.6 TXC
() 0 109.8 54.6 TXC
() 0 130.2 54.6 TXC
() 0 150.6 54.6 TXC
() 0 171 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 126 39.15 TXC
8 /Helvetica SetTxt
() 0 197.4 54.6 TXC
() 0 217.8 54.6 TXC
() 0 238.2 54.6 TXC
() 0 258.6 54.6 TXC
() 0 279 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 234 39.15 TXC
8 /Helvetica SetTxt
() 0 305.4 54.6 TXC
() 0 325.8 54.6 TXC
() 0 346.2 54.6 TXC
() 0 366.6 54.6 TXC
() 0 387 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 342 39.15 TXC
8 /Helvetica SetTxt
() 0 413.4 54.6 TXC
() 0 433.8 54.6 TXC
() 0 454.2 54.6 TXC
() 0 474.6 54.6 TXC
() 0 495 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 450 39.15 TXC
8 /Helvetica SetTxt
() 0 521.4 54.6 TXC
() 0 541.8 54.6 TXC
() 0 562.2 54.6 TXC
() 0 582.6 54.6 TXC
() 0 603 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 558 39.15 TXC
8 /Helvetica SetTxt
() 0 629.4 54.6 TXC
() 0 649.8 54.6 TXC
() 0 670.2 54.6 TXC
() 0 690.6 54.6 TXC
() 0 711 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 666 39.15 TXC
8 /Helvetica SetTxt
() 0 737.4 54.6 TXC
() 0 757.8 54.6 TXC
() 0 778.2 54.6 TXC
() 0 798.6 54.6 TXC
() 0 819 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 774 39.15 TXC
8 /Helvetica SetTxt
() 0 845.4 54.6 TXC
() 0 865.8 54.6 TXC
10 /Helvetica SetTxt
() 90 880.8 243.3 TXL
8 /Helvetica SetTxt
() 0 886.2 54.6 TXC
10 /Helvetica SetTxt
() 90 889.2 243.3 TXL
() 90 901.2 243.3 TXL
8 /Helvetica SetTxt
() 0 906.6 54.6 TXC
10 /Helvetica SetTxt
() 90 909.6 243.3 TXL
() 90 921.6 243.3 TXL
8 /Helvetica SetTxt
() 0 927 54.6 TXC
10 /Helvetica SetTxt
() 90 930 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 882 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 38 32 972 275 467 121.5 54 322.97 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/cdc-mcpi.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 248.625 958.813 248.625 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.625 958.813 248.625 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 235.625 958.813 235.625 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.625 958.813 235.625 
L9 grestore
10 /Helvetica SetTxt
( False sharing) 0 960.231 239.125 TXL
72 72 S9
[] 1.000000 SL
944.64 235.625 958.813 235.625 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.625 958.813 235.625 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.625 958.813 222.625 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.625 958.813 222.625 
L9 grestore
( True sharing) 0 960.231 226.125 TXL
72 72 S9
[] 1.000000 SL
gsave 50.000000 135.000000 {pop} SS9 0.700000 G9
944.64 222.625 958.813 222.625 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.625 958.813 222.625 
L9 grestore
[] 1.000000 SL
gsave 50.000000 135.000000 {pop} SS9 1.000000 G9
944.64 209.625 958.813 209.625 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.625 958.813 209.625 
L9 grestore
( Replacement) 0 960.231 213.125 TXL
72 72 S9
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
944.64 209.625 958.813 209.625 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.625 958.813 209.625 
L9 grestore
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
944.64 196.625 958.813 196.625 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 196.625 958.813 196.625 
L9 grestore
( On-chip Cache) 0 960.231 200.125 TXL
72 72 S9
[] 1.000000 SL
78 72 M9
78 178.803 M9
84 178.803 M9
84 72 M9
86.4 72 M9
86.4 178.808 M9
92.4 178.808 M9
92.4 72 M9
98.4 72 M9
98.4 180.007 M9
104.4 180.007 M9
104.4 72 M9
106.8 72 M9
106.8 145.615 M9
112.8 145.615 M9
112.8 72 M9
118.8 72 M9
118.8 184.748 M9
124.8 184.748 M9
124.8 72 M9
127.2 72 M9
127.2 143.535 M9
133.2 143.535 M9
133.2 72 M9
139.2 72 M9
139.2 213.343 M9
145.2 213.343 M9
145.2 72 M9
147.6 72 M9
147.6 127.141 M9
153.6 127.141 M9
153.6 72 M9
159.6 72 M9
159.6 252 M9
165.6 252 M9
165.6 72 M9
168 72 M9
168 93.8876 M9
174 93.8876 M9
174 72 M9
186 72 M9
186 145.452 M9
192 145.452 M9
192 72 M9
194.4 72 M9
194.4 146.391 M9
200.4 146.391 M9
200.4 72 M9
206.4 72 M9
206.4 146.162 M9
212.4 146.162 M9
212.4 72 M9
214.8 72 M9
214.8 147.237 M9
220.8 147.237 M9
220.8 72 M9
226.8 72 M9
226.8 148.874 M9
232.8 148.874 M9
232.8 72 M9
235.2 72 M9
235.2 149.612 M9
241.2 149.612 M9
241.2 72 M9
247.2 72 M9
247.2 167.383 M9
253.2 167.383 M9
253.2 72 M9
255.6 72 M9
255.6 133.441 M9
261.6 133.441 M9
261.6 72 M9
267.6 72 M9
267.6 252 M9
273.6 252 M9
273.6 72 M9
276 72 M9
276 91.4299 M9
282 91.4299 M9
282 72 M9
294 72 M9
294 129.898 M9
300 129.898 M9
300 72 M9
302.4 72 M9
302.4 137.735 M9
308.4 137.735 M9
308.4 72 M9
314.4 72 M9
314.4 125.307 M9
320.4 125.307 M9
320.4 72 M9
322.8 72 M9
322.8 127.881 M9
328.8 127.881 M9
328.8 72 M9
334.8 72 M9
334.8 122.355 M9
340.8 122.355 M9
340.8 72 M9
343.2 72 M9
343.2 123.571 M9
349.2 123.571 M9
349.2 72 M9
355.2 72 M9
355.2 123.978 M9
361.2 123.978 M9
361.2 72 M9
363.6 72 M9
363.6 124.391 M9
369.6 124.391 M9
369.6 72 M9
375.6 72 M9
375.6 134.068 M9
381.6 134.068 M9
381.6 72 M9
384 72 M9
384 132.883 M9
390 132.883 M9
390 72 M9
402 72 M9
402 168.912 M9
408 168.912 M9
408 72 M9
410.4 72 M9
410.4 169.74 M9
416.4 169.74 M9
416.4 72 M9
422.4 72 M9
422.4 166.347 M9
428.4 166.347 M9
428.4 72 M9
430.8 72 M9
430.8 150.262 M9
436.8 150.262 M9
436.8 72 M9
442.8 72 M9
442.8 166.172 M9
448.8 166.172 M9
448.8 72 M9
451.2 72 M9
451.2 126.995 M9
457.2 126.995 M9
457.2 72 M9
463.2 72 M9
463.2 178.41 M9
469.2 178.41 M9
469.2 72 M9
471.6 72 M9
471.6 106.051 M9
477.6 106.051 M9
477.6 72 M9
483.6 72 M9
483.6 228.178 M9
489.6 228.178 M9
489.6 72 M9
492 72 M9
492 108.464 M9
498 108.464 M9
498 72 M9
510 72 M9
510 104.659 M9
516 104.659 M9
516 72 M9
518.4 72 M9
518.4 103.988 M9
524.4 103.988 M9
524.4 72 M9
530.4 72 M9
530.4 103.444 M9
536.4 103.444 M9
536.4 72 M9
538.8 72 M9
538.8 102.22 M9
544.8 102.22 M9
544.8 72 M9
550.8 72 M9
550.8 98.5069 M9
556.8 98.5069 M9
556.8 72 M9
559.2 72 M9
559.2 99.6267 M9
565.2 99.6267 M9
565.2 72 M9
571.2 72 M9
571.2 94.0505 M9
577.2 94.0505 M9
577.2 72 M9
579.6 72 M9
579.6 91.6677 M9
585.6 91.6677 M9
585.6 72 M9
591.6 72 M9
591.6 95.4507 M9
597.6 95.4507 M9
597.6 72 M9
600 72 M9
600 97.6331 M9
606 97.6331 M9
606 72 M9
618 72 M9
618 121.574 M9
624 121.574 M9
624 72 M9
626.4 72 M9
626.4 121.326 M9
632.4 121.326 M9
632.4 72 M9
638.4 72 M9
638.4 120.223 M9
644.4 120.223 M9
644.4 72 M9
646.8 72 M9
646.8 119.987 M9
652.8 119.987 M9
652.8 72 M9
658.8 72 M9
658.8 119.892 M9
664.8 119.892 M9
664.8 72 M9
667.2 72 M9
667.2 120.773 M9
673.2 120.773 M9
673.2 72 M9
679.2 72 M9
679.2 122.238 M9
685.2 122.238 M9
685.2 72 M9
687.6 72 M9
687.6 120.798 M9
693.6 120.798 M9
693.6 72 M9
699.6 72 M9
699.6 130.171 M9
705.6 130.171 M9
705.6 72 M9
708 72 M9
708 129.349 M9
714 129.349 M9
714 72 M9
726 72 M9
726 86.3801 M9
732 86.3801 M9
732 72 M9
734.4 72 M9
734.4 86.3225 M9
740.4 86.3225 M9
740.4 72 M9
746.4 72 M9
746.4 86.3985 M9
752.4 86.3985 M9
752.4 72 M9
754.8 72 M9
754.8 86.5272 M9
760.8 86.5272 M9
760.8 72 M9
766.8 72 M9
766.8 87.9372 M9
772.8 87.9372 M9
772.8 72 M9
775.2 72 M9
775.2 88.0025 M9
781.2 88.0025 M9
781.2 72 M9
787.2 72 M9
787.2 90.4641 M9
793.2 90.4641 M9
793.2 72 M9
795.6 72 M9
795.6 89.2157 M9
801.6 89.2157 M9
801.6 72 M9
807.6 72 M9
807.6 97.6445 M9
813.6 97.6445 M9
813.6 72 M9
816 72 M9
816 91.6645 M9
822 91.6645 M9
822 72 M9
834 72 M9
834 124.694 M9
840 124.694 M9
840 72 M9
842.4 72 M9
842.4 119.214 M9
848.4 119.214 M9
848.4 72 M9
854.4 72 M9
854.4 133.508 M9
860.4 133.508 M9
860.4 72 M9
862.8 72 M9
862.8 131.672 M9
868.8 131.672 M9
868.8 72 M9
874.8 72 M9
874.8 139.22 M9
880.8 139.22 M9
880.8 72 M9
883.2 72 M9
883.2 135.744 M9
889.2 135.744 M9
889.2 72 M9
895.2 72 M9
895.2 148.533 M9
901.2 148.533 M9
901.2 72 M9
903.6 72 M9
903.6 145.186 M9
909.6 145.186 M9
909.6 72 M9
915.6 72 M9
915.6 175.991 M9
921.6 175.991 M9
921.6 72 M9
924 72 M9
924 172.426 M9
930 172.426 M9
930 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
930 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
78 72 M9
78 178.803 M9
84 178.803 M9
84 72 M9
86.4 72 M9
86.4 178.808 M9
92.4 178.808 M9
92.4 72 M9
98.4 72 M9
98.4 180.007 M9
104.4 180.007 M9
104.4 72 M9
106.8 72 M9
106.8 145.614 M9
112.8 145.614 M9
112.8 72 M9
118.8 72 M9
118.8 184.743 M9
124.8 184.743 M9
124.8 72 M9
127.2 72 M9
127.2 143.532 M9
133.2 143.532 M9
133.2 72 M9
139.2 72 M9
139.2 213.33 M9
145.2 213.33 M9
145.2 72 M9
147.6 72 M9
147.6 127.128 M9
153.6 127.128 M9
153.6 72 M9
159.6 72 M9
159.6 252 M9
165.6 252 M9
165.6 72 M9
168 72 M9
168 93.8151 M9
174 93.8151 M9
174 72 M9
186 72 M9
186 145.452 M9
192 145.452 M9
192 72 M9
194.4 72 M9
194.4 146.391 M9
200.4 146.391 M9
200.4 72 M9
206.4 72 M9
206.4 146.157 M9
212.4 146.157 M9
212.4 72 M9
214.8 72 M9
214.8 147.235 M9
220.8 147.235 M9
220.8 72 M9
226.8 72 M9
226.8 148.861 M9
232.8 148.861 M9
232.8 72 M9
235.2 72 M9
235.2 149.605 M9
241.2 149.605 M9
241.2 72 M9
247.2 72 M9
247.2 167.35 M9
253.2 167.35 M9
253.2 72 M9
255.6 72 M9
255.6 133.419 M9
261.6 133.419 M9
261.6 72 M9
267.6 72 M9
267.6 252 M9
273.6 252 M9
273.6 72 M9
276 72 M9
276 91.3471 M9
282 91.3471 M9
282 72 M9
294 72 M9
294 129.898 M9
300 129.898 M9
300 72 M9
302.4 72 M9
302.4 137.735 M9
308.4 137.735 M9
308.4 72 M9
314.4 72 M9
314.4 124.332 M9
320.4 124.332 M9
320.4 72 M9
322.8 72 M9
322.8 127.014 M9
328.8 127.014 M9
328.8 72 M9
334.8 72 M9
334.8 119.726 M9
340.8 119.726 M9
340.8 72 M9
343.2 72 M9
343.2 121.006 M9
349.2 121.006 M9
349.2 72 M9
355.2 72 M9
355.2 117.392 M9
361.2 117.392 M9
361.2 72 M9
363.6 72 M9
363.6 117.337 M9
369.6 117.337 M9
369.6 72 M9
375.6 72 M9
375.6 122.825 M9
381.6 122.825 M9
381.6 72 M9
384 72 M9
384 121.723 M9
390 121.723 M9
390 72 M9
402 72 M9
402 168.912 M9
408 168.912 M9
408 72 M9
410.4 72 M9
410.4 169.74 M9
416.4 169.74 M9
416.4 72 M9
422.4 72 M9
422.4 166.323 M9
428.4 166.323 M9
428.4 72 M9
430.8 72 M9
430.8 150.241 M9
436.8 150.241 M9
436.8 72 M9
442.8 72 M9
442.8 166.123 M9
448.8 166.123 M9
448.8 72 M9
451.2 72 M9
451.2 126.948 M9
457.2 126.948 M9
457.2 72 M9
463.2 72 M9
463.2 178.291 M9
469.2 178.291 M9
469.2 72 M9
471.6 72 M9
471.6 105.917 M9
477.6 105.917 M9
477.6 72 M9
483.6 72 M9
483.6 227.729 M9
489.6 227.729 M9
489.6 72 M9
492 72 M9
492 108.019 M9
498 108.019 M9
498 72 M9
510 72 M9
510 104.659 M9
516 104.659 M9
516 72 M9
518.4 72 M9
518.4 103.988 M9
524.4 103.988 M9
524.4 72 M9
530.4 72 M9
530.4 103.407 M9
536.4 103.407 M9
536.4 72 M9
538.8 72 M9
538.8 102.182 M9
544.8 102.182 M9
544.8 72 M9
550.8 72 M9
550.8 98.4367 M9
556.8 98.4367 M9
556.8 72 M9
559.2 72 M9
559.2 99.555 M9
565.2 99.555 M9
565.2 72 M9
571.2 72 M9
571.2 93.9088 M9
577.2 93.9088 M9
577.2 72 M9
579.6 72 M9
579.6 91.5196 M9
585.6 91.5196 M9
585.6 72 M9
591.6 72 M9
591.6 95.1607 M9
597.6 95.1607 M9
597.6 72 M9
600 72 M9
600 97.3332 M9
606 97.3332 M9
606 72 M9
618 72 M9
618 121.574 M9
624 121.574 M9
624 72 M9
626.4 72 M9
626.4 121.326 M9
632.4 121.326 M9
632.4 72 M9
638.4 72 M9
638.4 120.22 M9
644.4 120.22 M9
644.4 72 M9
646.8 72 M9
646.8 119.984 M9
652.8 119.984 M9
652.8 72 M9
658.8 72 M9
658.8 119.881 M9
664.8 119.881 M9
664.8 72 M9
667.2 72 M9
667.2 120.757 M9
673.2 120.757 M9
673.2 72 M9
679.2 72 M9
679.2 122.217 M9
685.2 122.217 M9
685.2 72 M9
687.6 72 M9
687.6 120.773 M9
693.6 120.773 M9
693.6 72 M9
699.6 72 M9
699.6 130.102 M9
705.6 130.102 M9
705.6 72 M9
708 72 M9
708 129.243 M9
714 129.243 M9
714 72 M9
726 72 M9
726 86.3801 M9
732 86.3801 M9
732 72 M9
734.4 72 M9
734.4 86.3225 M9
740.4 86.3225 M9
740.4 72 M9
746.4 72 M9
746.4 86.3985 M9
752.4 86.3985 M9
752.4 72 M9
754.8 72 M9
754.8 86.5272 M9
760.8 86.5272 M9
760.8 72 M9
766.8 72 M9
766.8 86.7138 M9
772.8 86.7138 M9
772.8 72 M9
775.2 72 M9
775.2 86.8564 M9
781.2 86.8564 M9
781.2 72 M9
787.2 72 M9
787.2 88.9881 M9
793.2 88.9881 M9
793.2 72 M9
795.6 72 M9
795.6 87.7393 M9
801.6 87.7393 M9
801.6 72 M9
807.6 72 M9
807.6 96.0108 M9
813.6 96.0108 M9
813.6 72 M9
816 72 M9
816 90.0378 M9
822 90.0378 M9
822 72 M9
834 72 M9
834 124.694 M9
840 124.694 M9
840 72 M9
842.4 72 M9
842.4 119.214 M9
848.4 119.214 M9
848.4 72 M9
854.4 72 M9
854.4 132.679 M9
860.4 132.679 M9
860.4 72 M9
862.8 72 M9
862.8 130.846 M9
868.8 130.846 M9
868.8 72 M9
874.8 72 M9
874.8 137.926 M9
880.8 137.926 M9
880.8 72 M9
883.2 72 M9
883.2 134.445 M9
889.2 134.445 M9
889.2 72 M9
895.2 72 M9
895.2 146.458 M9
901.2 146.458 M9
901.2 72 M9
903.6 72 M9
903.6 143.083 M9
909.6 143.083 M9
909.6 72 M9
915.6 72 M9
915.6 171.272 M9
921.6 171.272 M9
921.6 72 M9
924 72 M9
924 167.693 M9
930 167.693 M9
930 72 M9
gsave
D9
grestore
930 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
78 72 M9
78 178.803 M9
84 178.803 M9
84 72 M9
86.4 72 M9
86.4 178.808 M9
92.4 178.808 M9
92.4 72 M9
98.4 72 M9
98.4 179.975 M9
104.4 179.975 M9
104.4 72 M9
106.8 72 M9
106.8 145.58 M9
112.8 145.58 M9
112.8 72 M9
118.8 72 M9
118.8 184.626 M9
124.8 184.626 M9
124.8 72 M9
127.2 72 M9
127.2 143.425 M9
133.2 143.425 M9
133.2 72 M9
139.2 72 M9
139.2 212.992 M9
145.2 212.992 M9
145.2 72 M9
147.6 72 M9
147.6 126.833 M9
153.6 126.833 M9
153.6 72 M9
159.6 72 M9
159.6 252 M9
165.6 252 M9
165.6 72 M9
168 72 M9
168 92.8053 M9
174 92.8053 M9
174 72 M9
186 72 M9
186 145.452 M9
192 145.452 M9
192 72 M9
194.4 72 M9
194.4 146.391 M9
200.4 146.391 M9
200.4 72 M9
206.4 72 M9
206.4 146.035 M9
212.4 146.035 M9
212.4 72 M9
214.8 72 M9
214.8 147.117 M9
220.8 147.117 M9
220.8 72 M9
226.8 72 M9
226.8 148.576 M9
232.8 148.576 M9
232.8 72 M9
235.2 72 M9
235.2 149.335 M9
241.2 149.335 M9
241.2 72 M9
247.2 72 M9
247.2 166.756 M9
253.2 166.756 M9
253.2 72 M9
255.6 72 M9
255.6 132.817 M9
261.6 132.817 M9
261.6 72 M9
267.6 72 M9
267.6 252 M9
273.6 252 M9
273.6 72 M9
276 72 M9
276 89.9225 M9
282 89.9225 M9
282 72 M9
294 72 M9
294 129.898 M9
300 129.898 M9
300 72 M9
302.4 72 M9
302.4 137.735 M9
308.4 137.735 M9
308.4 72 M9
314.4 72 M9
314.4 123.448 M9
320.4 123.448 M9
320.4 72 M9
322.8 72 M9
322.8 126.13 M9
328.8 126.13 M9
328.8 72 M9
334.8 72 M9
334.8 118.105 M9
340.8 118.105 M9
340.8 72 M9
343.2 72 M9
343.2 119.383 M9
349.2 119.383 M9
349.2 72 M9
355.2 72 M9
355.2 114.575 M9
361.2 114.575 M9
361.2 72 M9
363.6 72 M9
363.6 114.52 M9
369.6 114.52 M9
369.6 72 M9
375.6 72 M9
375.6 116.856 M9
381.6 116.856 M9
381.6 72 M9
384 72 M9
384 115.681 M9
390 115.681 M9
390 72 M9
402 72 M9
402 168.912 M9
408 168.912 M9
408 72 M9
410.4 72 M9
410.4 169.74 M9
416.4 169.74 M9
416.4 72 M9
422.4 72 M9
422.4 165.192 M9
428.4 165.192 M9
428.4 72 M9
430.8 72 M9
430.8 149.119 M9
436.8 149.119 M9
436.8 72 M9
442.8 72 M9
442.8 164.062 M9
448.8 164.062 M9
448.8 72 M9
451.2 72 M9
451.2 124.81 M9
457.2 124.81 M9
457.2 72 M9
463.2 72 M9
463.2 174.54 M9
469.2 174.54 M9
469.2 72 M9
471.6 72 M9
471.6 102.03 M9
477.6 102.03 M9
477.6 72 M9
483.6 72 M9
483.6 216.783 M9
489.6 216.783 M9
489.6 72 M9
492 72 M9
492 99.7554 M9
498 99.7554 M9
498 72 M9
510 72 M9
510 104.659 M9
516 104.659 M9
516 72 M9
518.4 72 M9
518.4 103.988 M9
524.4 103.988 M9
524.4 72 M9
530.4 72 M9
530.4 102.575 M9
536.4 102.575 M9
536.4 72 M9
538.8 72 M9
538.8 101.335 M9
544.8 101.335 M9
544.8 72 M9
550.8 72 M9
550.8 96.4498 M9
556.8 96.4498 M9
556.8 72 M9
559.2 72 M9
559.2 97.5574 M9
565.2 97.5574 M9
565.2 72 M9
571.2 72 M9
571.2 89.8888 M9
577.2 89.8888 M9
577.2 72 M9
579.6 72 M9
579.6 87.438 M9
585.6 87.438 M9
585.6 72 M9
591.6 72 M9
591.6 86.4038 M9
597.6 86.4038 M9
597.6 72 M9
600 72 M9
600 88.6821 M9
606 88.6821 M9
606 72 M9
618 72 M9
618 121.574 M9
624 121.574 M9
624 72 M9
626.4 72 M9
626.4 121.326 M9
632.4 121.326 M9
632.4 72 M9
638.4 72 M9
638.4 119.449 M9
644.4 119.449 M9
644.4 72 M9
646.8 72 M9
646.8 119.166 M9
652.8 119.166 M9
652.8 72 M9
658.8 72 M9
658.8 118.145 M9
664.8 118.145 M9
664.8 72 M9
667.2 72 M9
667.2 119.067 M9
673.2 119.067 M9
673.2 72 M9
679.2 72 M9
679.2 118.927 M9
685.2 118.927 M9
685.2 72 M9
687.6 72 M9
687.6 117.481 M9
693.6 117.481 M9
693.6 72 M9
699.6 72 M9
699.6 126.405 M9
705.6 126.405 M9
705.6 72 M9
708 72 M9
708 125.46 M9
714 125.46 M9
714 72 M9
726 72 M9
726 86.3801 M9
732 86.3801 M9
732 72 M9
734.4 72 M9
734.4 86.3225 M9
740.4 86.3225 M9
740.4 72 M9
746.4 72 M9
746.4 84.3577 M9
752.4 84.3577 M9
752.4 72 M9
754.8 72 M9
754.8 84.5115 M9
760.8 84.5115 M9
760.8 72 M9
766.8 72 M9
766.8 83.526 M9
772.8 83.526 M9
772.8 72 M9
775.2 72 M9
775.2 83.6876 M9
781.2 83.6876 M9
781.2 72 M9
787.2 72 M9
787.2 84.8933 M9
793.2 84.8933 M9
793.2 72 M9
795.6 72 M9
795.6 83.4258 M9
801.6 83.4258 M9
801.6 72 M9
807.6 72 M9
807.6 90.2281 M9
813.6 90.2281 M9
813.6 72 M9
816 72 M9
816 84.2097 M9
822 84.2097 M9
822 72 M9
834 72 M9
834 124.694 M9
840 124.694 M9
840 72 M9
842.4 72 M9
842.4 119.214 M9
848.4 119.214 M9
848.4 72 M9
854.4 72 M9
854.4 121.001 M9
860.4 121.001 M9
860.4 72 M9
862.8 72 M9
862.8 119.187 M9
868.8 119.187 M9
868.8 72 M9
874.8 72 M9
874.8 118.58 M9
880.8 118.58 M9
880.8 72 M9
883.2 72 M9
883.2 115.32 M9
889.2 115.32 M9
889.2 72 M9
895.2 72 M9
895.2 118.794 M9
901.2 118.794 M9
901.2 72 M9
903.6 72 M9
903.6 115.419 M9
909.6 115.419 M9
909.6 72 M9
915.6 72 M9
915.6 125.677 M9
921.6 125.677 M9
921.6 72 M9
924 72 M9
924 121.946 M9
930 121.946 M9
930 72 M9
gsave
D9
grestore
gsave 50.000000 135.000000 {pop} SS9 0.700000 G9
930 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
78 72 M9
78 80.4312 M9
84 80.4312 M9
84 72 M9
86.4 72 M9
86.4 80.4328 M9
92.4 80.4328 M9
92.4 72 M9
98.4 72 M9
98.4 80.4764 M9
104.4 80.4764 M9
104.4 72 M9
106.8 72 M9
106.8 81.6079 M9
112.8 81.6079 M9
112.8 72 M9
118.8 72 M9
118.8 80.5976 M9
124.8 80.5976 M9
124.8 72 M9
127.2 72 M9
127.2 81.6533 M9
133.2 81.6533 M9
133.2 72 M9
139.2 72 M9
139.2 80.9813 M9
145.2 80.9813 M9
145.2 72 M9
147.6 72 M9
147.6 83.5271 M9
153.6 83.5271 M9
153.6 72 M9
159.6 72 M9
159.6 82.6419 M9
165.6 82.6419 M9
165.6 72 M9
168 72 M9
168 86.6748 M9
174 86.6748 M9
174 72 M9
186 72 M9
186 79.6182 M9
192 79.6182 M9
192 72 M9
194.4 72 M9
194.4 80.5477 M9
200.4 80.5477 M9
200.4 72 M9
206.4 72 M9
206.4 79.667 M9
212.4 79.667 M9
212.4 72 M9
214.8 72 M9
214.8 80.5692 M9
220.8 80.5692 M9
220.8 72 M9
226.8 72 M9
226.8 79.7159 M9
232.8 79.7159 M9
232.8 72 M9
235.2 72 M9
235.2 80.8747 M9
241.2 80.8747 M9
241.2 72 M9
247.2 72 M9
247.2 80.0498 M9
253.2 80.0498 M9
253.2 72 M9
255.6 72 M9
255.6 82.8578 M9
261.6 82.8578 M9
261.6 72 M9
267.6 72 M9
267.6 81.5142 M9
273.6 81.5142 M9
273.6 72 M9
276 72 M9
276 86.6045 M9
282 86.6045 M9
282 72 M9
294 72 M9
294 91.3981 M9
300 91.3981 M9
300 72 M9
302.4 72 M9
302.4 90.355 M9
308.4 90.355 M9
308.4 72 M9
314.4 72 M9
314.4 92.0226 M9
320.4 92.0226 M9
320.4 72 M9
322.8 72 M9
322.8 92.1472 M9
328.8 92.1472 M9
328.8 72 M9
334.8 72 M9
334.8 92.7462 M9
340.8 92.7462 M9
340.8 72 M9
343.2 72 M9
343.2 92.3423 M9
349.2 92.3423 M9
349.2 72 M9
355.2 72 M9
355.2 93.7475 M9
361.2 93.7475 M9
361.2 72 M9
363.6 72 M9
363.6 93.1175 M9
369.6 93.1175 M9
369.6 72 M9
375.6 72 M9
375.6 95.1746 M9
381.6 95.1746 M9
381.6 72 M9
384 72 M9
384 92.8762 M9
390 92.8762 M9
390 72 M9
402 72 M9
402 83.9058 M9
408 83.9058 M9
408 72 M9
410.4 72 M9
410.4 84.5936 M9
416.4 84.5936 M9
416.4 72 M9
422.4 72 M9
422.4 84.3284 M9
428.4 84.3284 M9
428.4 72 M9
430.8 72 M9
430.8 86.3978 M9
436.8 86.3978 M9
436.8 72 M9
442.8 72 M9
442.8 84.8948 M9
448.8 84.8948 M9
448.8 72 M9
451.2 72 M9
451.2 89.6191 M9
457.2 89.6191 M9
457.2 72 M9
463.2 72 M9
463.2 86.2194 M9
469.2 86.2194 M9
469.2 72 M9
471.6 72 M9
471.6 92.1183 M9
477.6 92.1183 M9
477.6 72 M9
483.6 72 M9
483.6 89.2735 M9
489.6 89.2735 M9
489.6 72 M9
492 72 M9
492 92.9881 M9
498 92.9881 M9
498 72 M9
510 72 M9
510 79.3571 M9
516 79.3571 M9
516 72 M9
518.4 72 M9
518.4 79.027 M9
524.4 79.027 M9
524.4 72 M9
530.4 72 M9
530.4 79.576 M9
536.4 79.576 M9
536.4 72 M9
538.8 72 M9
538.8 79.0472 M9
544.8 79.0472 M9
544.8 72 M9
550.8 72 M9
550.8 80.1435 M9
556.8 80.1435 M9
556.8 72 M9
559.2 72 M9
559.2 79.7452 M9
565.2 79.7452 M9
565.2 72 M9
571.2 72 M9
571.2 80.8072 M9
577.2 80.8072 M9
577.2 72 M9
579.6 72 M9
579.6 80.4977 M9
585.6 80.4977 M9
585.6 72 M9
591.6 72 M9
591.6 81.0559 M9
597.6 81.0559 M9
597.6 72 M9
600 72 M9
600 80.9905 M9
606 80.9905 M9
606 72 M9
618 72 M9
618 77.7401 M9
624 77.7401 M9
624 72 M9
626.4 72 M9
626.4 77.5434 M9
632.4 77.5434 M9
632.4 72 M9
638.4 72 M9
638.4 77.8593 M9
644.4 77.8593 M9
644.4 72 M9
646.8 72 M9
646.8 77.9084 M9
652.8 77.9084 M9
652.8 72 M9
658.8 72 M9
658.8 77.8321 M9
664.8 77.8321 M9
664.8 72 M9
667.2 72 M9
667.2 78.317 M9
673.2 78.317 M9
673.2 72 M9
679.2 72 M9
679.2 77.9541 M9
685.2 77.9541 M9
685.2 72 M9
687.6 72 M9
687.6 78.0239 M9
693.6 78.0239 M9
693.6 72 M9
699.6 72 M9
699.6 78.94 M9
705.6 78.94 M9
705.6 72 M9
708 72 M9
708 79.1512 M9
714 79.1512 M9
714 72 M9
726 72 M9
726 77.2096 M9
732 77.2096 M9
732 72 M9
734.4 72 M9
734.4 77.1767 M9
740.4 77.1767 M9
740.4 72 M9
746.4 72 M9
746.4 77.2204 M9
752.4 77.2204 M9
752.4 72 M9
754.8 72 M9
754.8 77.1794 M9
760.8 77.1794 M9
760.8 72 M9
766.8 72 M9
766.8 77.2303 M9
772.8 77.2303 M9
772.8 72 M9
775.2 72 M9
775.2 77.209 M9
781.2 77.209 M9
781.2 72 M9
787.2 72 M9
787.2 77.2661 M9
793.2 77.2661 M9
793.2 72 M9
795.6 72 M9
795.6 77.2489 M9
801.6 77.2489 M9
801.6 72 M9
807.6 72 M9
807.6 77.4051 M9
813.6 77.4051 M9
813.6 72 M9
816 72 M9
816 77.3079 M9
822 77.3079 M9
822 72 M9
834 72 M9
834 108.241 M9
840 108.241 M9
840 72 M9
842.4 72 M9
842.4 106.281 M9
848.4 106.281 M9
848.4 72 M9
854.4 72 M9
854.4 105.581 M9
860.4 105.581 M9
860.4 72 M9
862.8 72 M9
862.8 103.9 M9
868.8 103.9 M9
868.8 72 M9
874.8 72 M9
874.8 103.881 M9
880.8 103.881 M9
880.8 72 M9
883.2 72 M9
883.2 103.144 M9
889.2 103.144 M9
889.2 72 M9
895.2 72 M9
895.2 102.69 M9
901.2 102.69 M9
901.2 72 M9
903.6 72 M9
903.6 102.429 M9
909.6 102.429 M9
909.6 72 M9
915.6 72 M9
915.6 101.263 M9
921.6 101.263 M9
921.6 72 M9
924 72 M9
924 102.273 M9
930 102.273 M9
930 72 M9
gsave
D9
grestore
gsave 30.000000 180.000000 {pop} SS9 1.000000 G9
930 72 M9
72 72 M9
E9
grestore
158.1 177.547 S9
158.1 186.547 M9
167.1 213.547 M9
167.1 204.547 M9
158.1 177.547 M9
gsave 30.000000 45.000000 {cross} SS9 1.000000 G9
E9
grestore
266.1 177.171 S9
266.1 186.171 M9
275.1 213.171 M9
275.1 204.171 M9
266.1 177.171 M9
gsave 30.000000 90.000000 {cross} SS9 1.000000 G9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 128.25 TXC
9 /Helvetica-Bold SetTxt
(1) 0 68 125.55 TXR
4 /Helvetica SetTxt
(|) -90 72 184.5 TXC
9 /Helvetica-Bold SetTxt
(2) 0 68 181.8 TXR
4 /Helvetica SetTxt
(|) -90 72 240.75 TXC
9 /Helvetica-Bold SetTxt
(3) 0 68 238.05 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 128.25 TXC
(|) 90 936 184.5 TXC
(|) 90 936 240.75 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Memory cycles per instruction ) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 89.4 63 TXC
(2) 0 109.8 63 TXC
(4) 0 130.2 63 TXC
(8) 0 150.6 63 TXC
10 /Helvetica SetTxt
(5.49) 90 165.6 253.8 TXL
8 /Helvetica SetTxt
(16) 0 171 63 TXC
9 /Helvetica-Bold SetTxt
(tomcatv) 0 126 48.6 TXC
8 /Helvetica SetTxt
(1) 0 197.4 63 TXC
(2) 0 217.8 63 TXC
(4) 0 238.2 63 TXC
(8) 0 258.6 63 TXC
10 /Helvetica SetTxt
(3.90) 90 273.6 253.8 TXL
8 /Helvetica SetTxt
(16) 0 279 63 TXC
9 /Helvetica-Bold SetTxt
(swim) 0 234 48.6 TXC
8 /Helvetica SetTxt
(1) 0 305.4 63 TXC
(2) 0 325.8 63 TXC
(4) 0 346.2 63 TXC
(8) 0 366.6 63 TXC
(16) 0 387 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 342 48.6 TXC
8 /Helvetica SetTxt
(1) 0 413.4 63 TXC
(2) 0 433.8 63 TXC
(4) 0 454.2 63 TXC
(8) 0 474.6 63 TXC
(16) 0 495 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 450 48.6 TXC
8 /Helvetica SetTxt
(1) 0 521.4 63 TXC
(2) 0 541.8 63 TXC
(4) 0 562.2 63 TXC
(8) 0 582.6 63 TXC
(16) 0 603 63 TXC
9 /Helvetica-Bold SetTxt
(mgrid) 0 558 48.6 TXC
8 /Helvetica SetTxt
(1) 0 629.4 63 TXC
(2) 0 649.8 63 TXC
(4) 0 670.2 63 TXC
(8) 0 690.6 63 TXC
(16) 0 711 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 666 48.6 TXC
8 /Helvetica SetTxt
(1) 0 737.4 63 TXC
(2) 0 757.8 63 TXC
(4) 0 778.2 63 TXC
(8) 0 798.6 63 TXC
(16) 0 819 63 TXC
9 /Helvetica-Bold SetTxt
(turb3d) 0 774 48.6 TXC
8 /Helvetica SetTxt
(1) 0 845.4 63 TXC
(2) 0 865.8 63 TXC
(4) 0 886.2 63 TXC
(8) 0 906.6 63 TXC
(16) 0 927 63 TXC
9 /Helvetica-Bold SetTxt
(wave5) 0 882 48.6 TXC
10 /Helvetica-Bold SetTxt
(Memory System Behavior) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 89.4 54.6 TXC
() 0 109.8 54.6 TXC
() 0 130.2 54.6 TXC
() 0 150.6 54.6 TXC
10 /Helvetica SetTxt
() 90 165.6 243.3 TXL
8 /Helvetica SetTxt
() 0 171 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 126 39.15 TXC
8 /Helvetica SetTxt
() 0 197.4 54.6 TXC
() 0 217.8 54.6 TXC
() 0 238.2 54.6 TXC
() 0 258.6 54.6 TXC
10 /Helvetica SetTxt
() 90 273.6 243.3 TXL
8 /Helvetica SetTxt
() 0 279 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 234 39.15 TXC
8 /Helvetica SetTxt
() 0 305.4 54.6 TXC
() 0 325.8 54.6 TXC
() 0 346.2 54.6 TXC
() 0 366.6 54.6 TXC
() 0 387 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 342 39.15 TXC
8 /Helvetica SetTxt
() 0 413.4 54.6 TXC
() 0 433.8 54.6 TXC
() 0 454.2 54.6 TXC
() 0 474.6 54.6 TXC
() 0 495 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 450 39.15 TXC
8 /Helvetica SetTxt
() 0 521.4 54.6 TXC
() 0 541.8 54.6 TXC
() 0 562.2 54.6 TXC
() 0 582.6 54.6 TXC
() 0 603 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 558 39.15 TXC
8 /Helvetica SetTxt
() 0 629.4 54.6 TXC
() 0 649.8 54.6 TXC
() 0 670.2 54.6 TXC
() 0 690.6 54.6 TXC
() 0 711 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 666 39.15 TXC
8 /Helvetica SetTxt
() 0 737.4 54.6 TXC
() 0 757.8 54.6 TXC
() 0 778.2 54.6 TXC
() 0 798.6 54.6 TXC
() 0 819 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 774 39.15 TXC
8 /Helvetica SetTxt
() 0 845.4 54.6 TXC
() 0 865.8 54.6 TXC
() 0 886.2 54.6 TXC
() 0 906.6 54.6 TXC
() 0 927 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 882 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
56.39 261.3 554.72 328.3 R
7 X
0 0 0 1 0 0 0 K
V
56.39 314.8 554.72 328.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.39 314.8 554.72 328.3 R
7 X
0 0 0 1 0 0 0 K
V
56.39 323.8 524.39 323.8 2 L
V
1 H
2 Z
0 X
N
54 261.88 558 559.8 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 6.  Impact of Compiler) 56.39 308.8 T
(-Dir) 180.54 308.8 T
(ected Page Coloring) 196.37 308.8 T
1 F
0.71 (For each application and a given number of processors, we compare the performance of a standard page coloring policy \050left bar\051 with) 56.39 297.8 P
0.2 (compiler) 56.39 286.8 P
0.2 (-directed page coloring \050right bar\051. CDPC has no ef) 88.2 286.8 P
0.2 (fect on the other two applications,) 274.89 286.8 P
2 F
0.2 (apsi) 400.85 286.8 P
1 F
0.2 ( and) 415.85 286.8 P
2 F
0.2 (fpppp) 433.76 286.8 P
1 F
0.2 (, so we omit them for space) 454.26 286.8 P
56.39 261.88 554.72 272.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.39 259.3 554.72 272.8 R
7 X
0 0 0 1 0 0 0 K
V
56.39 268.3 524.39 268.3 2 L
V
1 H
2 Z
0 X
N
54 261.88 558 559.8 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(considerations.) 56.39 275.8 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.94 (T) 317.88 256.79 P
0.94 (o avoid a common source of con\337icts in the on-chip cache, we) 322.75 256.79 P
-0.03 (also use the group access information generated by the compiler to) 317.88 246.79 P
2.1 (insert small amount of padding between data structures in the) 317.88 236.79 P
1.37 (virtual address space. As a result, the starting addresses of data) 317.88 226.79 P
0.17 (structures that are used together never map to the same location in) 317.88 216.79 P
(the on-chip cache.) 317.88 206.79 T
0 12 Q
(6  Simulation Results) 317.88 185.79 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
2.22 (In this section we use SimOS to evaluate the performance of) 317.88 166.79 P
0.48 (compiler) 317.88 156.79 P
0.48 (-directed page coloring. W) 349.7 156.79 P
0.48 (e compare it with IRIX\325) 446.88 156.79 P
0.48 (s page) 534.78 156.79 P
1.77 (coloring policy) 317.88 146.79 P
1.77 (. W) 373.82 146.79 P
1.77 (e then study the impact of a complementary) 387.86 146.79 P
0.51 (technique, compiler) 317.88 136.79 P
0.51 (-inserted prefetching, that hides the latency of) 389.7 136.79 P
(cache misses.) 317.88 126.79 T
0 11 Q
(6.1  Impact of Compiler) 317.88 109.46 T
(-Dir) 429.6 109.46 T
(ected Page Coloring) 448.95 109.46 T
1 9 Q
0.48 (Figure) 317.88 92.79 P
0.48 (6 shows the performance results of compiler) 343.63 92.79 P
0.48 (-directed page) 506.29 92.79 P
0.77 (coloring for our base con\336guration, a 1MB direct-mapped cache.) 317.88 82.79 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.74 (W) 54 562.82 P
0.74 (e see that CDPC can have a signi\336cant impact on performance) 61.78 562.82 P
0.56 (by greatly reducing the number of replacement misses. Also, it is) 54 552.82 P
(generally more ef) 54 542.82 T
(fective as the number of processors is increased.) 117.32 542.82 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0.57 (For) 54 527.82 P
2 F
0.57 (tomcatv) 69.32 527.82 P
0.57 (, swim) 97.15 527.82 P
1 F
0.57 (, and) 120.72 527.82 P
2 F
0.57 (hydr) 141.61 527.82 P
0.57 (o2d) 157.77 527.82 P
1 F
0.57 (, CDPC shows lar) 171.27 527.82 P
0.57 (ge performance) 237.33 527.82 P
8.75 (improvements. For) 54 517.82 P
2 F
8.75 (tomcatv) 142.24 517.82 P
1 F
8.75 (and) 181.74 517.82 P
2 F
8.75 ( hydr) 194.73 517.82 P
8.75 (o2d) 221.9 517.82 P
1 F
8.75 (, performance) 235.4 517.82 P
1.49 (improvements start with two processors and for) 54 507.82 P
2 F
1.49 (swim) 238.14 507.82 P
1 F
1.49 ( the gains) 256.65 507.82 P
0.68 (begin with eight processors. When the applications\325 working sets) 54 497.82 P
2.47 (\0508MB for) 54 487.82 P
2 F
2.47 ( hydr) 90.72 487.82 P
2.47 (o2d) 111.6 487.82 P
1 F
2.47 (, 14MB for) 125.1 487.82 P
2 F
2.47 (tomcatv) 175.01 487.82 P
1 F
2.47 ( and) 203.51 487.82 P
2 F
2.47 (swim) 225.95 487.82 P
1 F
2.47 (\051 \336t into the) 244.45 487.82 P
0.81 (caches, CDPC eliminates nearly all of the con\337ict misses. In our) 54 477.82 P
0.74 (classi\336cation, the stall time associated with on-chip cache misses) 54 467.82 P
0.87 (corresponds only to the stall time associated with hits in the of) 54 457.82 P
0.87 (f-) 288.13 457.82 P
0.6 (chip cache, and not to misses serviced by memory) 54 447.82 P
0.6 (. As a result of) 238.96 447.82 P
1.66 (the better utilization of the of) 54 437.82 P
1.66 (f-chip cache, we therefore see an) 167.38 437.82 P
(increase in the on-chip stall time.) 54 427.82 T
0.22 (Because the number of replacement misses in) 54 412.82 P
2 F
0.22 (turb3d) 222.22 412.82 P
1 F
0.22 ( and) 246.23 412.82 P
2 F
0.22 (mgrid) 264.15 412.82 P
1 F
0.22 ( is) 285.65 412.82 P
1.74 (small, CDPC shows only a slight improvement in performance) 54 402.82 P
2.87 (above four and eight processors. The performance of) 54 392.82 P
2 F
2.87 (su2cor) 269.62 392.82 P
1 F
0.16 (actually degrades slightly with CDPC. In this case, each processor) 54 382.82 P
3.58 (does not access contiguous regions of some important data) 54 372.82 P
0.43 (structures. CDPC is only applied to the remaining data structures,) 54 362.82 P
0.24 (but the mapping happens to con\337ict with the other data structures.) 54 352.82 P
0.28 (Finally) 54 342.82 P
0.28 (, CDPC does not improve the performance of) 78.92 342.82 P
2 F
0.28 (applu,) 246.85 342.82 P
1 F
0.28 ( which) 269.6 342.82 P
(suf) 54 332.82 T
(fers from capacity misses due to its lar) 64.84 332.82 T
(ge \05031MB\051 data set.) 203.4 332.82 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2.87 (T) 54 317.82 P
2.87 (wo-way set-associative caches are known to be ef) 58.87 317.82 P
2.87 (fective at) 258.01 317.82 P
-0.13 (eliminating many con\337ict misses. W) 54 307.82 P
-0.13 (e therefore study the impact of) 184.53 307.82 P
0.29 (CDPC with such a cache con\336guration \050Figure) 54 297.82 P
0.29 (7\051. W) 226.46 297.82 P
0.29 (e see that the) 246.52 297.82 P
1.56 (improvements for CDPC on two-way set-associative caches are) 54 287.82 P
0.74 (similar to that on direct-mapped caches. Although set-associative) 54 277.82 P
0.79 (caches reduce con\337ict hot spots, they do not address the issue of) 54 267.82 P
0.82 (under) 54 257.82 P
0.82 (-utilized caches. For example,) 74.31 257.82 P
2 F
0.82 (tomcatv) 188.05 257.82 P
1 F
0.82 ( has seven lar) 216.54 257.82 P
0.82 (ge data) 267.56 257.82 P
-0.17 (structures and only an eight-way set-associative cache of size 1MB) 54 247.82 P
4.42 (would eliminate all con\337icts for 16 processors. For some) 54 237.82 P
-0.03 (applications such as) 54 227.82 P
2 F
-0.03 (swim) 128.17 227.82 P
1 F
-0.03 (and) 148.9 227.82 P
2 F
-0.03 (tomcatv) 164.12 227.82 P
1 F
-0.03 (, the bene\336ts of using a two-) 192.03 227.82 P
3.71 (way set-associative cache are small since SUIF\325) 54 217.82 P
3.71 (s policy of) 248.71 217.82 P
5.13 (aligning data structures on cache line boundaries already) 54 207.82 P
1.49 (eliminates most of the con\337ict misses that would show up in a) 54 197.82 P
(direct-mapped cache and not in set -associative caches.) 54 187.82 T
0.05 (Figure) 54 172.82 P
0.05 (7 also shows the impact of a lar) 79.75 172.82 P
0.05 (ger 4MB cache on the same) 193.66 172.82 P
1.08 (workloads. The bene\336ts of CDPC appear with fewer processors,) 54 162.82 P
3.02 (e.g. for) 54 152.82 P
2 F
3.02 (tomcatv) 88.03 152.82 P
1 F
3.02 ( and) 116.52 152.82 P
2 F
3.02 (swim) 140.05 152.82 P
1 F
3.02 (. W) 158.56 152.82 P
3.02 (ith lar) 174.21 152.82 P
3.02 (ger caches, it takes less) 198.32 152.82 P
0.39 (processors to \336t the data set into the aggregate cache size. W) 54 142.82 P
0.39 (e see) 275.99 142.82 P
0.89 (that) 54 132.82 P
2 F
0.89 (hydr) 70.64 132.82 P
0.89 (o2d) 86.81 132.82 P
1 F
0.89 (, whose data set is only 8 MB, bene\336ts signi\336cantly) 100.31 132.82 P
2.67 (from the increase in cache size, even in the sequential case.) 54 122.82 P
0.69 (Although CDPC is still ef) 54 112.82 P
0.69 (fective at reducing replacement misses,) 149.63 112.82 P
1.98 (this does not translate into a lar) 54 102.82 P
1.98 (ge performance gain since the) 178.23 102.82 P
0.17 (default page mapping policy is already ef) 54 92.82 P
0.17 (fective at eliminating the) 203.86 92.82 P
1.9 (problem. On the other hand,) 54 82.82 P
2 F
1.9 (applu) 167.23 82.82 P
1 F
1.9 (, whose data set is 31 MB,) 187.73 82.82 P
54 568.82 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
53.29 570.78 556.62 627.99 R
7 X
0 0 0 1 0 0 0 K
V
54 614.49 556.62 627.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
53.29 614.49 556.62 627.99 R
7 X
0 0 0 1 0 0 0 K
V
53.29 623.49 521.29 623.49 2 L
V
1 H
2 Z
0 X
N
54 568.82 558 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 7.  Impact of CDPC on T) 53.29 608.49 T
(wo-way Set-associative Caches and a larger 4MB Dir) 185.61 608.49 T
(ect-mapped Cache.) 388.67 608.49 T
1 F
-0.13 (The combined execution time with the default page coloring policy \050left bar\051 is compared with the performance with compiler) 53.29 597.49 P
-0.13 (-directed-page) 504.64 597.49 P
54 569.99 556.62 583.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
53.29 569.99 556.62 583.49 R
7 X
0 0 0 1 0 0 0 K
V
53.29 578.99 521.29 578.99 2 L
V
1 H
2 Z
0 X
N
54 568.82 558 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(coloring \050right bar\051. W) 53.29 586.49 T
(e only show the results for the four benchmarks where CDPC is most signi\336cant.) 134.55 586.49 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 38 32 972 275 467 121.5 54 625.17 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/both-high.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( Overhead) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( Memory Stall) 0 960.231 225.9 TXL
72 72 S9
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( Execution) 0 960.231 212.9 TXL
72 72 S9
[] 1.000000 SL
77.76 72 M9
77.76 143.989 M9
83.52 143.989 M9
83.52 72 M9
85.824 72 M9
85.824 143.988 M9
91.584 143.988 M9
91.584 72 M9
97.344 72 M9
97.344 144.554 M9
103.104 144.554 M9
103.104 72 M9
105.408 72 M9
105.408 144.536 M9
111.168 144.536 M9
111.168 72 M9
116.928 72 M9
116.928 144.646 M9
122.688 144.646 M9
122.688 72 M9
124.992 72 M9
124.992 144.347 M9
130.752 144.347 M9
130.752 72 M9
136.512 72 M9
136.512 152.534 M9
142.272 152.534 M9
142.272 72 M9
144.576 72 M9
144.576 139.039 M9
150.336 139.039 M9
150.336 72 M9
156.096 72 M9
156.096 211.795 M9
161.856 211.795 M9
161.856 72 M9
164.16 72 M9
164.16 116.392 M9
169.92 116.392 M9
169.92 72 M9
181.44 72 M9
181.44 141.211 M9
187.2 141.211 M9
187.2 72 M9
189.504 72 M9
189.504 141.285 M9
195.264 141.285 M9
195.264 72 M9
201.024 72 M9
201.024 141.39 M9
206.784 141.39 M9
206.784 72 M9
209.088 72 M9
209.088 130.502 M9
214.848 130.502 M9
214.848 72 M9
220.608 72 M9
220.608 143.381 M9
226.368 143.381 M9
226.368 72 M9
228.672 72 M9
228.672 112.276 M9
234.432 112.276 M9
234.432 72 M9
240.192 72 M9
240.192 152.647 M9
245.952 152.647 M9
245.952 72 M9
248.256 72 M9
248.256 113.309 M9
254.016 113.309 M9
254.016 72 M9
259.776 72 M9
259.776 208.959 M9
265.536 208.959 M9
265.536 72 M9
267.84 72 M9
267.84 115.419 M9
273.6 115.419 M9
273.6 72 M9
296.64 72 M9
296.64 143.991 M9
302.4 143.991 M9
302.4 72 M9
304.704 72 M9
304.704 144.084 M9
310.464 144.084 M9
310.464 72 M9
316.224 72 M9
316.224 144.304 M9
321.984 144.304 M9
321.984 72 M9
324.288 72 M9
324.288 145.936 M9
330.048 145.936 M9
330.048 72 M9
335.808 72 M9
335.808 145.692 M9
341.568 145.692 M9
341.568 72 M9
343.872 72 M9
343.872 146.449 M9
349.632 146.449 M9
349.632 72 M9
355.392 72 M9
355.392 157.354 M9
361.152 157.354 M9
361.152 72 M9
363.456 72 M9
363.456 150.209 M9
369.216 150.209 M9
369.216 72 M9
374.976 72 M9
374.976 225.602 M9
380.736 225.602 M9
380.736 72 M9
383.04 72 M9
383.04 116.694 M9
388.8 116.694 M9
388.8 72 M9
400.32 72 M9
400.32 140.054 M9
406.08 140.054 M9
406.08 72 M9
408.384 72 M9
408.384 144.444 M9
414.144 144.444 M9
414.144 72 M9
419.904 72 M9
419.904 139.804 M9
425.664 139.804 M9
425.664 72 M9
427.968 72 M9
427.968 132.739 M9
433.728 132.739 M9
433.728 72 M9
439.488 72 M9
439.488 140.258 M9
445.248 140.258 M9
445.248 72 M9
447.552 72 M9
447.552 112.169 M9
453.312 112.169 M9
453.312 72 M9
459.072 72 M9
459.072 147.093 M9
464.832 147.093 M9
464.832 72 M9
467.136 72 M9
467.136 112.476 M9
472.896 112.476 M9
472.896 72 M9
478.656 72 M9
478.656 184.266 M9
484.416 184.266 M9
484.416 72 M9
486.72 72 M9
486.72 113.532 M9
492.48 113.532 M9
492.48 72 M9
515.52 72 M9
515.52 143.992 M9
521.28 143.992 M9
521.28 72 M9
523.584 72 M9
523.584 143.078 M9
529.344 143.078 M9
529.344 72 M9
535.104 72 M9
535.104 143.959 M9
540.864 143.959 M9
540.864 72 M9
543.168 72 M9
543.168 138.3 M9
548.928 138.3 M9
548.928 72 M9
554.688 72 M9
554.688 146.823 M9
560.448 146.823 M9
560.448 72 M9
562.752 72 M9
562.752 130.13 M9
568.512 130.13 M9
568.512 72 M9
574.272 72 M9
574.272 159.042 M9
580.032 159.042 M9
580.032 72 M9
582.336 72 M9
582.336 126.412 M9
588.096 126.412 M9
588.096 72 M9
593.856 72 M9
593.856 202.726 M9
599.616 202.726 M9
599.616 72 M9
601.92 72 M9
601.92 137.519 M9
607.68 137.519 M9
607.68 72 M9
619.2 72 M9
619.2 118.371 M9
624.96 118.371 M9
624.96 72 M9
627.264 72 M9
627.264 118.549 M9
633.024 118.549 M9
633.024 72 M9
638.784 72 M9
638.784 118.606 M9
644.544 118.606 M9
644.544 72 M9
646.848 72 M9
646.848 111.685 M9
652.608 111.685 M9
652.608 72 M9
658.368 72 M9
658.368 120.527 M9
664.128 120.527 M9
664.128 72 M9
666.432 72 M9
666.432 114.269 M9
672.192 114.269 M9
672.192 72 M9
677.952 72 M9
677.952 124.418 M9
683.712 124.418 M9
683.712 72 M9
686.016 72 M9
686.016 121.626 M9
691.776 121.626 M9
691.776 72 M9
697.536 72 M9
697.536 136.718 M9
703.296 136.718 M9
703.296 72 M9
705.6 72 M9
705.6 138.637 M9
711.36 138.637 M9
711.36 72 M9
734.4 72 M9
734.4 143.942 M9
740.16 143.942 M9
740.16 72 M9
742.464 72 M9
742.464 143.804 M9
748.224 143.804 M9
748.224 72 M9
753.984 72 M9
753.984 146.526 M9
759.744 146.526 M9
759.744 72 M9
762.048 72 M9
762.048 146.26 M9
767.808 146.26 M9
767.808 72 M9
773.568 72 M9
773.568 155.857 M9
779.328 155.857 M9
779.328 72 M9
781.632 72 M9
781.632 156.295 M9
787.392 156.295 M9
787.392 72 M9
793.152 72 M9
793.152 168.46 M9
798.912 168.46 M9
798.912 72 M9
801.216 72 M9
801.216 167.902 M9
806.976 167.902 M9
806.976 72 M9
812.736 72 M9
812.736 201.818 M9
818.496 201.818 M9
818.496 72 M9
820.8 72 M9
820.8 201.776 M9
826.56 201.776 M9
826.56 72 M9
838.08 72 M9
838.08 142.196 M9
843.84 142.196 M9
843.84 72 M9
846.144 72 M9
846.144 141.12 M9
851.904 141.12 M9
851.904 72 M9
857.664 72 M9
857.664 143.976 M9
863.424 143.976 M9
863.424 72 M9
865.728 72 M9
865.728 143.007 M9
871.488 143.007 M9
871.488 72 M9
877.248 72 M9
877.248 148.662 M9
883.008 148.662 M9
883.008 72 M9
885.312 72 M9
885.312 149.118 M9
891.072 149.118 M9
891.072 72 M9
896.832 72 M9
896.832 146.248 M9
902.592 146.248 M9
902.592 72 M9
904.896 72 M9
904.896 143.266 M9
910.656 143.266 M9
910.656 72 M9
916.416 72 M9
916.416 161.019 M9
922.176 161.019 M9
922.176 72 M9
924.48 72 M9
924.48 150.675 M9
930.24 150.675 M9
930.24 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
930.24 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
77.76 72 M9
77.76 143.277 M9
83.52 143.277 M9
83.52 72 M9
85.824 72 M9
85.824 143.277 M9
91.584 143.277 M9
91.584 72 M9
97.344 72 M9
97.344 143.668 M9
103.104 143.668 M9
103.104 72 M9
105.408 72 M9
105.408 143.648 M9
111.168 143.648 M9
111.168 72 M9
116.928 72 M9
116.928 143.03 M9
122.688 143.03 M9
122.688 72 M9
124.992 72 M9
124.992 142.657 M9
130.752 142.657 M9
130.752 72 M9
136.512 72 M9
136.512 149.773 M9
142.272 149.773 M9
142.272 72 M9
144.576 72 M9
144.576 134.706 M9
150.336 134.706 M9
150.336 72 M9
156.096 72 M9
156.096 203.911 M9
161.856 203.911 M9
161.856 72 M9
164.16 72 M9
164.16 113.278 M9
169.92 113.278 M9
169.92 72 M9
181.44 72 M9
181.44 140.758 M9
187.2 140.758 M9
187.2 72 M9
189.504 72 M9
189.504 140.739 M9
195.264 140.739 M9
195.264 72 M9
201.024 72 M9
201.024 140.77 M9
206.784 140.77 M9
206.784 72 M9
209.088 72 M9
209.088 129.841 M9
214.848 129.841 M9
214.848 72 M9
220.608 72 M9
220.608 142.329 M9
226.368 142.329 M9
226.368 72 M9
228.672 72 M9
228.672 111.028 M9
234.432 111.028 M9
234.432 72 M9
240.192 72 M9
240.192 150.701 M9
245.952 150.701 M9
245.952 72 M9
248.256 72 M9
248.256 110.592 M9
254.016 110.592 M9
254.016 72 M9
259.776 72 M9
259.776 203.658 M9
265.536 203.658 M9
265.536 72 M9
267.84 72 M9
267.84 111.073 M9
273.6 111.073 M9
273.6 72 M9
296.64 72 M9
296.64 143.271 M9
302.4 143.271 M9
302.4 72 M9
304.704 72 M9
304.704 143.327 M9
310.464 143.327 M9
310.464 72 M9
316.224 72 M9
316.224 143.482 M9
321.984 143.482 M9
321.984 72 M9
324.288 72 M9
324.288 145.067 M9
330.048 145.067 M9
330.048 72 M9
335.808 72 M9
335.808 144.636 M9
341.568 144.636 M9
341.568 72 M9
343.872 72 M9
343.872 144.906 M9
349.632 144.906 M9
349.632 72 M9
355.392 72 M9
355.392 155.978 M9
361.152 155.978 M9
361.152 72 M9
363.456 72 M9
363.456 147.237 M9
369.216 147.237 M9
369.216 72 M9
374.976 72 M9
374.976 222.091 M9
380.736 222.091 M9
380.736 72 M9
383.04 72 M9
383.04 111.579 M9
388.8 111.579 M9
388.8 72 M9
400.32 72 M9
400.32 139.509 M9
406.08 139.509 M9
406.08 72 M9
408.384 72 M9
408.384 143.816 M9
414.144 143.816 M9
414.144 72 M9
419.904 72 M9
419.904 138.863 M9
425.664 138.863 M9
425.664 72 M9
427.968 72 M9
427.968 131.363 M9
433.728 131.363 M9
433.728 72 M9
439.488 72 M9
439.488 139.03 M9
445.248 139.03 M9
445.248 72 M9
447.552 72 M9
447.552 110.069 M9
453.312 110.069 M9
453.312 72 M9
459.072 72 M9
459.072 145.29 M9
464.832 145.29 M9
464.832 72 M9
467.136 72 M9
467.136 109.887 M9
472.896 109.887 M9
472.896 72 M9
478.656 72 M9
478.656 180.51 M9
484.416 180.51 M9
484.416 72 M9
486.72 72 M9
486.72 110.187 M9
492.48 110.187 M9
492.48 72 M9
515.52 72 M9
515.52 143.159 M9
521.28 143.159 M9
521.28 72 M9
523.584 72 M9
523.584 142.231 M9
529.344 142.231 M9
529.344 72 M9
535.104 72 M9
535.104 141.645 M9
540.864 141.645 M9
540.864 72 M9
543.168 72 M9
543.168 134.434 M9
548.928 134.434 M9
548.928 72 M9
554.688 72 M9
554.688 141.272 M9
560.448 141.272 M9
560.448 72 M9
562.752 72 M9
562.752 121.951 M9
568.512 121.951 M9
568.512 72 M9
574.272 72 M9
574.272 146.784 M9
580.032 146.784 M9
580.032 72 M9
582.336 72 M9
582.336 111.868 M9
588.096 111.868 M9
588.096 72 M9
593.856 72 M9
593.856 175.254 M9
599.616 175.254 M9
599.616 72 M9
601.92 72 M9
601.92 111.715 M9
607.68 111.715 M9
607.68 72 M9
619.2 72 M9
619.2 117.876 M9
624.96 117.876 M9
624.96 72 M9
627.264 72 M9
627.264 118.043 M9
633.024 118.043 M9
633.024 72 M9
638.784 72 M9
638.784 116.643 M9
644.544 116.643 M9
644.544 72 M9
646.848 72 M9
646.848 108.978 M9
652.608 108.978 M9
652.608 72 M9
658.368 72 M9
658.368 115.355 M9
664.128 115.355 M9
664.128 72 M9
666.432 72 M9
666.432 108.282 M9
672.192 108.282 M9
672.192 72 M9
677.952 72 M9
677.952 112.703 M9
683.712 112.703 M9
683.712 72 M9
686.016 72 M9
686.016 109.093 M9
691.776 109.093 M9
691.776 72 M9
697.536 72 M9
697.536 111.565 M9
703.296 111.565 M9
703.296 72 M9
705.6 72 M9
705.6 112.012 M9
711.36 112.012 M9
711.36 72 M9
734.4 72 M9
734.4 142.058 M9
740.16 142.058 M9
740.16 72 M9
742.464 72 M9
742.464 141.983 M9
748.224 141.983 M9
748.224 72 M9
753.984 72 M9
753.984 142.083 M9
759.744 142.083 M9
759.744 72 M9
762.048 72 M9
762.048 141.9 M9
767.808 141.9 M9
767.808 72 M9
773.568 72 M9
773.568 142.128 M9
779.328 142.128 M9
779.328 72 M9
781.632 72 M9
781.632 142.408 M9
787.392 142.408 M9
787.392 72 M9
793.152 72 M9
793.152 144.279 M9
798.912 144.279 M9
798.912 72 M9
801.216 72 M9
801.216 144.06 M9
806.976 144.06 M9
806.976 72 M9
812.736 72 M9
812.736 152.085 M9
818.496 152.085 M9
818.496 72 M9
820.8 72 M9
820.8 152.247 M9
826.56 152.247 M9
826.56 72 M9
838.08 72 M9
838.08 140.571 M9
843.84 140.571 M9
843.84 72 M9
846.144 72 M9
846.144 139.378 M9
851.904 139.378 M9
851.904 72 M9
857.664 72 M9
857.664 139.711 M9
863.424 139.711 M9
863.424 72 M9
865.728 72 M9
865.728 139.107 M9
871.488 139.107 M9
871.488 72 M9
877.248 72 M9
877.248 134.208 M9
883.008 134.208 M9
883.008 72 M9
885.312 72 M9
885.312 134.959 M9
891.072 134.959 M9
891.072 72 M9
896.832 72 M9
896.832 127.004 M9
902.592 127.004 M9
902.592 72 M9
904.896 72 M9
904.896 125.01 M9
910.656 125.01 M9
910.656 72 M9
916.416 72 M9
916.416 124.634 M9
922.176 124.634 M9
922.176 72 M9
924.48 72 M9
924.48 121.162 M9
930.24 121.162 M9
930.24 72 M9
gsave
D9
grestore
930.24 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
77.76 72 M9
77.76 101.77 M9
83.52 101.77 M9
83.52 72 M9
85.824 72 M9
85.824 101.77 M9
91.584 101.77 M9
91.584 72 M9
97.344 72 M9
97.344 101.789 M9
103.104 101.789 M9
103.104 72 M9
105.408 72 M9
105.408 101.789 M9
111.168 101.789 M9
111.168 72 M9
116.928 72 M9
116.928 101.809 M9
122.688 101.809 M9
122.688 72 M9
124.992 72 M9
124.992 101.818 M9
130.752 101.818 M9
130.752 72 M9
136.512 72 M9
136.512 101.895 M9
142.272 101.895 M9
142.272 72 M9
144.576 72 M9
144.576 101.869 M9
150.336 101.869 M9
150.336 72 M9
156.096 72 M9
156.096 102.105 M9
161.856 102.105 M9
161.856 72 M9
164.16 72 M9
164.16 102.112 M9
169.92 102.112 M9
169.92 72 M9
181.44 72 M9
181.44 101.771 M9
187.2 101.771 M9
187.2 72 M9
189.504 72 M9
189.504 101.77 M9
195.264 101.77 M9
195.264 72 M9
201.024 72 M9
201.024 101.973 M9
206.784 101.973 M9
206.784 72 M9
209.088 72 M9
209.088 101.785 M9
214.848 101.785 M9
214.848 72 M9
220.608 72 M9
220.608 102.618 M9
226.368 102.618 M9
226.368 72 M9
228.672 72 M9
228.672 101.813 M9
234.432 101.813 M9
234.432 72 M9
240.192 72 M9
240.192 103.914 M9
245.952 103.914 M9
245.952 72 M9
248.256 72 M9
248.256 101.879 M9
254.016 101.879 M9
254.016 72 M9
259.776 72 M9
259.776 107.479 M9
265.536 107.479 M9
265.536 72 M9
267.84 72 M9
267.84 102.11 M9
273.6 102.11 M9
273.6 72 M9
296.64 72 M9
296.64 101.685 M9
302.4 101.685 M9
302.4 72 M9
304.704 72 M9
304.704 101.685 M9
310.464 101.685 M9
310.464 72 M9
316.224 72 M9
316.224 101.686 M9
321.984 101.686 M9
321.984 72 M9
324.288 72 M9
324.288 101.685 M9
330.048 101.685 M9
330.048 72 M9
335.808 72 M9
335.808 101.688 M9
341.568 101.688 M9
341.568 72 M9
343.872 72 M9
343.872 101.689 M9
349.632 101.689 M9
349.632 72 M9
355.392 72 M9
355.392 101.693 M9
361.152 101.693 M9
361.152 72 M9
363.456 72 M9
363.456 101.695 M9
369.216 101.695 M9
369.216 72 M9
374.976 72 M9
374.976 101.703 M9
380.736 101.703 M9
380.736 72 M9
383.04 72 M9
383.04 101.701 M9
388.8 101.701 M9
388.8 72 M9
400.32 72 M9
400.32 101.685 M9
406.08 101.685 M9
406.08 72 M9
408.384 72 M9
408.384 101.683 M9
414.144 101.683 M9
414.144 72 M9
419.904 72 M9
419.904 101.688 M9
425.664 101.688 M9
425.664 72 M9
427.968 72 M9
427.968 101.687 M9
433.728 101.687 M9
433.728 72 M9
439.488 72 M9
439.488 101.689 M9
445.248 101.689 M9
445.248 72 M9
447.552 72 M9
447.552 101.687 M9
453.312 101.687 M9
453.312 72 M9
459.072 72 M9
459.072 101.692 M9
464.832 101.692 M9
464.832 72 M9
467.136 72 M9
467.136 101.693 M9
472.896 101.693 M9
472.896 72 M9
478.656 72 M9
478.656 101.701 M9
484.416 101.701 M9
484.416 72 M9
486.72 72 M9
486.72 101.701 M9
492.48 101.701 M9
492.48 72 M9
515.52 72 M9
515.52 97.1449 M9
521.28 97.1449 M9
521.28 72 M9
523.584 72 M9
523.584 97.145 M9
529.344 97.145 M9
529.344 72 M9
535.104 72 M9
535.104 97.1473 M9
540.864 97.1473 M9
540.864 72 M9
543.168 72 M9
543.168 97.1484 M9
548.928 97.1484 M9
548.928 72 M9
554.688 72 M9
554.688 97.1561 M9
560.448 97.1561 M9
560.448 72 M9
562.752 72 M9
562.752 97.1544 M9
568.512 97.1544 M9
568.512 72 M9
574.272 72 M9
574.272 97.1684 M9
580.032 97.1684 M9
580.032 72 M9
582.336 72 M9
582.336 97.1705 M9
588.096 97.1705 M9
588.096 72 M9
593.856 72 M9
593.856 97.2019 M9
599.616 97.2019 M9
599.616 72 M9
601.92 72 M9
601.92 97.2014 M9
607.68 97.2014 M9
607.68 72 M9
619.2 72 M9
619.2 97.1453 M9
624.96 97.1453 M9
624.96 72 M9
627.264 72 M9
627.264 97.146 M9
633.024 97.146 M9
633.024 72 M9
638.784 72 M9
638.784 97.1498 M9
644.544 97.1498 M9
644.544 72 M9
646.848 72 M9
646.848 97.1469 M9
652.608 97.1469 M9
652.608 72 M9
658.368 72 M9
658.368 97.1561 M9
664.128 97.1561 M9
664.128 72 M9
666.432 72 M9
666.432 97.1564 M9
672.192 97.1564 M9
672.192 72 M9
677.952 72 M9
677.952 97.1701 M9
683.712 97.1701 M9
683.712 72 M9
686.016 72 M9
686.016 97.1697 M9
691.776 97.1697 M9
691.776 72 M9
697.536 72 M9
697.536 97.2023 M9
703.296 97.2023 M9
703.296 72 M9
705.6 72 M9
705.6 97.201 M9
711.36 97.201 M9
711.36 72 M9
734.4 72 M9
734.4 110.072 M9
740.16 110.072 M9
740.16 72 M9
742.464 72 M9
742.464 110.078 M9
748.224 110.078 M9
748.224 72 M9
753.984 72 M9
753.984 110.142 M9
759.744 110.142 M9
759.744 72 M9
762.048 72 M9
762.048 110.135 M9
767.808 110.135 M9
767.808 72 M9
773.568 72 M9
773.568 110.23 M9
779.328 110.23 M9
779.328 72 M9
781.632 72 M9
781.632 110.242 M9
787.392 110.242 M9
787.392 72 M9
793.152 72 M9
793.152 110.428 M9
798.912 110.428 M9
798.912 72 M9
801.216 72 M9
801.216 110.431 M9
806.976 110.431 M9
806.976 72 M9
812.736 72 M9
812.736 110.593 M9
818.496 110.593 M9
818.496 72 M9
820.8 72 M9
820.8 110.595 M9
826.56 110.595 M9
826.56 72 M9
838.08 72 M9
838.08 110.079 M9
843.84 110.079 M9
843.84 72 M9
846.144 72 M9
846.144 110.082 M9
851.904 110.082 M9
851.904 72 M9
857.664 72 M9
857.664 110.138 M9
863.424 110.138 M9
863.424 72 M9
865.728 72 M9
865.728 110.138 M9
871.488 110.138 M9
871.488 72 M9
877.248 72 M9
877.248 110.238 M9
883.008 110.238 M9
883.008 72 M9
885.312 72 M9
885.312 110.233 M9
891.072 110.233 M9
891.072 72 M9
896.832 72 M9
896.832 110.428 M9
902.592 110.428 M9
902.592 72 M9
904.896 72 M9
904.896 110.431 M9
910.656 110.431 M9
910.656 72 M9
916.416 72 M9
916.416 110.596 M9
922.176 110.596 M9
922.176 72 M9
924.48 72 M9
924.48 110.596 M9
930.24 110.596 M9
930.24 72 M9
gsave
D9
grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
930.24 72 M9
72 72 M9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 144 TXC
9 /Helvetica-Bold SetTxt
(100) 0 68 141.3 TXR
4 /Helvetica SetTxt
(|) -90 72 216 TXC
9 /Helvetica-Bold SetTxt
(200) 0 68 213.3 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 144 TXC
(|) 90 936 216 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Combined execution time (normalized)) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 88.704 63 TXC
(2) 0 108.288 63 TXC
(4) 0 127.872 63 TXC
(8) 0 147.456 63 TXC
(16) 0 167.04 63 TXC
9 /Helvetica-Bold SetTxt
(1MB-2way) 0 123.84 48.6 TXC
8 /Helvetica SetTxt
(1) 0 192.384 63 TXC
(2) 0 211.968 63 TXC
(4) 0 231.552 63 TXC
(8) 0 251.136 63 TXC
(16) 0 270.72 63 TXC
9 /Helvetica-Bold SetTxt
(4MB-DM) 0 227.52 48.6 TXC
8 /Helvetica SetTxt
(1) 0 307.584 63 TXC
(2) 0 327.168 63 TXC
(4) 0 346.752 63 TXC
(8) 0 366.336 63 TXC
(16) 0 385.92 63 TXC
9 /Helvetica-Bold SetTxt
(1MB-2way) 0 342.72 48.6 TXC
8 /Helvetica SetTxt
(1) 0 411.264 63 TXC
(2) 0 430.848 63 TXC
(4) 0 450.432 63 TXC
(8) 0 470.016 63 TXC
(16) 0 489.6 63 TXC
9 /Helvetica-Bold SetTxt
(4MB-DM) 0 446.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 526.464 63 TXC
(2) 0 546.048 63 TXC
(4) 0 565.632 63 TXC
(8) 0 585.216 63 TXC
(16) 0 604.8 63 TXC
9 /Helvetica-Bold SetTxt
(1MB-2way) 0 561.6 48.6 TXC
8 /Helvetica SetTxt
(1) 0 630.144 63 TXC
(2) 0 649.728 63 TXC
(4) 0 669.312 63 TXC
(8) 0 688.896 63 TXC
(16) 0 708.48 63 TXC
9 /Helvetica-Bold SetTxt
(4MB-DM) 0 665.28 48.6 TXC
8 /Helvetica SetTxt
(1) 0 745.344 63 TXC
(2) 0 764.928 63 TXC
(4) 0 784.512 63 TXC
(8) 0 804.096 63 TXC
(16) 0 823.68 63 TXC
9 /Helvetica-Bold SetTxt
(1MB-2way) 0 780.48 48.6 TXC
8 /Helvetica SetTxt
(1) 0 849.024 63 TXC
(2) 0 868.608 63 TXC
(4) 0 888.192 63 TXC
(8) 0 907.776 63 TXC
(16) 0 927.36 63 TXC
9 /Helvetica-Bold SetTxt
(4MB-DM) 0 884.16 48.6 TXC
10 /Helvetica-Bold SetTxt
(tomcatv) 0 175.68 36 TXC
(swim) 0 394.56 36 TXC
(hydro2d) 0 613.44 36 TXC
(applu) 0 832.32 36 TXC
(Combined Execution Time) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 88.704 54.6 TXC
() 0 108.288 54.6 TXC
() 0 127.872 54.6 TXC
() 0 147.456 54.6 TXC
() 0 167.04 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 123.84 39.15 TXC
8 /Helvetica SetTxt
() 0 192.384 54.6 TXC
() 0 211.968 54.6 TXC
() 0 231.552 54.6 TXC
() 0 251.136 54.6 TXC
() 0 270.72 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 227.52 39.15 TXC
8 /Helvetica SetTxt
() 0 307.584 54.6 TXC
() 0 327.168 54.6 TXC
() 0 346.752 54.6 TXC
() 0 366.336 54.6 TXC
() 0 385.92 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 342.72 39.15 TXC
8 /Helvetica SetTxt
() 0 411.264 54.6 TXC
() 0 430.848 54.6 TXC
() 0 450.432 54.6 TXC
() 0 470.016 54.6 TXC
() 0 489.6 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 446.4 39.15 TXC
8 /Helvetica SetTxt
() 0 526.464 54.6 TXC
() 0 546.048 54.6 TXC
() 0 565.632 54.6 TXC
() 0 585.216 54.6 TXC
() 0 604.8 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 561.6 39.15 TXC
8 /Helvetica SetTxt
() 0 630.144 54.6 TXC
() 0 649.728 54.6 TXC
() 0 669.312 54.6 TXC
() 0 688.896 54.6 TXC
() 0 708.48 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 665.28 39.15 TXC
8 /Helvetica SetTxt
() 0 745.344 54.6 TXC
() 0 764.928 54.6 TXC
() 0 784.512 54.6 TXC
() 0 804.096 54.6 TXC
() 0 823.68 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 780.48 39.15 TXC
8 /Helvetica SetTxt
() 0 849.024 54.6 TXC
() 0 868.608 54.6 TXC
() 0 888.192 54.6 TXC
() 0 907.776 54.6 TXC
() 0 927.36 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 884.16 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 175.68 25.5 TXC
() 0 394.56 25.5 TXC
() 0 613.44 25.5 TXC
() 0 832.32 25.5 TXC
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
-0.21 (showed no bene\336t of CDPC with the 1MB cache con\336guration, but) 317.88 560.95 P
(shows bene\336ts from CDPC with the lar) 317.88 550.95 T
(ger 4MB con\336guration.) 459.22 550.95 T
0 11 Q
(6.2  Compiler) 317.88 533.62 T
(-Inserted Pr) 381.33 533.62 T
(efetching) 438.25 533.62 T
1 9 Q
3.5 (While CDPC ef) 317.88 516.95 P
3.5 (fectively avoids mapping con\337icts, it is not) 381.72 516.95 P
1.55 (applicable to other types of cache misses\321i.e. those caused by) 317.88 506.95 P
0.89 (communication between processors or by limited cache capacity) 317.88 496.95 P
0.89 (.) 555.75 496.95 P
3.29 (As we saw earlier in Figure) 317.88 486.95 P
3.29 (6, the compiler has ef) 435.79 486.95 P
3.29 (fectively) 526.51 486.95 P
2.55 (parallelized the code such that true sharing and false sharing) 317.88 476.95 P
2.11 (communication misses are typically small. However) 317.88 466.95 P
2.11 (, when the) 516.54 466.95 P
0.02 (data set size exceeds the aggregate cache size\321which is often true) 317.88 456.95 P
4.56 (for these applications with eight or fewer processors\321the) 317.88 446.95 P
1.36 (replacement misses can remain high. T) 317.88 436.95 P
1.36 (o hide the latency of the) 464.49 436.95 P
1.64 (misses that remain after CDPC, we used the SUIF compiler to) 317.88 426.95 P
4.44 (automatically insert) 317.88 416.95 P
2 F
4.44 (pr) 400.26 416.95 P
4.44 (efetch) 407.92 416.95 P
1 F
4.44 ( instructions into the compiler) 429.42 416.95 P
4.44 (-) 555 416.95 P
1.61 (parallelized code. Our algorithm uses) 317.88 406.95 P
2 F
1.61 (locality analysis) 462.91 406.95 P
1 F
1.61 ( to insert) 523.28 406.95 P
0.14 (prefetches only for those references that are likely to suf) 317.88 396.95 P
0.14 (fer misses) 521.62 396.95 P
([19].) 317.88 386.95 T
0.42 (Although the MIPS R4400 processors do not support prefetching,) 317.88 371.95 P
0.88 (the SimOS CPU simulators model the prefetch instruction of the) 317.88 361.95 P
2.3 (MIPS R10000. The processor supports up to four outstanding) 317.88 351.95 P
0.19 (prefetches \050a \336fth prefetch stalls the processor\051, and prefetches for) 317.88 341.95 P
-0.08 (pages that are not mapped in the TLB are ignored and do not cause) 317.88 331.95 P
-0.2 (exceptions. Prefetched lines are inserted into the external cache but) 317.88 321.95 P
0.33 (not the on-chip cache. As before, the system bus bandwidth is 1.2) 317.88 311.95 P
0.9 (GB/s. Due to space considerations, Figure) 317.88 301.95 P
0.9 (8 shows the results of) 476.39 301.95 P
(prefetching combined with CDPC.) 317.88 291.95 T
1.47 (As we see in Figure) 317.88 276.95 P
1.47 (8, compiler) 397.48 276.95 P
1.47 (-inserted prefetching ef) 439.77 276.95 P
1.47 (fectively) 526.51 276.95 P
0.5 (hides memory latency in three of the applications:) 317.88 266.95 P
2 F
0.5 (tomcatv) 504.34 266.95 P
1 F
0.5 (,) 532.25 266.95 P
2 F
0.5 (swim) 537.25 266.95 P
1 F
0.5 (,) 555.75 266.95 P
-0.2 (and) 317.88 256.95 P
2 F
-0.2 (hydr) 332.92 256.95 P
-0.2 (o2d) 349.09 256.95 P
1 F
-0.2 (. For) 362.59 256.95 P
2 F
-0.2 (su2cor) 381.43 256.95 P
1 F
-0.2 (, prefetching degrades the performance for) 405.57 256.95 P
-0.03 (runs with a lar) 317.88 246.95 P
-0.03 (ger number of processors, due to an increase in false) 369.36 246.95 P
0.45 (sharing. In) 317.88 236.95 P
2 F
0.45 (applu) 359.53 236.95 P
1 F
0.45 (, the loop tiling introduced during parallelization) 380.03 236.95 P
3.27 (to reduce synchronization inhibits the software pipelining of) 317.88 226.95 P
0.66 (prefetches \050i.e. they are not scheduled early enough\051. In addition,) 317.88 216.95 P
1.93 (since the prefetches often have lar) 317.88 206.95 P
1.93 (ge access strides, they often) 450.06 206.95 P
-0.21 (reference pages that are not mapped in the TLB, in which case they) 317.88 196.95 P
(are dropped) 317.88 186.95 T
1 7.2 Q
(1) 360.61 190.55 T
1 9 Q
(.) 364.21 186.95 T
1.21 (The relative advantages of prefetching and CDPC vary with the) 317.88 171.95 P
-0.12 (number of processors. W) 317.88 161.95 P
-0.12 (ith fewer processors, capacity misses tend) 407.64 161.95 P
0.48 (to dominate con\337ict misses, and hence prefetching of) 317.88 151.95 P
0.48 (fers more of) 513.05 151.95 P
0.69 (an advantage than CDPC. W) 317.88 141.95 P
0.69 (ith increased numbers of processors,) 424.02 141.95 P
2.49 (the aggregate cache size increases, and CDPC becomes more) 317.88 131.95 P
(important.) 317.88 121.95 T
317.88 90 558 110 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
317.88 98 449.88 98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 7 Q
0 X
0 0 0 1 0 0 0 K
-0.13 (1. This suggests that a version of a prefetch that is) 317.88 85.33 P
2 F
-0.13 (not) 458.35 85.33 P
1 F
-0.13 ( dropped on a TLB miss may be) 467.29 85.33 P
(desirable for lar) 317.88 77.33 T
(ge matrix-based codes where TLB faults are common.) 362.07 77.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.83 (Prefetching and CDPC are complementary) 54 444.61 P
0.83 (. Prefetching improves) 210.72 444.61 P
1.62 (the performance of CDPC by hiding the latency of misses that) 54 434.61 P
0.83 (CDPC does not eliminate. By eliminating cache con\337icts, CDPC) 54 424.61 P
1.82 (improves the performance of prefetching in two ways. First, it) 54 414.61 P
0.16 (reduces the probability that prefetched data will be displaced from) 54 404.61 P
2 (the cache before it can be referenced. Second, it frees up bus) 54 394.61 P
0.16 (bandwidth, which is crucial for any latency tolerance scheme. The) 54 384.61 P
3.11 (complementary interaction between CDPC and prefetching is) 54 374.61 P
2.1 (illustrated by) 54 364.61 P
2 F
2.1 (tomcatv) 107.71 364.61 P
1 F
2.1 ( with four processors: taken individually) 136.2 364.61 P
2.1 (,) 291.87 364.61 P
1.02 (CDPC and prefetching each accelerate performance by 29% and) 54 354.61 P
1.36 (24%, respectively\321when combined, however) 54 344.61 P
1.36 (, they yield a total) 223.93 344.61 P
(speedup of 88%.) 54 334.61 T
0 12 Q
(7  Performance Results) 54 313.61 T
1 9 Q
3.09 (T) 54 294.61 P
3.09 (o validate our technique on a real machine, we performed) 58.87 294.61 P
2.2 (experiments on an 8-CPU Digital AlphaServer 8400 with 350) 54 284.61 P
0.56 (MHz 21) 54 274.61 P
0.56 (164 processors. Each processor has two levels of on-chip) 83.97 274.61 P
(caches and an external 4MB direct-mapped cache.) 54 264.61 T
2.11 (Figure) 54 249.61 P
2.11 (9 shows the performance of the applications with three) 79.75 249.61 P
0.01 (page mapping policies: bin hopping, page coloring and CDPC. W) 54 239.61 P
0.01 (e) 290.12 239.61 P
-0.01 (implement both page coloring and CDPC by using Digital UNIX\325) 54 229.61 P
-0.01 (s) 290.62 229.61 P
1.43 (native bin hopping policy and selectively touching pages in the) 54 219.61 P
0.11 (desired order) 54 209.61 P
0.11 (. W) 100.85 209.61 P
0.11 (e also show the performance of bin hopping when) 113.24 209.61 P
1.47 (the data structures are neither aligned nor padded in the virtual) 54 199.61 P
(address space \050as described in Section) 54 189.61 T
(5.4\051.) 193.46 189.61 T
0.99 (W) 54 174.61 P
0.99 (e \336rst notice that the results are consistent with the simulation) 61.78 174.61 P
2.29 (results of Section) 54 164.61 P
2.29 (4 and Section) 123.33 164.61 P
2.29 (6. The \336gure also shows that) 179.16 164.61 P
0.26 (neither bin hopping nor page coloring dominates the other one for) 54 154.61 P
0.43 (all applications. T) 54 144.61 P
0.43 (wo benchmarks,) 118.97 144.61 P
2 F
0.43 (swim) 181.07 144.61 P
1 F
0.43 ( and) 199.57 144.61 P
2 F
0.43 (tomcatv) 217.93 144.61 P
1 F
0.43 (, stand out as) 245.84 144.61 P
-0.2 (being the most sensitive to the alignment and page mapping policy) 54 134.61 P
-0.2 (.) 291.87 134.61 P
0.19 (For) 54 124.61 P
2 F
0.19 ( swim) 66.5 124.61 P
1 F
0.19 (, the limited speedup measured with page coloring is due) 87.44 124.61 P
3.57 (primarily to contention on the AlphaServer) 54 114.61 P
3.57 (\325) 227.41 114.61 P
3.57 (s bus. For both) 229.91 114.61 P
1.43 (benchmarks, bin hopping leads to better performance than page) 54 104.61 P
3.29 (coloring. CDPC, however) 54 94.61 P
3.29 (, signi\336cantly outperforms both bin) 153.71 94.61 P
1.83 (hopping and page coloring. W) 54 84.61 P
1.83 (ith eight processors,) 170.21 84.61 P
2 F
1.83 (swim) 250.2 84.61 P
1 F
1.83 ( is 1.4) 268.7 84.61 P
54 450.61 558 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 38 32 972 275 467 121.5 54.22 626 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/pf2-high.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( Overhead) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 90.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( Memory Stall) 0 960.231 225.9 TXL
72 72 S9
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( Execution) 0 960.231 212.9 TXL
72 72 S9
[] 1.000000 SL
77.4 72 M9
77.4 123.425 M9
82.8 123.425 M9
82.8 72 M9
84.96 72 M9
84.96 110.454 M9
90.36 110.454 M9
90.36 72 M9
92.52 72 M9
92.52 123.425 M9
97.92 123.425 M9
97.92 72 M9
100.08 72 M9
100.08 110.501 M9
105.48 110.501 M9
105.48 72 M9
110.88 72 M9
110.88 123.927 M9
116.28 123.927 M9
116.28 72 M9
118.44 72 M9
118.44 111.275 M9
123.84 111.275 M9
123.84 72 M9
126 72 M9
126 113.698 M9
131.4 113.698 M9
131.4 72 M9
133.56 72 M9
133.56 99.1383 M9
138.96 99.1383 M9
138.96 72 M9
144.36 72 M9
144.36 126.563 M9
149.76 126.563 M9
149.76 72 M9
151.92 72 M9
151.92 115.902 M9
157.32 115.902 M9
157.32 72 M9
159.48 72 M9
159.48 114.091 M9
164.88 114.091 M9
164.88 72 M9
167.04 72 M9
167.04 100.971 M9
172.44 100.971 M9
172.44 72 M9
177.84 72 M9
177.84 138.184 M9
183.24 138.184 M9
183.24 72 M9
185.4 72 M9
185.4 138.101 M9
190.8 138.101 M9
190.8 72 M9
192.96 72 M9
192.96 110.356 M9
198.36 110.356 M9
198.36 72 M9
200.52 72 M9
200.52 104.523 M9
205.92 104.523 M9
205.92 72 M9
211.32 72 M9
211.32 199.035 M9
216.72 199.035 M9
216.72 72 M9
218.88 72 M9
218.88 205.749 M9
224.28 205.749 M9
224.28 72 M9
226.44 72 M9
226.44 98.5313 M9
231.84 98.5313 M9
231.84 72 M9
234 72 M9
234 98.6487 M9
239.4 98.6487 M9
239.4 72 M9
250.2 72 M9
250.2 123.421 M9
255.6 123.421 M9
255.6 72 M9
257.76 72 M9
257.76 104.824 M9
263.16 104.824 M9
263.16 72 M9
265.32 72 M9
265.32 123.916 M9
270.72 123.916 M9
270.72 72 M9
272.88 72 M9
272.88 105.164 M9
278.28 105.164 M9
278.28 72 M9
283.68 72 M9
283.68 124.669 M9
289.08 124.669 M9
289.08 72 M9
291.24 72 M9
291.24 106.397 M9
296.64 106.397 M9
296.64 72 M9
298.8 72 M9
298.8 124.521 M9
304.2 124.521 M9
304.2 72 M9
306.36 72 M9
306.36 106.082 M9
311.76 106.082 M9
311.76 72 M9
317.16 72 M9
317.16 127.226 M9
322.56 127.226 M9
322.56 72 M9
324.72 72 M9
324.72 110.191 M9
330.12 110.191 M9
330.12 72 M9
332.28 72 M9
332.28 126.542 M9
337.68 126.542 M9
337.68 72 M9
339.84 72 M9
339.84 108.497 M9
345.24 108.497 M9
345.24 72 M9
350.64 72 M9
350.64 137.373 M9
356.04 137.373 M9
356.04 72 M9
358.2 72 M9
358.2 135.003 M9
363.6 135.003 M9
363.6 72 M9
365.76 72 M9
365.76 120.635 M9
371.16 120.635 M9
371.16 72 M9
373.32 72 M9
373.32 111.343 M9
378.72 111.343 M9
378.72 72 M9
384.12 72 M9
384.12 194.288 M9
389.52 194.288 M9
389.52 72 M9
391.68 72 M9
391.68 196.714 M9
397.08 196.714 M9
397.08 72 M9
399.24 72 M9
399.24 104.764 M9
404.64 104.764 M9
404.64 72 M9
406.8 72 M9
406.8 100.479 M9
412.2 100.479 M9
412.2 72 M9
423 72 M9
423 123.42 M9
428.4 123.42 M9
428.4 72 M9
430.56 72 M9
430.56 119.657 M9
435.96 119.657 M9
435.96 72 M9
438.12 72 M9
438.12 127.165 M9
443.52 127.165 M9
443.52 72 M9
445.68 72 M9
445.68 119.147 M9
451.08 119.147 M9
451.08 72 M9
456.48 72 M9
456.48 124.415 M9
461.88 124.415 M9
461.88 72 M9
464.04 72 M9
464.04 125.151 M9
469.44 125.151 M9
469.44 72 M9
471.6 72 M9
471.6 126.057 M9
477 126.057 M9
477 72 M9
479.16 72 M9
479.16 123.689 M9
484.56 123.689 M9
484.56 72 M9
489.96 72 M9
489.96 128.355 M9
495.36 128.355 M9
495.36 72 M9
497.52 72 M9
497.52 133.594 M9
502.92 133.594 M9
502.92 72 M9
505.08 72 M9
505.08 128.882 M9
510.48 128.882 M9
510.48 72 M9
512.64 72 M9
512.64 135.324 M9
518.04 135.324 M9
518.04 72 M9
523.44 72 M9
523.44 139.798 M9
528.84 139.798 M9
528.84 72 M9
531 72 M9
531 157.94 M9
536.4 157.94 M9
536.4 72 M9
538.56 72 M9
538.56 141.697 M9
543.96 141.697 M9
543.96 72 M9
546.12 72 M9
546.12 151.932 M9
551.52 151.932 M9
551.52 72 M9
556.92 72 M9
556.92 170.057 M9
562.32 170.057 M9
562.32 72 M9
564.48 72 M9
564.48 225.969 M9
569.88 225.969 M9
569.88 72 M9
572.04 72 M9
572.04 173.053 M9
577.44 173.053 M9
577.44 72 M9
579.6 72 M9
579.6 215.635 M9
585 215.635 M9
585 72 M9
595.8 72 M9
595.8 123.425 M9
601.2 123.425 M9
601.2 72 M9
603.36 72 M9
603.36 103.336 M9
608.76 103.336 M9
608.76 72 M9
610.92 72 M9
610.92 123.502 M9
616.32 123.502 M9
616.32 72 M9
618.48 72 M9
618.48 105.222 M9
623.88 105.222 M9
623.88 72 M9
629.28 72 M9
629.28 124.105 M9
634.68 124.105 M9
634.68 72 M9
636.84 72 M9
636.84 105.272 M9
642.24 105.272 M9
642.24 72 M9
644.4 72 M9
644.4 119.389 M9
649.8 119.389 M9
649.8 72 M9
651.96 72 M9
651.96 105.949 M9
657.36 105.949 M9
657.36 72 M9
662.76 72 M9
662.76 127.282 M9
668.16 127.282 M9
668.16 72 M9
670.32 72 M9
670.32 112.148 M9
675.72 112.148 M9
675.72 72 M9
677.88 72 M9
677.88 115.315 M9
683.28 115.315 M9
683.28 72 M9
685.44 72 M9
685.44 107.458 M9
690.84 107.458 M9
690.84 72 M9
696.24 72 M9
696.24 137.319 M9
701.64 137.319 M9
701.64 72 M9
703.8 72 M9
703.8 137.935 M9
709.2 137.935 M9
709.2 72 M9
711.36 72 M9
711.36 113.215 M9
716.76 113.215 M9
716.76 72 M9
718.92 72 M9
718.92 110.864 M9
724.32 110.864 M9
724.32 72 M9
729.72 72 M9
729.72 167.444 M9
735.12 167.444 M9
735.12 72 M9
737.28 72 M9
737.28 180.097 M9
742.68 180.097 M9
742.68 72 M9
744.84 72 M9
744.84 126.256 M9
750.24 126.256 M9
750.24 72 M9
752.4 72 M9
752.4 128.763 M9
757.8 128.763 M9
757.8 72 M9
768.6 72 M9
768.6 123.395 M9
774 123.395 M9
774 72 M9
776.16 72 M9
776.16 123.787 M9
781.56 123.787 M9
781.56 72 M9
783.72 72 M9
783.72 123.252 M9
789.12 123.252 M9
789.12 72 M9
791.28 72 M9
791.28 123.876 M9
796.68 123.876 M9
796.68 72 M9
802.08 72 M9
802.08 124.399 M9
807.48 124.399 M9
807.48 72 M9
809.64 72 M9
809.64 125.205 M9
815.04 125.205 M9
815.04 72 M9
817.2 72 M9
817.2 124.293 M9
822.6 124.293 M9
822.6 72 M9
824.76 72 M9
824.76 125.002 M9
830.16 125.002 M9
830.16 72 M9
835.56 72 M9
835.56 131.05 M9
840.96 131.05 M9
840.96 72 M9
843.12 72 M9
843.12 132.561 M9
848.52 132.561 M9
848.52 72 M9
850.68 72 M9
850.68 132.064 M9
856.08 132.064 M9
856.08 72 M9
858.24 72 M9
858.24 132.881 M9
863.64 132.881 M9
863.64 72 M9
869.04 72 M9
869.04 140.84 M9
874.44 140.84 M9
874.44 72 M9
876.6 72 M9
876.6 148.41 M9
882 148.41 M9
882 72 M9
884.16 72 M9
884.16 140.38 M9
889.56 140.38 M9
889.56 72 M9
891.72 72 M9
891.72 147.68 M9
897.12 147.68 M9
897.12 72 M9
902.52 72 M9
902.52 167.512 M9
907.92 167.512 M9
907.92 72 M9
910.08 72 M9
910.08 173.545 M9
915.48 173.545 M9
915.48 72 M9
917.64 72 M9
917.64 168.296 M9
923.04 168.296 M9
923.04 72 M9
925.2 72 M9
925.2 173.348 M9
930.6 173.348 M9
930.6 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
930.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
77.4 72 M9
77.4 123.053 M9
82.8 123.053 M9
82.8 72 M9
84.96 72 M9
84.96 110.093 M9
90.36 110.093 M9
90.36 72 M9
92.52 72 M9
92.52 123.054 M9
97.92 123.054 M9
97.92 72 M9
100.08 72 M9
100.08 110.145 M9
105.48 110.145 M9
105.48 72 M9
110.88 72 M9
110.88 123.452 M9
116.28 123.452 M9
116.28 72 M9
118.44 72 M9
118.44 110.765 M9
123.84 110.765 M9
123.84 72 M9
126 72 M9
126 113.228 M9
131.4 113.228 M9
131.4 72 M9
133.56 72 M9
133.56 98.635 M9
138.96 98.635 M9
138.96 72 M9
144.36 72 M9
144.36 125.023 M9
149.76 125.023 M9
149.76 72 M9
151.92 72 M9
151.92 114.359 M9
157.32 114.359 M9
157.32 72 M9
159.48 72 M9
159.48 112.755 M9
164.88 112.755 M9
164.88 72 M9
167.04 72 M9
167.04 99.8381 M9
172.44 99.8381 M9
172.44 72 M9
177.84 72 M9
177.84 134.516 M9
183.24 134.516 M9
183.24 72 M9
185.4 72 M9
185.4 133.975 M9
190.8 133.975 M9
190.8 72 M9
192.96 72 M9
192.96 107.355 M9
198.36 107.355 M9
198.36 72 M9
200.52 72 M9
200.52 101.847 M9
205.92 101.847 M9
205.92 72 M9
211.32 72 M9
211.32 188.847 M9
216.72 188.847 M9
216.72 72 M9
218.88 72 M9
218.88 192.421 M9
224.28 192.421 M9
224.28 72 M9
226.44 72 M9
226.44 95.8536 M9
231.84 95.8536 M9
231.84 72 M9
234 72 M9
234 95.4726 M9
239.4 95.4726 M9
239.4 72 M9
250.2 72 M9
250.2 122.95 M9
255.6 122.95 M9
255.6 72 M9
257.76 72 M9
257.76 104.383 M9
263.16 104.383 M9
263.16 72 M9
265.32 72 M9
265.32 123.322 M9
270.72 123.322 M9
270.72 72 M9
272.88 72 M9
272.88 104.638 M9
278.28 104.638 M9
278.28 72 M9
283.68 72 M9
283.68 123.243 M9
289.08 123.243 M9
289.08 72 M9
291.24 72 M9
291.24 105.134 M9
296.64 105.134 M9
296.64 72 M9
298.8 72 M9
298.8 123.646 M9
304.2 123.646 M9
304.2 72 M9
306.36 72 M9
306.36 105.164 M9
311.76 105.164 M9
311.76 72 M9
317.16 72 M9
317.16 124.352 M9
322.56 124.352 M9
322.56 72 M9
324.72 72 M9
324.72 107.043 M9
330.12 107.043 M9
330.12 72 M9
332.28 72 M9
332.28 124.604 M9
337.68 124.604 M9
337.68 72 M9
339.84 72 M9
339.84 106.859 M9
345.24 106.859 M9
345.24 72 M9
350.64 72 M9
350.64 132.128 M9
356.04 132.128 M9
356.04 72 M9
358.2 72 M9
358.2 124.542 M9
363.6 124.542 M9
363.6 72 M9
365.76 72 M9
365.76 118.076 M9
371.16 118.076 M9
371.16 72 M9
373.32 72 M9
373.32 108.709 M9
378.72 108.709 M9
378.72 72 M9
384.12 72 M9
384.12 182.25 M9
389.52 182.25 M9
389.52 72 M9
391.68 72 M9
391.68 175.958 M9
397.08 175.958 M9
397.08 72 M9
399.24 72 M9
399.24 100.467 M9
404.64 100.467 M9
404.64 72 M9
406.8 72 M9
406.8 97.4446 M9
412.2 97.4446 M9
412.2 72 M9
423 72 M9
423 122.506 M9
428.4 122.506 M9
428.4 72 M9
430.56 72 M9
430.56 118.895 M9
435.96 118.895 M9
435.96 72 M9
438.12 72 M9
438.12 126.254 M9
443.52 126.254 M9
443.52 72 M9
445.68 72 M9
445.68 118.383 M9
451.08 118.383 M9
451.08 72 M9
456.48 72 M9
456.48 120.526 M9
461.88 120.526 M9
461.88 72 M9
464.04 72 M9
464.04 120.328 M9
469.44 120.328 M9
469.44 72 M9
471.6 72 M9
471.6 121.784 M9
477 121.784 M9
477 72 M9
479.16 72 M9
479.16 119.401 M9
484.56 119.401 M9
484.56 72 M9
489.96 72 M9
489.96 119.256 M9
495.36 119.256 M9
495.36 72 M9
497.52 72 M9
497.52 122.004 M9
502.92 122.004 M9
502.92 72 M9
505.08 72 M9
505.08 119.835 M9
510.48 119.835 M9
510.48 72 M9
512.64 72 M9
512.64 122.359 M9
518.04 122.359 M9
518.04 72 M9
523.44 72 M9
523.44 120.219 M9
528.84 120.219 M9
528.84 72 M9
531 72 M9
531 130.229 M9
536.4 130.229 M9
536.4 72 M9
538.56 72 M9
538.56 120.399 M9
543.96 120.399 M9
543.96 72 M9
546.12 72 M9
546.12 129.099 M9
551.52 129.099 M9
551.52 72 M9
556.92 72 M9
556.92 125.708 M9
562.32 125.708 M9
562.32 72 M9
564.48 72 M9
564.48 153.326 M9
569.88 153.326 M9
569.88 72 M9
572.04 72 M9
572.04 125.176 M9
577.44 125.176 M9
577.44 72 M9
579.6 72 M9
579.6 151.185 M9
585 151.185 M9
585 72 M9
595.8 72 M9
595.8 122.797 M9
601.2 122.797 M9
601.2 72 M9
603.36 72 M9
603.36 102.845 M9
608.76 102.845 M9
608.76 72 M9
610.92 72 M9
610.92 122.864 M9
616.32 122.864 M9
616.32 72 M9
618.48 72 M9
618.48 104.695 M9
623.88 104.695 M9
623.88 72 M9
629.28 72 M9
629.28 122.012 M9
634.68 122.012 M9
634.68 72 M9
636.84 72 M9
636.84 103.051 M9
642.24 103.051 M9
642.24 72 M9
644.4 72 M9
644.4 116.523 M9
649.8 116.523 M9
649.8 72 M9
651.96 72 M9
651.96 103.774 M9
657.36 103.774 M9
657.36 72 M9
662.76 72 M9
662.76 122.057 M9
668.16 122.057 M9
668.16 72 M9
670.32 72 M9
670.32 106.308 M9
675.72 106.308 M9
675.72 72 M9
677.88 72 M9
677.88 108.901 M9
683.28 108.901 M9
683.28 72 M9
685.44 72 M9
685.44 102.37 M9
690.84 102.37 M9
690.84 72 M9
696.24 72 M9
696.24 126.285 M9
701.64 126.285 M9
701.64 72 M9
703.8 72 M9
703.8 122.991 M9
709.2 122.991 M9
709.2 72 M9
711.36 72 M9
711.36 101.531 M9
716.76 101.531 M9
716.76 72 M9
718.92 72 M9
718.92 100.699 M9
724.32 100.699 M9
724.32 72 M9
729.72 72 M9
729.72 143.724 M9
735.12 143.724 M9
735.12 72 M9
737.28 72 M9
737.28 148.616 M9
742.68 148.616 M9
742.68 72 M9
744.84 72 M9
744.84 102.542 M9
750.24 102.542 M9
750.24 72 M9
752.4 72 M9
752.4 103.521 M9
757.8 103.521 M9
757.8 72 M9
768.6 72 M9
768.6 121.917 M9
774 121.917 M9
774 72 M9
776.16 72 M9
776.16 122.208 M9
781.56 122.208 M9
781.56 72 M9
783.72 72 M9
783.72 121.794 M9
789.12 121.794 M9
789.12 72 M9
791.28 72 M9
791.28 122.312 M9
796.68 122.312 M9
796.68 72 M9
802.08 72 M9
802.08 121.213 M9
807.48 121.213 M9
807.48 72 M9
809.64 72 M9
809.64 121.975 M9
815.04 121.975 M9
815.04 72 M9
817.2 72 M9
817.2 121.19 M9
822.6 121.19 M9
822.6 72 M9
824.76 72 M9
824.76 121.727 M9
830.16 121.727 M9
830.16 72 M9
835.56 72 M9
835.56 121.228 M9
840.96 121.228 M9
840.96 72 M9
843.12 72 M9
843.12 122.139 M9
848.52 122.139 M9
848.52 72 M9
850.68 72 M9
850.68 121.689 M9
856.08 121.689 M9
856.08 72 M9
858.24 72 M9
858.24 122.417 M9
863.64 122.417 M9
863.64 72 M9
869.04 72 M9
869.04 122.858 M9
874.44 122.858 M9
874.44 72 M9
876.6 72 M9
876.6 124.909 M9
882 124.909 M9
882 72 M9
884.16 72 M9
884.16 122.231 M9
889.56 122.231 M9
889.56 72 M9
891.72 72 M9
891.72 124.477 M9
897.12 124.477 M9
897.12 72 M9
902.52 72 M9
902.52 127.618 M9
907.92 127.618 M9
907.92 72 M9
910.08 72 M9
910.08 129.727 M9
915.48 129.727 M9
915.48 72 M9
917.64 72 M9
917.64 127.466 M9
923.04 127.466 M9
923.04 72 M9
925.2 72 M9
925.2 129.458 M9
930.6 129.458 M9
930.6 72 M9
gsave
D9
grestore
930.6 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
77.4 72 M9
77.4 88.7023 M9
82.8 88.7023 M9
82.8 72 M9
84.96 72 M9
84.96 88.89 M9
90.36 88.89 M9
90.36 72 M9
92.52 72 M9
92.52 88.702 M9
97.92 88.702 M9
97.92 72 M9
100.08 72 M9
100.08 88.8901 M9
105.48 88.8901 M9
105.48 72 M9
110.88 72 M9
110.88 88.7116 M9
116.28 88.7116 M9
116.28 72 M9
118.44 72 M9
118.44 88.8989 M9
123.84 88.8989 M9
123.84 72 M9
126 72 M9
126 88.712 M9
131.4 88.712 M9
131.4 72 M9
133.56 72 M9
133.56 88.8988 M9
138.96 88.8988 M9
138.96 72 M9
144.36 72 M9
144.36 88.7278 M9
149.76 88.7278 M9
149.76 72 M9
151.92 72 M9
151.92 88.9151 M9
157.32 88.9151 M9
157.32 72 M9
159.48 72 M9
159.48 88.7284 M9
164.88 88.7284 M9
164.88 72 M9
167.04 72 M9
167.04 88.9157 M9
172.44 88.9157 M9
172.44 72 M9
177.84 72 M9
177.84 88.7636 M9
183.24 88.7636 M9
183.24 72 M9
185.4 72 M9
185.4 88.9437 M9
190.8 88.9437 M9
190.8 72 M9
192.96 72 M9
192.96 88.7637 M9
198.36 88.7637 M9
198.36 72 M9
200.52 72 M9
200.52 88.9683 M9
205.92 88.9683 M9
205.92 72 M9
211.32 72 M9
211.32 88.8572 M9
216.72 88.8572 M9
216.72 72 M9
218.88 72 M9
218.88 89.0618 M9
224.28 89.0618 M9
224.28 72 M9
226.44 72 M9
226.44 88.9629 M9
231.84 88.9629 M9
231.84 72 M9
234 72 M9
234 89.1114 M9
239.4 89.1114 M9
239.4 72 M9
250.2 72 M9
250.2 92.8941 M9
255.6 92.8941 M9
255.6 72 M9
257.76 72 M9
257.76 90.3456 M9
263.16 90.3456 M9
263.16 72 M9
265.32 72 M9
265.32 92.8946 M9
270.72 92.8946 M9
270.72 72 M9
272.88 72 M9
272.88 90.3464 M9
278.28 90.3464 M9
278.28 72 M9
283.68 72 M9
283.68 92.8953 M9
289.08 92.8953 M9
289.08 72 M9
291.24 72 M9
291.24 90.3472 M9
296.64 90.3472 M9
296.64 72 M9
298.8 72 M9
298.8 92.8945 M9
304.2 92.8945 M9
304.2 72 M9
306.36 72 M9
306.36 90.3481 M9
311.76 90.3481 M9
311.76 72 M9
317.16 72 M9
317.16 92.8959 M9
322.56 92.8959 M9
322.56 72 M9
324.72 72 M9
324.72 90.3506 M9
330.12 90.3506 M9
330.12 72 M9
332.28 72 M9
332.28 92.8972 M9
337.68 92.8972 M9
337.68 72 M9
339.84 72 M9
339.84 90.3498 M9
345.24 90.3498 M9
345.24 72 M9
350.64 72 M9
350.64 92.9 M9
356.04 92.9 M9
356.04 72 M9
358.2 72 M9
358.2 90.3555 M9
363.6 90.3555 M9
363.6 72 M9
365.76 72 M9
365.76 92.899 M9
371.16 92.899 M9
371.16 72 M9
373.32 72 M9
373.32 90.3564 M9
378.72 90.3564 M9
378.72 72 M9
384.12 72 M9
384.12 92.9058 M9
389.52 92.9058 M9
389.52 72 M9
391.68 72 M9
391.68 90.3663 M9
397.08 90.3663 M9
397.08 72 M9
399.24 72 M9
399.24 92.9072 M9
404.64 92.9072 M9
404.64 72 M9
406.8 72 M9
406.8 90.3662 M9
412.2 90.3662 M9
412.2 72 M9
423 72 M9
423 96.4094 M9
428.4 96.4094 M9
428.4 72 M9
430.56 72 M9
430.56 98.0899 M9
435.96 98.0899 M9
435.96 72 M9
438.12 72 M9
438.12 96.4088 M9
443.52 96.4088 M9
443.52 72 M9
445.68 72 M9
445.68 98.0901 M9
451.08 98.0901 M9
451.08 72 M9
456.48 72 M9
456.48 96.464 M9
461.88 96.464 M9
461.88 72 M9
464.04 72 M9
464.04 98.1985 M9
469.44 98.1985 M9
469.44 72 M9
471.6 72 M9
471.6 96.4642 M9
477 96.4642 M9
477 72 M9
479.16 72 M9
479.16 98.1978 M9
484.56 98.1978 M9
484.56 72 M9
489.96 72 M9
489.96 96.512 M9
495.36 96.512 M9
495.36 72 M9
497.52 72 M9
497.52 98.4152 M9
502.92 98.4152 M9
502.92 72 M9
505.08 72 M9
505.08 96.5101 M9
510.48 96.5101 M9
510.48 72 M9
512.64 72 M9
512.64 98.417 M9
518.04 98.417 M9
518.04 72 M9
523.44 72 M9
523.44 96.6214 M9
528.84 96.6214 M9
528.84 72 M9
531 72 M9
531 98.8651 M9
536.4 98.8651 M9
536.4 72 M9
538.56 72 M9
538.56 96.6077 M9
543.96 96.6077 M9
543.96 72 M9
546.12 72 M9
546.12 98.8679 M9
551.52 98.8679 M9
551.52 72 M9
556.92 72 M9
556.92 96.9122 M9
562.32 96.9122 M9
562.32 72 M9
564.48 72 M9
564.48 99.8265 M9
569.88 99.8265 M9
569.88 72 M9
572.04 72 M9
572.04 96.909 M9
577.44 96.909 M9
577.44 72 M9
579.6 72 M9
579.6 99.8074 M9
585 99.8074 M9
585 72 M9
595.8 72 M9
595.8 90.0585 M9
601.2 90.0585 M9
601.2 72 M9
603.36 72 M9
603.36 91.5536 M9
608.76 91.5536 M9
608.76 72 M9
610.92 72 M9
610.92 90.0581 M9
616.32 90.0581 M9
616.32 72 M9
618.48 72 M9
618.48 91.553 M9
623.88 91.553 M9
623.88 72 M9
629.28 72 M9
629.28 90.0618 M9
634.68 90.0618 M9
634.68 72 M9
636.84 72 M9
636.84 91.5574 M9
642.24 91.5574 M9
642.24 72 M9
644.4 72 M9
644.4 90.0611 M9
649.8 90.0611 M9
649.8 72 M9
651.96 72 M9
651.96 91.5566 M9
657.36 91.5566 M9
657.36 72 M9
662.76 72 M9
662.76 90.0678 M9
668.16 90.0678 M9
668.16 72 M9
670.32 72 M9
670.32 91.5641 M9
675.72 91.5641 M9
675.72 72 M9
677.88 72 M9
677.88 90.0658 M9
683.28 90.0658 M9
683.28 72 M9
685.44 72 M9
685.44 91.5643 M9
690.84 91.5643 M9
690.84 72 M9
696.24 72 M9
696.24 90.0773 M9
701.64 90.0773 M9
701.64 72 M9
703.8 72 M9
703.8 91.5787 M9
709.2 91.5787 M9
709.2 72 M9
711.36 72 M9
711.36 90.0762 M9
716.76 90.0762 M9
716.76 72 M9
718.92 72 M9
718.92 91.5794 M9
724.32 91.5794 M9
724.32 72 M9
729.72 72 M9
729.72 90.0987 M9
735.12 90.0987 M9
735.12 72 M9
737.28 72 M9
737.28 91.6094 M9
742.68 91.6094 M9
742.68 72 M9
744.84 72 M9
744.84 90.0979 M9
750.24 90.0979 M9
750.24 72 M9
752.4 72 M9
752.4 91.6103 M9
757.8 91.6103 M9
757.8 72 M9
768.6 72 M9
768.6 98.1919 M9
774 98.1919 M9
774 72 M9
776.16 72 M9
776.16 99.6986 M9
781.56 99.6986 M9
781.56 72 M9
783.72 72 M9
783.72 98.1891 M9
789.12 98.1891 M9
789.12 72 M9
791.28 72 M9
791.28 99.703 M9
796.68 99.703 M9
796.68 72 M9
802.08 72 M9
802.08 98.2272 M9
807.48 98.2272 M9
807.48 72 M9
809.64 72 M9
809.64 99.7498 M9
815.04 99.7498 M9
815.04 72 M9
817.2 72 M9
817.2 98.2253 M9
822.6 98.2253 M9
822.6 72 M9
824.76 72 M9
824.76 99.7539 M9
830.16 99.7539 M9
830.16 72 M9
835.56 72 M9
835.56 98.3026 M9
840.96 98.3026 M9
840.96 72 M9
843.12 72 M9
843.12 99.8738 M9
848.52 99.8738 M9
848.52 72 M9
850.68 72 M9
850.68 98.2966 M9
856.08 98.2966 M9
856.08 72 M9
858.24 72 M9
858.24 99.8764 M9
863.64 99.8764 M9
863.64 72 M9
869.04 72 M9
869.04 98.429 M9
874.44 98.429 M9
874.44 72 M9
876.6 72 M9
876.6 100.087 M9
882 100.087 M9
882 72 M9
884.16 72 M9
884.16 98.4351 M9
889.56 98.4351 M9
889.56 72 M9
891.72 72 M9
891.72 100.089 M9
897.12 100.089 M9
897.12 72 M9
902.52 72 M9
902.52 98.5503 M9
907.92 98.5503 M9
907.92 72 M9
910.08 72 M9
910.08 100.295 M9
915.48 100.295 M9
915.48 72 M9
917.64 72 M9
917.64 98.5443 M9
923.04 98.5443 M9
923.04 72 M9
925.2 72 M9
925.2 100.29 M9
930.6 100.29 M9
930.6 72 M9
gsave
D9
grestore
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
930.6 72 M9
72 72 M9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 123.429 TXC
9 /Helvetica-Bold SetTxt
(100) 0 68 120.729 TXR
4 /Helvetica SetTxt
(|) -90 72 174.857 TXC
9 /Helvetica-Bold SetTxt
(200) 0 68 172.157 TXR
4 /Helvetica SetTxt
(|) -90 72 226.286 TXC
9 /Helvetica-Bold SetTxt
(300) 0 68 223.586 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 123.429 TXC
(|) 90 936 174.857 TXC
(|) 90 936 226.286 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Combined execution time (normalized)) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 87.66 63 TXC
(2) 0 121.14 63 TXC
(4) 0 154.62 63 TXC
(8) 0 188.1 63 TXC
(16) 0 221.58 63 TXC
9 /Helvetica-Bold SetTxt
(tomcatv) 0 158.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 260.46 63 TXC
(2) 0 293.94 63 TXC
(4) 0 327.42 63 TXC
(8) 0 360.9 63 TXC
(16) 0 394.38 63 TXC
9 /Helvetica-Bold SetTxt
(swim) 0 331.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 433.26 63 TXC
(2) 0 466.74 63 TXC
(4) 0 500.22 63 TXC
(8) 0 533.7 63 TXC
(16) 0 567.18 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 504 48.6 TXC
8 /Helvetica SetTxt
(1) 0 606.06 63 TXC
(2) 0 639.54 63 TXC
(4) 0 673.02 63 TXC
(8) 0 706.5 63 TXC
(16) 0 739.98 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 676.8 48.6 TXC
8 /Helvetica SetTxt
(1) 0 778.86 63 TXC
(2) 0 812.34 63 TXC
(4) 0 845.82 63 TXC
(8) 0 879.3 63 TXC
(16) 0 912.78 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 849.6 48.6 TXC
10 /Helvetica-Bold SetTxt
(Combined Execution Time) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 87.66 54.6 TXC
() 0 121.14 54.6 TXC
() 0 154.62 54.6 TXC
() 0 188.1 54.6 TXC
() 0 221.58 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 158.4 39.15 TXC
8 /Helvetica SetTxt
() 0 260.46 54.6 TXC
() 0 293.94 54.6 TXC
() 0 327.42 54.6 TXC
() 0 360.9 54.6 TXC
() 0 394.38 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 331.2 39.15 TXC
8 /Helvetica SetTxt
() 0 433.26 54.6 TXC
() 0 466.74 54.6 TXC
() 0 500.22 54.6 TXC
() 0 533.7 54.6 TXC
() 0 567.18 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 504 39.15 TXC
8 /Helvetica SetTxt
() 0 606.06 54.6 TXC
() 0 639.54 54.6 TXC
() 0 673.02 54.6 TXC
() 0 706.5 54.6 TXC
() 0 739.98 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 676.8 39.15 TXC
8 /Helvetica SetTxt
() 0 778.86 54.6 TXC
() 0 812.34 54.6 TXC
() 0 845.82 54.6 TXC
() 0 879.3 54.6 TXC
() 0 912.78 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 849.6 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 38 32 972 275 467 121.5 53.67 510.11 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/pf2-mcpi.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 38 32 972 275
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[] 1.000000 SL
gsave 30.000000 45.000000 {pop} SS9 1.000000 G9
944.64 248.4 958.813 248.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 248.4 958.813 248.4 
L9 grestore
gsave 30.000000 45.000000 {pop} SS9 1.000000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
10 /Helvetica SetTxt
( Prefetches) 0 960.231 238.9 TXL
72 72 S9
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
944.64 235.4 958.813 235.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 235.4 958.813 235.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 0.000000 {cross} SS9 1.000000 G9
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
( False sharing) 0 960.231 225.9 TXL
72 72 S9
[] 1.000000 SL
944.64 222.4 958.813 222.4 
958.813 72 
944.64 72 
F9
gsave 0.0 G9 944.64 222.4 958.813 222.4 
L9 grestore
[] 1.000000 SL
gsave 30.000000 135.000000 {pop} SS9 1.000000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
( True sharing) 0 960.231 212.9 TXL
72 72 S9
[] 1.000000 SL
gsave 50.000000 135.000000 {pop} SS9 0.700000 G9
944.64 209.4 958.813 209.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 209.4 958.813 209.4 
L9 grestore
[] 1.000000 SL
gsave 50.000000 135.000000 {pop} SS9 1.000000 G9
944.64 196.4 958.813 196.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 196.4 958.813 196.4 
L9 grestore
( Replacement) 0 960.231 199.9 TXL
72 72 S9
gsave 30.000000 45.000000 {cross} SS9 1.000000 G9
944.64 196.4 958.813 196.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 196.4 958.813 196.4 
L9 grestore
gsave 30.000000 45.000000 {cross} SS9 1.000000 G9
944.64 183.4 958.813 183.4 
958.813 72 
944.64 72 
F9
grestore
gsave 0.0 G9 944.64 183.4 958.813 183.4 
L9 grestore
( On-chip Cache) 0 960.231 186.9 TXL
72 72 S9
77.4 72 M9
77.4 185.923 M9
82.8 185.923 M9
82.8 72 M9
84.96 72 M9
84.96 146.173 M9
90.36 146.173 M9
90.36 72 M9
92.52 72 M9
92.52 185.929 M9
97.92 185.929 M9
97.92 72 M9
100.08 72 M9
100.08 146.36 M9
105.48 146.36 M9
105.48 72 M9
110.88 72 M9
110.88 187.208 M9
116.28 187.208 M9
116.28 72 M9
118.44 72 M9
118.44 148.437 M9
123.84 148.437 M9
123.84 72 M9
126 72 M9
126 150.522 M9
131.4 150.522 M9
131.4 72 M9
133.56 72 M9
133.56 105.374 M9
138.96 105.374 M9
138.96 72 M9
144.36 72 M9
144.36 192.265 M9
149.76 192.265 M9
149.76 72 M9
151.92 72 M9
151.92 160.619 M9
157.32 160.619 M9
157.32 72 M9
159.48 72 M9
159.48 148.304 M9
164.88 148.304 M9
164.88 72 M9
167.04 72 M9
167.04 109.35 M9
172.44 109.35 M9
172.44 72 M9
177.84 72 M9
177.84 222.765 M9
183.24 222.765 M9
183.24 72 M9
185.4 72 M9
185.4 228.388 M9
190.8 228.388 M9
190.8 72 M9
192.96 72 M9
192.96 130.818 M9
198.36 130.818 M9
198.36 72 M9
200.52 72 M9
200.52 115.71 M9
205.92 115.71 M9
205.92 72 M9
211.32 72 M9
211.32 252 M9
216.72 252 M9
216.72 72 M9
218.88 72 M9
218.88 252 M9
224.28 252 M9
224.28 72 M9
226.44 72 M9
226.44 95.3468 M9
231.84 95.3468 M9
231.84 72 M9
234 72 M9
234 93.9307 M9
239.4 93.9307 M9
239.4 72 M9
250.2 72 M9
250.2 150.349 M9
255.6 150.349 M9
255.6 72 M9
257.76 72 M9
257.76 116.597 M9
263.16 116.597 M9
263.16 72 M9
265.32 72 M9
265.32 151.351 M9
270.72 151.351 M9
270.72 72 M9
272.88 72 M9
272.88 117.357 M9
278.28 117.357 M9
278.28 72 M9
283.68 72 M9
283.68 151.106 M9
289.08 151.106 M9
289.08 72 M9
291.24 72 M9
291.24 118.96 M9
296.64 118.96 M9
296.64 72 M9
298.8 72 M9
298.8 152.253 M9
304.2 152.253 M9
304.2 72 M9
306.36 72 M9
306.36 119.074 M9
311.76 119.074 M9
311.76 72 M9
317.16 72 M9
317.16 153.999 M9
322.56 153.999 M9
322.56 72 M9
324.72 72 M9
324.72 125.007 M9
330.12 125.007 M9
330.12 72 M9
332.28 72 M9
332.28 154.787 M9
337.68 154.787 M9
337.68 72 M9
339.84 72 M9
339.84 124.529 M9
345.24 124.529 M9
345.24 72 M9
350.64 72 M9
350.64 173.742 M9
356.04 173.742 M9
356.04 72 M9
358.2 72 M9
358.2 180.684 M9
363.6 180.684 M9
363.6 72 M9
365.76 72 M9
365.76 137.537 M9
371.16 137.537 M9
371.16 72 M9
373.32 72 M9
373.32 130.183 M9
378.72 130.183 M9
378.72 72 M9
384.12 72 M9
384.12 252 M9
389.52 252 M9
389.52 72 M9
391.68 72 M9
391.68 252 M9
397.08 252 M9
397.08 72 M9
399.24 72 M9
399.24 92.7253 M9
404.64 92.7253 M9
404.64 72 M9
406.8 72 M9
406.8 94.8093 M9
412.2 94.8093 M9
412.2 72 M9
423 72 M9
423 133.758 M9
428.4 133.758 M9
428.4 72 M9
430.56 72 M9
430.56 118.767 M9
435.96 118.767 M9
435.96 72 M9
438.12 72 M9
438.12 142.118 M9
443.52 142.118 M9
443.52 72 M9
445.68 72 M9
445.68 117.654 M9
451.08 117.654 M9
451.08 72 M9
456.48 72 M9
456.48 128.861 M9
461.88 128.861 M9
461.88 72 M9
464.04 72 M9
464.04 120.988 M9
469.44 120.988 M9
469.44 72 M9
471.6 72 M9
471.6 131.606 M9
477 131.606 M9
477 72 M9
479.16 72 M9
479.16 118.834 M9
484.56 118.834 M9
484.56 72 M9
489.96 72 M9
489.96 125.712 M9
495.36 125.712 M9
495.36 72 M9
497.52 72 M9
497.52 124.007 M9
502.92 124.007 M9
502.92 72 M9
505.08 72 M9
505.08 127.009 M9
510.48 127.009 M9
510.48 72 M9
512.64 72 M9
512.64 124.702 M9
518.04 124.702 M9
518.04 72 M9
523.44 72 M9
523.44 127.443 M9
528.84 127.443 M9
528.84 72 M9
531 72 M9
531 140.247 M9
536.4 140.247 M9
536.4 72 M9
538.56 72 M9
538.56 127.884 M9
543.96 127.884 M9
543.96 72 M9
546.12 72 M9
546.12 137.727 M9
551.52 137.727 M9
551.52 72 M9
556.92 72 M9
556.92 138.206 M9
562.32 138.206 M9
562.32 72 M9
564.48 72 M9
564.48 184.575 M9
569.88 184.575 M9
569.88 72 M9
572.04 72 M9
572.04 136.942 M9
577.44 136.942 M9
577.44 72 M9
579.6 72 M9
579.6 179.962 M9
585 179.962 M9
585 72 M9
595.8 72 M9
595.8 175.373 M9
601.2 175.373 M9
601.2 72 M9
603.36 72 M9
603.36 106.352 M9
608.76 106.352 M9
608.76 72 M9
610.92 72 M9
610.92 176.256 M9
616.32 176.256 M9
616.32 72 M9
618.48 72 M9
618.48 111.777 M9
623.88 111.777 M9
623.88 72 M9
629.28 72 M9
629.28 172.636 M9
634.68 172.636 M9
634.68 72 M9
636.84 72 M9
636.84 106.911 M9
642.24 106.911 M9
642.24 72 M9
644.4 72 M9
644.4 155.479 M9
649.8 155.479 M9
649.8 72 M9
651.96 72 M9
651.96 108.941 M9
657.36 108.941 M9
657.36 72 M9
662.76 72 M9
662.76 172.45 M9
668.16 172.45 M9
668.16 72 M9
670.32 72 M9
670.32 116.739 M9
675.72 116.739 M9
675.72 72 M9
677.88 72 M9
677.88 130.661 M9
683.28 130.661 M9
683.28 72 M9
685.44 72 M9
685.44 104.617 M9
690.84 104.617 M9
690.84 72 M9
696.24 72 M9
696.24 185.504 M9
701.64 185.504 M9
701.64 72 M9
703.8 72 M9
703.8 167.356 M9
709.2 167.356 M9
709.2 72 M9
711.36 72 M9
711.36 108.322 M9
716.76 108.322 M9
716.76 72 M9
718.92 72 M9
718.92 99.6397 M9
724.32 99.6397 M9
724.32 72 M9
729.72 72 M9
729.72 238.59 M9
735.12 238.59 M9
735.12 72 M9
737.28 72 M9
737.28 244.923 M9
742.68 244.923 M9
742.68 72 M9
744.84 72 M9
744.84 110.895 M9
750.24 110.895 M9
750.24 72 M9
752.4 72 M9
752.4 107.824 M9
757.8 107.824 M9
757.8 72 M9
768.6 72 M9
768.6 124.879 M9
774 124.879 M9
774 72 M9
776.16 72 M9
776.16 119.79 M9
781.56 119.79 M9
781.56 72 M9
783.72 72 M9
783.72 124.614 M9
789.12 124.614 M9
789.12 72 M9
791.28 72 M9
791.28 119.968 M9
796.68 119.968 M9
796.68 72 M9
802.08 72 M9
802.08 123.438 M9
807.48 123.438 M9
807.48 72 M9
809.64 72 M9
809.64 119.224 M9
815.04 119.224 M9
815.04 72 M9
817.2 72 M9
817.2 123.186 M9
822.6 123.186 M9
822.6 72 M9
824.76 72 M9
824.76 118.628 M9
830.16 118.628 M9
830.16 72 M9
835.56 72 M9
835.56 123.084 M9
840.96 123.084 M9
840.96 72 M9
843.12 72 M9
843.12 119.134 M9
848.52 119.134 M9
848.52 72 M9
850.68 72 M9
850.68 124.025 M9
856.08 124.025 M9
856.08 72 M9
858.24 72 M9
858.24 119.665 M9
863.64 119.665 M9
863.64 72 M9
869.04 72 M9
869.04 125.587 M9
874.44 125.587 M9
874.44 72 M9
876.6 72 M9
876.6 123.898 M9
882 123.898 M9
882 72 M9
884.16 72 M9
884.16 124.051 M9
889.56 124.051 M9
889.56 72 M9
891.72 72 M9
891.72 122.843 M9
897.12 122.843 M9
897.12 72 M9
902.52 72 M9
902.52 134.049 M9
907.92 134.049 M9
907.92 72 M9
910.08 72 M9
910.08 132.289 M9
915.48 132.289 M9
915.48 72 M9
917.64 72 M9
917.64 133.173 M9
923.04 133.173 M9
923.04 72 M9
925.2 72 M9
925.2 131.292 M9
930.6 131.292 M9
930.6 72 M9
gsave
D9
grestore
gsave 30.000000 45.000000 {pop} SS9 1.000000 G9
930.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
77.4 72 M9
77.4 185.923 M9
82.8 185.923 M9
82.8 72 M9
84.96 72 M9
84.96 138.291 M9
90.36 138.291 M9
90.36 72 M9
92.52 72 M9
92.52 185.929 M9
97.92 185.929 M9
97.92 72 M9
100.08 72 M9
100.08 138.525 M9
105.48 138.525 M9
105.48 72 M9
110.88 72 M9
110.88 187.208 M9
116.28 187.208 M9
116.28 72 M9
118.44 72 M9
118.44 140.053 M9
123.84 140.053 M9
123.84 72 M9
126 72 M9
126 150.522 M9
131.4 150.522 M9
131.4 72 M9
133.56 72 M9
133.56 98.2702 M9
138.96 98.2702 M9
138.96 72 M9
144.36 72 M9
144.36 192.265 M9
149.76 192.265 M9
149.76 72 M9
151.92 72 M9
151.92 147.911 M9
157.32 147.911 M9
157.32 72 M9
159.48 72 M9
159.48 148.304 M9
164.88 148.304 M9
164.88 72 M9
167.04 72 M9
167.04 100.456 M9
172.44 100.456 M9
172.44 72 M9
177.84 72 M9
177.84 222.765 M9
183.24 222.765 M9
183.24 72 M9
185.4 72 M9
185.4 189.341 M9
190.8 189.341 M9
190.8 72 M9
192.96 72 M9
192.96 130.818 M9
198.36 130.818 M9
198.36 72 M9
200.52 72 M9
200.52 106.439 M9
205.92 106.439 M9
205.92 72 M9
211.32 72 M9
211.32 252 M9
216.72 252 M9
216.72 72 M9
218.88 72 M9
218.88 252 M9
224.28 252 M9
224.28 72 M9
226.44 72 M9
226.44 95.3468 M9
231.84 95.3468 M9
231.84 72 M9
234 72 M9
234 93.662 M9
239.4 93.662 M9
239.4 72 M9
250.2 72 M9
250.2 150.349 M9
255.6 150.349 M9
255.6 72 M9
257.76 72 M9
257.76 101.228 M9
263.16 101.228 M9
263.16 72 M9
265.32 72 M9
265.32 151.351 M9
270.72 151.351 M9
270.72 72 M9
272.88 72 M9
272.88 102.266 M9
278.28 102.266 M9
278.28 72 M9
283.68 72 M9
283.68 151.106 M9
289.08 151.106 M9
289.08 72 M9
291.24 72 M9
291.24 102.47 M9
296.64 102.47 M9
296.64 72 M9
298.8 72 M9
298.8 152.253 M9
304.2 152.253 M9
304.2 72 M9
306.36 72 M9
306.36 102.838 M9
311.76 102.838 M9
311.76 72 M9
317.16 72 M9
317.16 153.999 M9
322.56 153.999 M9
322.56 72 M9
324.72 72 M9
324.72 105.169 M9
330.12 105.169 M9
330.12 72 M9
332.28 72 M9
332.28 154.787 M9
337.68 154.787 M9
337.68 72 M9
339.84 72 M9
339.84 104.987 M9
345.24 104.987 M9
345.24 72 M9
350.64 72 M9
350.64 173.742 M9
356.04 173.742 M9
356.04 72 M9
358.2 72 M9
358.2 129.566 M9
363.6 129.566 M9
363.6 72 M9
365.76 72 M9
365.76 137.537 M9
371.16 137.537 M9
371.16 72 M9
373.32 72 M9
373.32 110.107 M9
378.72 110.107 M9
378.72 72 M9
384.12 72 M9
384.12 252 M9
389.52 252 M9
389.52 72 M9
391.68 72 M9
391.68 200.254 M9
397.08 200.254 M9
397.08 72 M9
399.24 72 M9
399.24 92.7253 M9
404.64 92.7253 M9
404.64 72 M9
406.8 72 M9
406.8 94.2523 M9
412.2 94.2523 M9
412.2 72 M9
423 72 M9
423 133.758 M9
428.4 133.758 M9
428.4 72 M9
430.56 72 M9
430.56 115.822 M9
435.96 115.822 M9
435.96 72 M9
438.12 72 M9
438.12 142.118 M9
443.52 142.118 M9
443.52 72 M9
445.68 72 M9
445.68 114.703 M9
451.08 114.703 M9
451.08 72 M9
456.48 72 M9
456.48 128.861 M9
461.88 128.861 M9
461.88 72 M9
464.04 72 M9
464.04 118.633 M9
469.44 118.633 M9
469.44 72 M9
471.6 72 M9
471.6 131.606 M9
477 131.606 M9
477 72 M9
479.16 72 M9
479.16 116.635 M9
484.56 116.635 M9
484.56 72 M9
489.96 72 M9
489.96 125.712 M9
495.36 125.712 M9
495.36 72 M9
497.52 72 M9
497.52 121.902 M9
502.92 121.902 M9
502.92 72 M9
505.08 72 M9
505.08 127.009 M9
510.48 127.009 M9
510.48 72 M9
512.64 72 M9
512.64 122.664 M9
518.04 122.664 M9
518.04 72 M9
523.44 72 M9
523.44 127.443 M9
528.84 127.443 M9
528.84 72 M9
531 72 M9
531 136.992 M9
536.4 136.992 M9
536.4 72 M9
538.56 72 M9
538.56 127.884 M9
543.96 127.884 M9
543.96 72 M9
546.12 72 M9
546.12 134.64 M9
551.52 134.64 M9
551.52 72 M9
556.92 72 M9
556.92 138.206 M9
562.32 138.206 M9
562.32 72 M9
564.48 72 M9
564.48 174.954 M9
569.88 174.954 M9
569.88 72 M9
572.04 72 M9
572.04 136.942 M9
577.44 136.942 M9
577.44 72 M9
579.6 72 M9
579.6 170.44 M9
585 170.44 M9
585 72 M9
595.8 72 M9
595.8 175.373 M9
601.2 175.373 M9
601.2 72 M9
603.36 72 M9
603.36 99.1621 M9
608.76 99.1621 M9
608.76 72 M9
610.92 72 M9
610.92 176.256 M9
616.32 176.256 M9
616.32 72 M9
618.48 72 M9
618.48 104.421 M9
623.88 104.421 M9
623.88 72 M9
629.28 72 M9
629.28 172.636 M9
634.68 172.636 M9
634.68 72 M9
636.84 72 M9
636.84 99.825 M9
642.24 99.825 M9
642.24 72 M9
644.4 72 M9
644.4 155.479 M9
649.8 155.479 M9
649.8 72 M9
651.96 72 M9
651.96 103.245 M9
657.36 103.245 M9
657.36 72 M9
662.76 72 M9
662.76 172.45 M9
668.16 172.45 M9
668.16 72 M9
670.32 72 M9
670.32 103.764 M9
675.72 103.764 M9
675.72 72 M9
677.88 72 M9
677.88 130.661 M9
683.28 130.661 M9
683.28 72 M9
685.44 72 M9
685.44 101.413 M9
690.84 101.413 M9
690.84 72 M9
696.24 72 M9
696.24 185.504 M9
701.64 185.504 M9
701.64 72 M9
703.8 72 M9
703.8 128.573 M9
709.2 128.573 M9
709.2 72 M9
711.36 72 M9
711.36 108.322 M9
716.76 108.322 M9
716.76 72 M9
718.92 72 M9
718.92 98.6434 M9
724.32 98.6434 M9
724.32 72 M9
729.72 72 M9
729.72 238.59 M9
735.12 238.59 M9
735.12 72 M9
737.28 72 M9
737.28 179.617 M9
742.68 179.617 M9
742.68 72 M9
744.84 72 M9
744.84 110.895 M9
750.24 110.895 M9
750.24 72 M9
752.4 72 M9
752.4 105.783 M9
757.8 105.783 M9
757.8 72 M9
768.6 72 M9
768.6 124.879 M9
774 124.879 M9
774 72 M9
776.16 72 M9
776.16 119.197 M9
781.56 119.197 M9
781.56 72 M9
783.72 72 M9
783.72 124.614 M9
789.12 124.614 M9
789.12 72 M9
791.28 72 M9
791.28 119.369 M9
796.68 119.369 M9
796.68 72 M9
802.08 72 M9
802.08 123.438 M9
807.48 123.438 M9
807.48 72 M9
809.64 72 M9
809.64 118.605 M9
815.04 118.605 M9
815.04 72 M9
817.2 72 M9
817.2 123.186 M9
822.6 123.186 M9
822.6 72 M9
824.76 72 M9
824.76 117.992 M9
830.16 117.992 M9
830.16 72 M9
835.56 72 M9
835.56 123.084 M9
840.96 123.084 M9
840.96 72 M9
843.12 72 M9
843.12 118.394 M9
848.52 118.394 M9
848.52 72 M9
850.68 72 M9
850.68 124.025 M9
856.08 124.025 M9
856.08 72 M9
858.24 72 M9
858.24 118.921 M9
863.64 118.921 M9
863.64 72 M9
869.04 72 M9
869.04 125.587 M9
874.44 125.587 M9
874.44 72 M9
876.6 72 M9
876.6 122.555 M9
882 122.555 M9
882 72 M9
884.16 72 M9
884.16 124.051 M9
889.56 124.051 M9
889.56 72 M9
891.72 72 M9
891.72 121.553 M9
897.12 121.553 M9
897.12 72 M9
902.52 72 M9
902.52 134.049 M9
907.92 134.049 M9
907.92 72 M9
910.08 72 M9
910.08 130.336 M9
915.48 130.336 M9
915.48 72 M9
917.64 72 M9
917.64 133.173 M9
923.04 133.173 M9
923.04 72 M9
925.2 72 M9
925.2 129.129 M9
930.6 129.129 M9
930.6 72 M9
gsave
D9
grestore
gsave 50.000000 0.000000 {cross} SS9 0.700000 G9
930.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
77.4 72 M9
77.4 185.923 M9
82.8 185.923 M9
82.8 72 M9
84.96 72 M9
84.96 138.291 M9
90.36 138.291 M9
90.36 72 M9
92.52 72 M9
92.52 185.929 M9
97.92 185.929 M9
97.92 72 M9
100.08 72 M9
100.08 138.525 M9
105.48 138.525 M9
105.48 72 M9
110.88 72 M9
110.88 187.207 M9
116.28 187.207 M9
116.28 72 M9
118.44 72 M9
118.44 140.052 M9
123.84 140.052 M9
123.84 72 M9
126 72 M9
126 150.522 M9
131.4 150.522 M9
131.4 72 M9
133.56 72 M9
133.56 98.2696 M9
138.96 98.2696 M9
138.96 72 M9
144.36 72 M9
144.36 192.259 M9
149.76 192.259 M9
149.76 72 M9
151.92 72 M9
151.92 147.907 M9
157.32 147.907 M9
157.32 72 M9
159.48 72 M9
159.48 148.301 M9
164.88 148.301 M9
164.88 72 M9
167.04 72 M9
167.04 100.452 M9
172.44 100.452 M9
172.44 72 M9
177.84 72 M9
177.84 222.752 M9
183.24 222.752 M9
183.24 72 M9
185.4 72 M9
185.4 189.314 M9
190.8 189.314 M9
190.8 72 M9
192.96 72 M9
192.96 130.804 M9
198.36 130.804 M9
198.36 72 M9
200.52 72 M9
200.52 106.402 M9
205.92 106.402 M9
205.92 72 M9
211.32 72 M9
211.32 252 M9
216.72 252 M9
216.72 72 M9
218.88 72 M9
218.88 252 M9
224.28 252 M9
224.28 72 M9
226.44 72 M9
226.44 95.2694 M9
231.84 95.2694 M9
231.84 72 M9
234 72 M9
234 93.5899 M9
239.4 93.5899 M9
239.4 72 M9
250.2 72 M9
250.2 150.349 M9
255.6 150.349 M9
255.6 72 M9
257.76 72 M9
257.76 101.228 M9
263.16 101.228 M9
263.16 72 M9
265.32 72 M9
265.32 151.351 M9
270.72 151.351 M9
270.72 72 M9
272.88 72 M9
272.88 102.266 M9
278.28 102.266 M9
278.28 72 M9
283.68 72 M9
283.68 151.101 M9
289.08 151.101 M9
289.08 72 M9
291.24 72 M9
291.24 102.468 M9
296.64 102.468 M9
296.64 72 M9
298.8 72 M9
298.8 152.25 M9
304.2 152.25 M9
304.2 72 M9
306.36 72 M9
306.36 102.836 M9
311.76 102.836 M9
311.76 72 M9
317.16 72 M9
317.16 153.985 M9
322.56 153.985 M9
322.56 72 M9
324.72 72 M9
324.72 105.159 M9
330.12 105.159 M9
330.12 72 M9
332.28 72 M9
332.28 154.778 M9
337.68 154.778 M9
337.68 72 M9
339.84 72 M9
339.84 104.981 M9
345.24 104.981 M9
345.24 72 M9
350.64 72 M9
350.64 173.707 M9
356.04 173.707 M9
356.04 72 M9
358.2 72 M9
358.2 129.533 M9
363.6 129.533 M9
363.6 72 M9
365.76 72 M9
365.76 137.514 M9
371.16 137.514 M9
371.16 72 M9
373.32 72 M9
373.32 110.088 M9
378.72 110.088 M9
378.72 72 M9
384.12 72 M9
384.12 252 M9
389.52 252 M9
389.52 72 M9
391.68 72 M9
391.68 200.137 M9
397.08 200.137 M9
397.08 72 M9
399.24 72 M9
399.24 92.6369 M9
404.64 92.6369 M9
404.64 72 M9
406.8 72 M9
406.8 94.1576 M9
412.2 94.1576 M9
412.2 72 M9
423 72 M9
423 133.758 M9
428.4 133.758 M9
428.4 72 M9
430.56 72 M9
430.56 115.822 M9
435.96 115.822 M9
435.96 72 M9
438.12 72 M9
438.12 142.118 M9
443.52 142.118 M9
443.52 72 M9
445.68 72 M9
445.68 114.703 M9
451.08 114.703 M9
451.08 72 M9
456.48 72 M9
456.48 127.821 M9
461.88 127.821 M9
461.88 72 M9
464.04 72 M9
464.04 115.909 M9
469.44 115.909 M9
469.44 72 M9
471.6 72 M9
471.6 130.682 M9
477 130.682 M9
477 72 M9
479.16 72 M9
479.16 113.963 M9
484.56 113.963 M9
484.56 72 M9
489.96 72 M9
489.96 122.908 M9
495.36 122.908 M9
495.36 72 M9
497.52 72 M9
497.52 115.986 M9
502.92 115.986 M9
502.92 72 M9
505.08 72 M9
505.08 124.273 M9
510.48 124.273 M9
510.48 72 M9
512.64 72 M9
512.64 116.877 M9
518.04 116.877 M9
518.04 72 M9
523.44 72 M9
523.44 120.418 M9
528.84 120.418 M9
528.84 72 M9
531 72 M9
531 120.524 M9
536.4 120.524 M9
536.4 72 M9
538.56 72 M9
538.56 120.36 M9
543.96 120.36 M9
543.96 72 M9
546.12 72 M9
546.12 117.385 M9
551.52 117.385 M9
551.52 72 M9
556.92 72 M9
556.92 126.214 M9
562.32 126.214 M9
562.32 72 M9
564.48 72 M9
564.48 137.247 M9
569.88 137.247 M9
569.88 72 M9
572.04 72 M9
572.04 125.037 M9
577.44 125.037 M9
577.44 72 M9
579.6 72 M9
579.6 132.727 M9
585 132.727 M9
585 72 M9
595.8 72 M9
595.8 175.373 M9
601.2 175.373 M9
601.2 72 M9
603.36 72 M9
603.36 99.1621 M9
608.76 99.1621 M9
608.76 72 M9
610.92 72 M9
610.92 176.256 M9
616.32 176.256 M9
616.32 72 M9
618.48 72 M9
618.48 104.421 M9
623.88 104.421 M9
623.88 72 M9
629.28 72 M9
629.28 172.611 M9
634.68 172.611 M9
634.68 72 M9
636.84 72 M9
636.84 99.8128 M9
642.24 99.8128 M9
642.24 72 M9
644.4 72 M9
644.4 155.457 M9
649.8 155.457 M9
649.8 72 M9
651.96 72 M9
651.96 103.228 M9
657.36 103.228 M9
657.36 72 M9
662.76 72 M9
662.76 172.397 M9
668.16 172.397 M9
668.16 72 M9
670.32 72 M9
670.32 103.737 M9
675.72 103.737 M9
675.72 72 M9
677.88 72 M9
677.88 130.611 M9
683.28 130.611 M9
683.28 72 M9
685.44 72 M9
685.44 101.377 M9
690.84 101.377 M9
690.84 72 M9
696.24 72 M9
696.24 185.377 M9
701.64 185.377 M9
701.64 72 M9
703.8 72 M9
703.8 128.5 M9
709.2 128.5 M9
709.2 72 M9
711.36 72 M9
711.36 108.178 M9
716.76 108.178 M9
716.76 72 M9
718.92 72 M9
718.92 98.5492 M9
724.32 98.5492 M9
724.32 72 M9
729.72 72 M9
729.72 238.111 M9
735.12 238.111 M9
735.12 72 M9
737.28 72 M9
737.28 179.274 M9
742.68 179.274 M9
742.68 72 M9
744.84 72 M9
744.84 110.421 M9
750.24 110.421 M9
750.24 72 M9
752.4 72 M9
752.4 105.472 M9
757.8 105.472 M9
757.8 72 M9
768.6 72 M9
768.6 124.879 M9
774 124.879 M9
774 72 M9
776.16 72 M9
776.16 119.197 M9
781.56 119.197 M9
781.56 72 M9
783.72 72 M9
783.72 124.614 M9
789.12 124.614 M9
789.12 72 M9
791.28 72 M9
791.28 119.369 M9
796.68 119.369 M9
796.68 72 M9
802.08 72 M9
802.08 123.435 M9
807.48 123.435 M9
807.48 72 M9
809.64 72 M9
809.64 118.602 M9
815.04 118.602 M9
815.04 72 M9
817.2 72 M9
817.2 123.183 M9
822.6 123.183 M9
822.6 72 M9
824.76 72 M9
824.76 117.991 M9
830.16 117.991 M9
830.16 72 M9
835.56 72 M9
835.56 123.073 M9
840.96 123.073 M9
840.96 72 M9
843.12 72 M9
843.12 118.391 M9
848.52 118.391 M9
848.52 72 M9
850.68 72 M9
850.68 124.008 M9
856.08 124.008 M9
856.08 72 M9
858.24 72 M9
858.24 118.92 M9
863.64 118.92 M9
863.64 72 M9
869.04 72 M9
869.04 125.564 M9
874.44 125.564 M9
874.44 72 M9
876.6 72 M9
876.6 122.52 M9
882 122.52 M9
882 72 M9
884.16 72 M9
884.16 124.024 M9
889.56 124.024 M9
889.56 72 M9
891.72 72 M9
891.72 121.52 M9
897.12 121.52 M9
897.12 72 M9
902.52 72 M9
902.52 133.976 M9
907.92 133.976 M9
907.92 72 M9
910.08 72 M9
910.08 130.237 M9
915.48 130.237 M9
915.48 72 M9
917.64 72 M9
917.64 133.059 M9
923.04 133.059 M9
923.04 72 M9
925.2 72 M9
925.2 129.038 M9
930.6 129.038 M9
930.6 72 M9
gsave
D9
grestore
930.6 72 M9
72 72 M9
E9
72 72 S9
[] 1.000000 SL
77.4 72 M9
77.4 185.923 M9
82.8 185.923 M9
82.8 72 M9
84.96 72 M9
84.96 138.291 M9
90.36 138.291 M9
90.36 72 M9
92.52 72 M9
92.52 185.929 M9
97.92 185.929 M9
97.92 72 M9
100.08 72 M9
100.08 138.525 M9
105.48 138.525 M9
105.48 72 M9
110.88 72 M9
110.88 187.173 M9
116.28 187.173 M9
116.28 72 M9
118.44 72 M9
118.44 140.033 M9
123.84 140.033 M9
123.84 72 M9
126 72 M9
126 150.485 M9
131.4 150.485 M9
131.4 72 M9
133.56 72 M9
133.56 98.2606 M9
138.96 98.2606 M9
138.96 72 M9
144.36 72 M9
144.36 192.135 M9
149.76 192.135 M9
149.76 72 M9
151.92 72 M9
151.92 147.839 M9
157.32 147.839 M9
157.32 72 M9
159.48 72 M9
159.48 148.186 M9
164.88 148.186 M9
164.88 72 M9
167.04 72 M9
167.04 100.389 M9
172.44 100.389 M9
172.44 72 M9
177.84 72 M9
177.84 222.392 M9
183.24 222.392 M9
183.24 72 M9
185.4 72 M9
185.4 189.068 M9
190.8 189.068 M9
190.8 72 M9
192.96 72 M9
192.96 130.489 M9
198.36 130.489 M9
198.36 72 M9
200.52 72 M9
200.52 106.273 M9
205.92 106.273 M9
205.92 72 M9
211.32 72 M9
211.32 252 M9
216.72 252 M9
216.72 72 M9
218.88 72 M9
218.88 252 M9
224.28 252 M9
224.28 72 M9
226.44 72 M9
226.44 94.1923 M9
231.84 94.1923 M9
231.84 72 M9
234 72 M9
234 93.0156 M9
239.4 93.0156 M9
239.4 72 M9
250.2 72 M9
250.2 150.349 M9
255.6 150.349 M9
255.6 72 M9
257.76 72 M9
257.76 101.228 M9
263.16 101.228 M9
263.16 72 M9
265.32 72 M9
265.32 151.351 M9
270.72 151.351 M9
270.72 72 M9
272.88 72 M9
272.88 102.266 M9
278.28 102.266 M9
278.28 72 M9
283.68 72 M9
283.68 150.971 M9
289.08 150.971 M9
289.08 72 M9
291.24 72 M9
291.24 102.439 M9
296.64 102.439 M9
296.64 72 M9
298.8 72 M9
298.8 152.125 M9
304.2 152.125 M9
304.2 72 M9
306.36 72 M9
306.36 102.807 M9
311.76 102.807 M9
311.76 72 M9
317.16 72 M9
317.16 153.681 M9
322.56 153.681 M9
322.56 72 M9
324.72 72 M9
324.72 105.068 M9
330.12 105.068 M9
330.12 72 M9
332.28 72 M9
332.28 154.49 M9
337.68 154.49 M9
337.68 72 M9
339.84 72 M9
339.84 104.888 M9
345.24 104.888 M9
345.24 72 M9
350.64 72 M9
350.64 173.073 M9
356.04 173.073 M9
356.04 72 M9
358.2 72 M9
358.2 129.294 M9
363.6 129.294 M9
363.6 72 M9
365.76 72 M9
365.76 136.872 M9
371.16 136.872 M9
371.16 72 M9
373.32 72 M9
373.32 109.821 M9
378.72 109.821 M9
378.72 72 M9
384.12 72 M9
384.12 252 M9
389.52 252 M9
389.52 72 M9
391.68 72 M9
391.68 199.303 M9
397.08 199.303 M9
397.08 72 M9
399.24 72 M9
399.24 91.1173 M9
404.64 91.1173 M9
404.64 72 M9
406.8 72 M9
406.8 93.5648 M9
412.2 93.5648 M9
412.2 72 M9
423 72 M9
423 133.758 M9
428.4 133.758 M9
428.4 72 M9
430.56 72 M9
430.56 115.822 M9
435.96 115.822 M9
435.96 72 M9
438.12 72 M9
438.12 142.118 M9
443.52 142.118 M9
443.52 72 M9
445.68 72 M9
445.68 114.703 M9
451.08 114.703 M9
451.08 72 M9
456.48 72 M9
456.48 126.878 M9
461.88 126.878 M9
461.88 72 M9
464.04 72 M9
464.04 113.687 M9
469.44 113.687 M9
469.44 72 M9
471.6 72 M9
471.6 129.738 M9
477 129.738 M9
477 72 M9
479.16 72 M9
479.16 111.743 M9
484.56 111.743 M9
484.56 72 M9
489.96 72 M9
489.96 121.179 M9
495.36 121.179 M9
495.36 72 M9
497.52 72 M9
497.52 112.048 M9
502.92 112.048 M9
502.92 72 M9
505.08 72 M9
505.08 122.542 M9
510.48 122.542 M9
510.48 72 M9
512.64 72 M9
512.64 112.977 M9
518.04 112.977 M9
518.04 72 M9
523.44 72 M9
523.44 117.414 M9
528.84 117.414 M9
528.84 72 M9
531 72 M9
531 113.148 M9
536.4 113.148 M9
536.4 72 M9
538.56 72 M9
538.56 117.355 M9
543.96 117.355 M9
543.96 72 M9
546.12 72 M9
546.12 110.041 M9
551.52 110.041 M9
551.52 72 M9
556.92 72 M9
556.92 119.847 M9
562.32 119.847 M9
562.32 72 M9
564.48 72 M9
564.48 122.127 M9
569.88 122.127 M9
569.88 72 M9
572.04 72 M9
572.04 118.593 M9
577.44 118.593 M9
577.44 72 M9
579.6 72 M9
579.6 117.799 M9
585 117.799 M9
585 72 M9
595.8 72 M9
595.8 175.373 M9
601.2 175.373 M9
601.2 72 M9
603.36 72 M9
603.36 99.1621 M9
608.76 99.1621 M9
608.76 72 M9
610.92 72 M9
610.92 176.256 M9
616.32 176.256 M9
616.32 72 M9
618.48 72 M9
618.48 104.421 M9
623.88 104.421 M9
623.88 72 M9
629.28 72 M9
629.28 171.405 M9
634.68 171.405 M9
634.68 72 M9
636.84 72 M9
636.84 99.1974 M9
642.24 99.1974 M9
642.24 72 M9
644.4 72 M9
644.4 154.26 M9
649.8 154.26 M9
649.8 72 M9
651.96 72 M9
651.96 102.531 M9
657.36 102.531 M9
657.36 72 M9
662.76 72 M9
662.76 170.2 M9
668.16 170.2 M9
668.16 72 M9
670.32 72 M9
670.32 102.759 M9
675.72 102.759 M9
675.72 72 M9
677.88 72 M9
677.88 128.331 M9
683.28 128.331 M9
683.28 72 M9
685.44 72 M9
685.44 100.137 M9
690.84 100.137 M9
690.84 72 M9
696.24 72 M9
696.24 181.376 M9
701.64 181.376 M9
701.64 72 M9
703.8 72 M9
703.8 126.684 M9
709.2 126.684 M9
709.2 72 M9
711.36 72 M9
711.36 104.032 M9
716.76 104.032 M9
716.76 72 M9
718.92 72 M9
718.92 96.4362 M9
724.32 96.4362 M9
724.32 72 M9
729.72 72 M9
729.72 226.435 M9
735.12 226.435 M9
735.12 72 M9
737.28 72 M9
737.28 173.126 M9
742.68 173.126 M9
742.68 72 M9
744.84 72 M9
744.84 101.606 M9
750.24 101.606 M9
750.24 72 M9
752.4 72 M9
752.4 100.218 M9
757.8 100.218 M9
757.8 72 M9
768.6 72 M9
768.6 124.879 M9
774 124.879 M9
774 72 M9
776.16 72 M9
776.16 119.197 M9
781.56 119.197 M9
781.56 72 M9
783.72 72 M9
783.72 124.614 M9
789.12 124.614 M9
789.12 72 M9
791.28 72 M9
791.28 119.369 M9
796.68 119.369 M9
796.68 72 M9
802.08 72 M9
802.08 122.612 M9
807.48 122.612 M9
807.48 72 M9
809.64 72 M9
809.64 118.022 M9
815.04 118.022 M9
815.04 72 M9
817.2 72 M9
817.2 122.311 M9
822.6 122.311 M9
822.6 72 M9
824.76 72 M9
824.76 117.372 M9
830.16 117.372 M9
830.16 72 M9
835.56 72 M9
835.56 121.221 M9
840.96 121.221 M9
840.96 72 M9
843.12 72 M9
843.12 117.203 M9
848.52 117.203 M9
848.52 72 M9
850.68 72 M9
850.68 122.204 M9
856.08 122.204 M9
856.08 72 M9
858.24 72 M9
858.24 117.739 M9
863.64 117.739 M9
863.64 72 M9
869.04 72 M9
869.04 122.055 M9
874.44 122.055 M9
874.44 72 M9
876.6 72 M9
876.6 120.133 M9
882 120.133 M9
882 72 M9
884.16 72 M9
884.16 120.513 M9
889.56 120.513 M9
889.56 72 M9
891.72 72 M9
891.72 119.161 M9
897.12 119.161 M9
897.12 72 M9
902.52 72 M9
902.52 130.032 M9
907.92 130.032 M9
907.92 72 M9
910.08 72 M9
910.08 126.99 M9
915.48 126.99 M9
915.48 72 M9
917.64 72 M9
917.64 129.024 M9
923.04 129.024 M9
923.04 72 M9
925.2 72 M9
925.2 125.816 M9
930.6 125.816 M9
930.6 72 M9
gsave
D9
grestore
gsave 50.000000 135.000000 {pop} SS9 0.700000 G9
930.6 72 M9
72 72 M9
E9
grestore
72 72 S9
[] 1.000000 SL
77.4 72 M9
77.4 80.9933 M9
82.8 80.9933 M9
82.8 72 M9
84.96 72 M9
84.96 86.7036 M9
90.36 86.7036 M9
90.36 72 M9
92.52 72 M9
92.52 80.995 M9
97.92 80.995 M9
97.92 72 M9
100.08 72 M9
100.08 86.8332 M9
105.48 86.8332 M9
105.48 72 M9
110.88 72 M9
110.88 81.0415 M9
116.28 81.0415 M9
116.28 72 M9
118.44 72 M9
118.44 86.8011 M9
123.84 86.8011 M9
123.84 72 M9
126 72 M9
126 82.2484 M9
131.4 82.2484 M9
131.4 72 M9
133.56 72 M9
133.56 88.1065 M9
138.96 88.1065 M9
138.96 72 M9
144.36 72 M9
144.36 81.1708 M9
149.76 81.1708 M9
149.76 72 M9
151.92 72 M9
151.92 87.0905 M9
157.32 87.0905 M9
157.32 72 M9
159.48 72 M9
159.48 82.2968 M9
164.88 82.2968 M9
164.88 72 M9
167.04 72 M9
167.04 87.799 M9
172.44 87.799 M9
172.44 72 M9
177.84 72 M9
177.84 81.58 M9
183.24 81.58 M9
183.24 72 M9
185.4 72 M9
185.4 88.4627 M9
190.8 88.4627 M9
190.8 72 M9
192.96 72 M9
192.96 84.2956 M9
198.36 84.2956 M9
198.36 72 M9
200.52 72 M9
200.52 88.6197 M9
205.92 88.6197 M9
205.92 72 M9
211.32 72 M9
211.32 83.3513 M9
216.72 83.3513 M9
216.72 72 M9
218.88 72 M9
218.88 91.2164 M9
224.28 91.2164 M9
224.28 72 M9
226.44 72 M9
226.44 87.6532 M9
231.84 87.6532 M9
231.84 72 M9
234 72 M9
234 88.3713 M9
239.4 88.3713 M9
239.4 72 M9
250.2 72 M9
250.2 80.126 M9
255.6 80.126 M9
255.6 72 M9
257.76 72 M9
257.76 88.1834 M9
263.16 88.1834 M9
263.16 72 M9
265.32 72 M9
265.32 81.1175 M9
270.72 81.1175 M9
270.72 72 M9
272.88 72 M9
272.88 89.2678 M9
278.28 89.2678 M9
278.28 72 M9
283.68 72 M9
283.68 80.1781 M9
289.08 80.1781 M9
289.08 72 M9
291.24 72 M9
291.24 88.2951 M9
296.64 88.2951 M9
296.64 72 M9
298.8 72 M9
298.8 81.1405 M9
304.2 81.1405 M9
304.2 72 M9
306.36 72 M9
306.36 89.3487 M9
311.76 89.3487 M9
311.76 72 M9
317.16 72 M9
317.16 80.2303 M9
322.56 80.2303 M9
322.56 72 M9
324.72 72 M9
324.72 88.6322 M9
330.12 88.6322 M9
330.12 72 M9
332.28 72 M9
332.28 81.4663 M9
337.68 81.4663 M9
337.68 72 M9
339.84 72 M9
339.84 89.7308 M9
345.24 89.7308 M9
345.24 72 M9
350.64 72 M9
350.64 80.5864 M9
356.04 80.5864 M9
356.04 72 M9
358.2 72 M9
358.2 91.0718 M9
363.6 91.0718 M9
363.6 72 M9
365.76 72 M9
365.76 83.5816 M9
371.16 83.5816 M9
371.16 72 M9
373.32 72 M9
373.32 90.9067 M9
378.72 90.9067 M9
378.72 72 M9
384.12 72 M9
384.12 82.1485 M9
389.52 82.1485 M9
389.52 72 M9
391.68 72 M9
391.68 96.1126 M9
397.08 96.1126 M9
397.08 72 M9
399.24 72 M9
399.24 87.5782 M9
404.64 87.5782 M9
404.64 72 M9
406.8 72 M9
406.8 90.946 M9
412.2 90.946 M9
412.2 72 M9
423 72 M9
423 92.6913 M9
428.4 92.6913 M9
428.4 72 M9
430.56 72 M9
430.56 93.6798 M9
435.96 93.6798 M9
435.96 72 M9
438.12 72 M9
438.12 91.5787 M9
443.52 91.5787 M9
443.52 72 M9
445.68 72 M9
445.68 92.8165 M9
451.08 92.8165 M9
451.08 72 M9
456.48 72 M9
456.48 93.3575 M9
461.88 93.3575 M9
461.88 72 M9
464.04 72 M9
464.04 93.9956 M9
469.44 93.9956 M9
469.44 72 M9
471.6 72 M9
471.6 93.4903 M9
477 93.4903 M9
477 72 M9
479.16 72 M9
479.16 92.8032 M9
484.56 92.8032 M9
484.56 72 M9
489.96 72 M9
489.96 94.1293 M9
495.36 94.1293 M9
495.36 72 M9
497.52 72 M9
497.52 94.1373 M9
502.92 94.1373 M9
502.92 72 M9
505.08 72 M9
505.08 93.6985 M9
510.48 93.6985 M9
510.48 72 M9
512.64 72 M9
512.64 94.4858 M9
518.04 94.4858 M9
518.04 72 M9
523.44 72 M9
523.44 95.1974 M9
528.84 95.1974 M9
528.84 72 M9
531 72 M9
531 94.5998 M9
536.4 94.5998 M9
536.4 72 M9
538.56 72 M9
538.56 94.5254 M9
543.96 94.5254 M9
543.96 72 M9
546.12 72 M9
546.12 92.4829 M9
551.52 92.4829 M9
551.52 72 M9
556.92 72 M9
556.92 96.7196 M9
562.32 96.7196 M9
562.32 72 M9
564.48 72 M9
564.48 95.8373 M9
569.88 95.8373 M9
569.88 72 M9
572.04 72 M9
572.04 94.268 M9
577.44 94.268 M9
577.44 72 M9
579.6 72 M9
579.6 92.3442 M9
585 92.3442 M9
585 72 M9
595.8 72 M9
595.8 84.6995 M9
601.2 84.6995 M9
601.2 72 M9
603.36 72 M9
603.36 91.7226 M9
608.76 91.7226 M9
608.76 72 M9
610.92 72 M9
610.92 85.4332 M9
616.32 85.4332 M9
616.32 72 M9
618.48 72 M9
618.48 91.6113 M9
623.88 91.6113 M9
623.88 72 M9
629.28 72 M9
629.28 85.1503 M9
634.68 85.1503 M9
634.68 72 M9
636.84 72 M9
636.84 91.9322 M9
642.24 91.9322 M9
642.24 72 M9
644.4 72 M9
644.4 87.3577 M9
649.8 87.3577 M9
649.8 72 M9
651.96 72 M9
651.96 92.2571 M9
657.36 92.2571 M9
657.36 72 M9
662.76 72 M9
662.76 85.7544 M9
668.16 85.7544 M9
668.16 72 M9
670.32 72 M9
670.32 92.2257 M9
675.72 92.2257 M9
675.72 72 M9
677.88 72 M9
677.88 90.7937 M9
683.28 90.7937 M9
683.28 72 M9
685.44 72 M9
685.44 92.7899 M9
690.84 92.7899 M9
690.84 72 M9
696.24 72 M9
696.24 87.1674 M9
701.64 87.1674 M9
701.64 72 M9
703.8 72 M9
703.8 93.8962 M9
709.2 93.8962 M9
709.2 72 M9
711.36 72 M9
711.36 93.4595 M9
716.76 93.4595 M9
716.76 72 M9
718.92 72 M9
718.92 93.3157 M9
724.32 93.3157 M9
724.32 72 M9
729.72 72 M9
729.72 90.425 M9
735.12 90.425 M9
735.12 72 M9
737.28 72 M9
737.28 97.3035 M9
742.68 97.3035 M9
742.68 72 M9
744.84 72 M9
744.84 94.3873 M9
750.24 94.3873 M9
750.24 72 M9
752.4 72 M9
752.4 96.1231 M9
757.8 96.1231 M9
757.8 72 M9
768.6 72 M9
768.6 78.1228 M9
774 78.1228 M9
774 72 M9
776.16 72 M9
776.16 78.853 M9
781.56 78.853 M9
781.56 72 M9
783.72 72 M9
783.72 77.9129 M9
789.12 77.9129 M9
789.12 72 M9
791.28 72 M9
791.28 78.9097 M9
796.68 78.9097 M9
796.68 72 M9
802.08 72 M9
802.08 78.25 M9
807.48 78.25 M9
807.48 72 M9
809.64 72 M9
809.64 79.2707 M9
815.04 79.2707 M9
815.04 72 M9
817.2 72 M9
817.2 78.3023 M9
822.6 78.3023 M9
822.6 72 M9
824.76 72 M9
824.76 79.3086 M9
830.16 79.3086 M9
830.16 72 M9
835.56 72 M9
835.56 78.2209 M9
840.96 78.2209 M9
840.96 72 M9
843.12 72 M9
843.12 79.2983 M9
848.52 79.2983 M9
848.52 72 M9
850.68 72 M9
850.68 78.7381 M9
856.08 78.7381 M9
856.08 72 M9
858.24 72 M9
858.24 79.7039 M9
863.64 79.7039 M9
863.64 72 M9
869.04 72 M9
869.04 78.351 M9
874.44 78.351 M9
874.44 72 M9
876.6 72 M9
876.6 80.297 M9
882 80.297 M9
882 72 M9
884.16 72 M9
884.16 78.4255 M9
889.56 78.4255 M9
889.56 72 M9
891.72 72 M9
891.72 80.4372 M9
897.12 80.4372 M9
897.12 72 M9
902.52 72 M9
902.52 79.4027 M9
907.92 79.4027 M9
907.92 72 M9
910.08 72 M9
910.08 81.1271 M9
915.48 81.1271 M9
915.48 72 M9
917.64 72 M9
917.64 79.6279 M9
923.04 79.6279 M9
923.04 72 M9
925.2 72 M9
925.2 81.123 M9
930.6 81.123 M9
930.6 72 M9
gsave
D9
grestore
gsave 30.000000 45.000000 {cross} SS9 1.000000 G9
930.6 72 M9
72 72 M9
E9
grestore
209.97 177.784 S9
209.97 186.784 M9
218.07 213.784 M9
218.07 204.784 M9
209.97 177.784 M9
gsave 30.000000 90.000000 {cross} SS9 1.000000 G9
E9
grestore
217.53 180.405 S9
217.53 189.405 M9
225.63 216.405 M9
225.63 207.405 M9
217.53 180.405 M9
gsave 30.000000 135.000000 {cross} SS9 1.000000 G9
E9
grestore
382.77 177.383 S9
382.77 186.383 M9
390.87 213.383 M9
390.87 204.383 M9
382.77 177.383 M9
gsave 30.000000 180.000000 {cross} SS9 1.000000 G9
E9
grestore
390.33 216.751 S9
390.33 225.751 M9
398.43 252.751 M9
398.43 243.751 M9
390.33 216.751 M9
gsave 45.000000 45.000000 {pop} SS9 1.000000 G9
E9
grestore
12 /Helvetica SetTxt
(|) 0 72 72 TXC
4 /Helvetica SetTxt
(|) -90 72 72 TXC
9 /Helvetica-Bold SetTxt
(0) 0 68 69.3 TXR
4 /Helvetica SetTxt
(|) -90 72 132 TXC
9 /Helvetica-Bold SetTxt
(1) 0 68 129.3 TXR
4 /Helvetica SetTxt
(|) -90 72 192 TXC
9 /Helvetica-Bold SetTxt
(2) 0 68 189.3 TXR
4 /Helvetica SetTxt
(|) -90 72 252 TXC
9 /Helvetica-Bold SetTxt
(3) 0 68 249.3 TXR
12 /Helvetica SetTxt
(|) 180 72 252 TXC
4 /Helvetica SetTxt
(|) 90 936 72 TXC
(|) 90 936 132 TXC
(|) 90 936 192 TXC
(|) 90 936 252 TXC
9 /Helvetica SetTxt
() 0 504 32.4 TXC
[] 0.800000 SL
2 setlinecap
72 72 936 72 
L9
0 setlinecap
72 72 72 252 
L9
72 252 936 252 
L9
936 72 936 252 
L9
() 0 936 49.5 TXR
( Memory cycles per instruction ) 90 47.6 252 TXR
8 /Helvetica SetTxt
(1) 0 87.66 63 TXC
(2) 0 121.14 63 TXC
(4) 0 154.62 63 TXC
(8) 0 188.1 63 TXC
10 /Helvetica SetTxt
(5.49) 90 216.72 253.8 TXL
8 /Helvetica SetTxt
(16) 0 221.58 63 TXC
10 /Helvetica SetTxt
(6.00) 90 224.28 253.8 TXL
9 /Helvetica-Bold SetTxt
(tomcatv) 0 158.4 48.6 TXC
8 /Helvetica SetTxt
(1) 0 260.46 63 TXC
(2) 0 293.94 63 TXC
(4) 0 327.42 63 TXC
(8) 0 360.9 63 TXC
10 /Helvetica SetTxt
(3.90) 90 389.52 253.8 TXL
8 /Helvetica SetTxt
(16) 0 394.38 63 TXC
10 /Helvetica SetTxt
(4.60) 90 397.08 253.8 TXL
9 /Helvetica-Bold SetTxt
(swim) 0 331.2 48.6 TXC
8 /Helvetica SetTxt
(1) 0 433.26 63 TXC
(2) 0 466.74 63 TXC
(4) 0 500.22 63 TXC
(8) 0 533.7 63 TXC
(16) 0 567.18 63 TXC
9 /Helvetica-Bold SetTxt
(su2cor) 0 504 48.6 TXC
8 /Helvetica SetTxt
(1) 0 606.06 63 TXC
(2) 0 639.54 63 TXC
(4) 0 673.02 63 TXC
(8) 0 706.5 63 TXC
(16) 0 739.98 63 TXC
9 /Helvetica-Bold SetTxt
(hydro2d) 0 676.8 48.6 TXC
8 /Helvetica SetTxt
(1) 0 778.86 63 TXC
(2) 0 812.34 63 TXC
(4) 0 845.82 63 TXC
(8) 0 879.3 63 TXC
(16) 0 912.78 63 TXC
9 /Helvetica-Bold SetTxt
(applu) 0 849.6 48.6 TXC
10 /Helvetica-Bold SetTxt
(Memory System Behavior) 0 504 234 TXC
8 /Helvetica SetTxt
() 0 87.66 54.6 TXC
() 0 121.14 54.6 TXC
() 0 154.62 54.6 TXC
() 0 188.1 54.6 TXC
10 /Helvetica SetTxt
() 90 216.72 243.3 TXL
8 /Helvetica SetTxt
() 0 221.58 54.6 TXC
10 /Helvetica SetTxt
() 90 224.28 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 158.4 39.15 TXC
8 /Helvetica SetTxt
() 0 260.46 54.6 TXC
() 0 293.94 54.6 TXC
() 0 327.42 54.6 TXC
() 0 360.9 54.6 TXC
10 /Helvetica SetTxt
() 90 389.52 243.3 TXL
8 /Helvetica SetTxt
() 0 394.38 54.6 TXC
10 /Helvetica SetTxt
() 90 397.08 243.3 TXL
9 /Helvetica-Bold SetTxt
() 0 331.2 39.15 TXC
8 /Helvetica SetTxt
() 0 433.26 54.6 TXC
() 0 466.74 54.6 TXC
() 0 500.22 54.6 TXC
() 0 533.7 54.6 TXC
() 0 567.18 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 504 39.15 TXC
8 /Helvetica SetTxt
() 0 606.06 54.6 TXC
() 0 639.54 54.6 TXC
() 0 673.02 54.6 TXC
() 0 706.5 54.6 TXC
() 0 739.98 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 676.8 39.15 TXC
8 /Helvetica SetTxt
() 0 778.86 54.6 TXC
() 0 812.34 54.6 TXC
() 0 845.82 54.6 TXC
() 0 879.3 54.6 TXC
() 0 912.78 54.6 TXC
9 /Helvetica-Bold SetTxt
() 0 849.6 39.15 TXC
10 /Helvetica-Bold SetTxt
() 0 504 223.5 TXC
5 SetSym
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
54.56 445.14 555 517.14 R
7 X
0 0 0 1 0 0 0 K
V
54.56 503.64 555 517.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.56 503.64 555 517.14 R
7 X
0 0 0 1 0 0 0 K
V
54.56 512.64 522.56 512.64 2 L
V
1 H
2 Z
0 X
N
54 450.61 558 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 8.  Impact of Pr) 54.56 497.64 T
(efetching and Compiler) 151.88 497.64 T
(-dir) 242.04 497.64 T
(ected Page Coloring) 256.38 497.64 T
1 F
0.25 (For \336ve workloads and dif) 54.56 486.64 P
0.25 (ferent numbers of processors, these graphs compare from the left bar to the right bar: \0501\051 page coloring without) 150.87 486.64 P
0.46 (prefetching, \0502\051 page coloring with prefetching, \0503\051 CDPC without prefetching and \0504\051 CDPC with prefetching. The results are presented) 54.56 475.64 P
54.56 450.61 555 461.64 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.56 448.14 555 461.64 R
7 X
0 0 0 1 0 0 0 K
V
54.56 457.14 522.56 457.14 2 L
V
1 H
2 Z
0 X
N
54 450.61 558 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(only for the applications where the memory system is a primary performance bottleneck.) 54.56 464.64 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
0.01 (times faster with CDPC than with bin hopping and 2.6 times faster) 317.88 444.58 P
2.43 (than with page coloring. For the same number of processors,) 317.88 434.58 P
2 F
0.31 (tomcatv) 317.88 424.58 P
1 F
0.31 (, is 1.3 times faster with CDPC than with bin hopping and) 345.79 424.58 P
0.47 (2.2 times faster than with page coloring! Finally) 317.88 414.58 P
0.47 (,) 494.09 414.58 P
2 F
0.47 (applu) 499.06 414.58 P
1 F
0.47 ( speeds up) 519.56 414.58 P
(by 1.2 times over bin hopping and by 1.06 over page coloring.) 317.88 404.58 T
-0.03 (For) 317.88 389.58 P
2 F
-0.03 (turb3d) 332.6 389.58 P
1 F
-0.03 (,) 356.61 389.58 P
2 F
-0.03 (hydr) 361.08 389.58 P
-0.03 (o2d) 377.24 389.58 P
1 F
-0.03 ( and) 390.74 389.58 P
2 F
-0.03 (mgrid) 408.18 389.58 P
1 F
-0.03 (, CDPC leads to noticeable, yet less) 429.68 389.58 P
1.18 (signi\336cant, performance gains over either or both page mapping) 317.88 379.58 P
0.95 (policies. Finally) 317.88 369.58 P
0.95 (, for) 376.25 369.58 P
2 F
0.95 (su2cor) 395.38 369.58 P
0.95 (, wave5, apsi) 418.88 369.58 P
1 F
0.95 ( and) 467.77 369.58 P
2 F
0.95 ( fpppp) 483.97 369.58 P
1 F
0.95 (, we see little) 507.67 369.58 P
1.77 (variance in the performance between any of the page mapping) 317.88 359.58 P
1.61 (policies. As shown in Figure) 317.88 349.58 P
1.61 (9 and T) 429.83 349.58 P
1.61 (able) 459.92 349.58 P
1.61 (2, CDPC performs at) 477.17 349.58 P
(least as well as the best of the two static policies in most cases.) 317.88 339.58 T
2.97 (T) 317.88 324.58 P
2.97 (able) 322.75 324.58 P
2.97 (2 presents the AlphaServer results and their SPEC95fp) 339.99 324.58 P
3.29 (ratio) 317.88 314.58 P
1 7.2 Q
2.63 (2) 334.38 318.18 P
1 9 Q
3.29 (. Overall, compiler) 337.98 314.58 P
3.29 (-directed page coloring improves the) 412.36 314.58 P
0.43 (SPEC95fp rating for eight processors by 8% over Digital UNIX\325) 317.88 304.58 P
0.43 (s) 554.5 304.58 P
1.98 (bin hopping policy and by 20% over page coloring. W) 317.88 294.58 P
1.98 (ith this) 531.27 294.58 P
0.62 (technique, the geometric mean of the performance improves over) 317.88 284.58 P
0.32 (the uniprocessor execution by 2.9 with four processors and by 4.2) 317.88 274.58 P
(with eight processors.) 317.88 264.58 T
0 12 Q
(8  Conclusions) 317.88 243.58 T
1 9 Q
2.46 (This paper describes a new technique,) 317.88 224.58 P
2 F
2.46 (compiler) 471.83 224.58 P
2.46 (-dir) 503.64 224.58 P
2.46 (ected page) 516.81 224.58 P
3.01 (coloring) 317.88 214.58 P
1 F
3.01 (, that reduces con\337ict misses in compiler) 348.38 214.58 P
3.01 (-parallelized) 513.02 214.58 P
4.76 (applications. Compiler) 317.88 204.58 P
4.76 (-directed page coloring relies on the) 404.46 204.58 P
0.36 (interaction of the parallelizing compiler and the operating system.) 317.88 194.58 P
2.41 (The technique is transparent to the application as it does not) 317.88 184.58 P
(require any transformations of the virtual address space.) 317.88 174.58 T
1.29 (This technique is fully automatic and simple to implement. The) 317.88 159.58 P
0.16 (information generated by the compiler is directly derived from the) 317.88 149.58 P
0.02 (analyses required for parallelization and locality optimization. The) 317.88 139.58 P
1.33 (operating system extension is simple to integrate in commercial) 317.88 129.58 P
(operating systems.) 317.88 119.58 T
317.88 90 558 110 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
317.88 98 449.88 98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 7 Q
0 X
0 0 0 1 0 0 0 K
(2. Since fpppp has no loop-level parallelism, we use the native compiler directly for) 317.88 85.33 T
(this workload.) 317.88 77.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 301.34 561.33 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 53 45 173 211 120 166 55 570.33 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/tomcatv.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 211
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 84.3923 S9
[] 0.100000 SL
97.2 100.907 M9
109.8 128.979 M9
122.4 153.041 M9
135 168.289 M9
147.6 181.229 M9
160.2 193.206 M9
172.8 204.225 M9
D9
84.6 83.886 S9
97.2 97.5406 M9
109.8 114.126 M9
122.4 126.831 M9
135 140.573 M9
147.6 158.359 M9
160.2 166.965 M9
172.8 177.477 M9
D9
84.6 81.3141 S9
97.2 92.3797 M9
109.8 105.215 M9
122.4 114.126 M9
135 125.556 M9
147.6 136.118 M9
160.2 143.224 M9
172.8 150.286 M9
D9
84.6 84.0309 S9
97.2 94.1789 M9
109.8 103.297 M9
122.4 111.366 M9
135 118.212 M9
147.6 124.339 M9
160.2 128.979 M9
172.8 133.411 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 171.139 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 109.344 TXC
(50) 0 70 107.544 TXR
(|) -90 72 146.689 TXC
(100) 0 70 144.889 TXR
(|) -90 72 184.033 TXC
(150) 0 70 182.233 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 206.44 
L9
( tomcatv) 0 172.8 59.5 TXR
( Ratio ) 90 59.2 206.44 TXR
3 SetSym
<0a> 84.6 84.3923 SY
<0a> 97.2 100.907 SY
<0a> 109.8 128.979 SY
<0a> 122.4 153.041 SY
<0a> 135 168.289 SY
<0a> 147.6 181.229 SY
<0a> 160.2 193.206 SY
<0a> 172.8 204.225 SY
<06> 84.6 83.886 SY
<06> 97.2 97.5406 SY
<06> 109.8 114.126 SY
<06> 122.4 126.831 SY
<06> 135 140.573 SY
<06> 147.6 158.359 SY
<06> 160.2 166.965 SY
<06> 172.8 177.477 SY
<0e> 84.6 81.3141 SY
<0e> 97.2 92.3797 SY
<0e> 109.8 105.215 SY
<0e> 122.4 114.126 SY
<0e> 135 125.556 SY
<0e> 147.6 136.118 SY
<0e> 160.2 143.224 SY
<0e> 172.8 150.286 SY
<02> 84.6 84.0309 SY
<02> 97.2 94.1789 SY
<02> 109.8 103.297 SY
<02> 122.4 111.366 SY
<02> 135 118.212 SY
<02> 147.6 124.339 SY
<02> 160.2 128.979 SY
<02> 172.8 133.411 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 269 120 224 55.48 366.29 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/swim.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 269
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 83.7011 S9
[] 0.100000 SL
97.2 99.8207 M9
109.8 138.577 M9
122.4 167.451 M9
135 191.562 M9
147.6 210.768 M9
160.2 239.735 M9
172.8 260.816 M9
D9
84.6 83.6655 S9
97.2 97.614 M9
109.8 115.794 M9
122.4 132.408 M9
135 152.732 M9
147.6 170.724 M9
160.2 184.186 M9
172.8 210.768 M9
D9
84.6 81.2487 S9
97.2 92.2066 M9
109.8 103.671 M9
122.4 116.643 M9
135 131.781 M9
147.6 145.674 M9
160.2 159.477 M9
172.8 167.716 M9
D9
84.6 84.3361 S9
97.2 95.6181 M9
109.8 106.144 M9
122.4 116.47 M9
135 124.673 M9
147.6 133.156 M9
160.2 139.619 M9
172.8 145.99 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 170.689 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 92.0891 TXC
(50) 0 70 90.2891 TXR
(|) -90 72 112.178 TXC
(100) 0 70 110.378 TXR
(|) -90 72 132.267 TXC
(150) 0 70 130.467 TXR
(|) -90 72 152.357 TXC
(200) 0 70 150.557 TXR
(|) -90 72 172.446 TXC
(250) 0 70 170.646 TXR
(|) -90 72 192.535 TXC
(300) 0 70 190.735 TXR
(|) -90 72 212.624 TXC
(350) 0 70 210.824 TXR
(|) -90 72 232.713 TXC
(400) 0 70 230.913 TXR
(|) -90 72 252.802 TXC
(450) 0 70 251.002 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 264.856 
L9
( swim) 0 172.8 59.5 TXR
( Ratio ) 90 59.2 264.856 TXR
3 SetSym
<0a> 84.6 83.7011 SY
<0a> 97.2 99.8207 SY
<0a> 109.8 138.577 SY
<0a> 122.4 167.451 SY
<0a> 135 191.562 SY
<0a> 147.6 210.768 SY
<0a> 160.2 239.735 SY
<0a> 172.8 260.816 SY
<06> 84.6 83.6655 SY
<06> 97.2 97.614 SY
<06> 109.8 115.794 SY
<06> 122.4 132.408 SY
<06> 135 152.732 SY
<06> 147.6 170.724 SY
<06> 160.2 184.186 SY
<06> 172.8 210.768 SY
<0e> 84.6 81.2487 SY
<0e> 97.2 92.2066 SY
<0e> 109.8 103.671 SY
<0e> 122.4 116.643 SY
<0e> 135 131.781 SY
<0e> 147.6 145.674 SY
<0e> 160.2 159.477 SY
<0e> 172.8 167.716 SY
<02> 84.6 84.3361 SY
<02> 97.2 95.6181 SY
<02> 109.8 106.144 SY
<02> 122.4 116.47 SY
<02> 135 124.673 SY
<02> 147.6 133.156 SY
<02> 160.2 139.619 SY
<02> 172.8 145.99 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 319 607.33 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/applu.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 84.2222 S9
[] 0.100000 SL
97.2 94.8637 M9
109.8 105.875 M9
122.4 114.173 M9
135 128.571 M9
147.6 141.231 M9
160.2 160 M9
172.8 160.989 M9
D9
84.6 84.2185 S9
97.2 95.1714 M9
109.8 105.846 M9
122.4 113.86 M9
135 125.586 M9
147.6 135.057 M9
160.2 147.717 M9
172.8 147.717 M9
D9
84.6 84.3711 S9
97.2 95.4458 M9
109.8 106.021 M9
122.4 114.217 M9
135 126.172 M9
147.6 135.057 M9
160.2 147.862 M9
172.8 148.448 M9
D9
84.6 84.099 S9
97.2 95.0099 M9
109.8 105.531 M9
122.4 113.949 M9
135 128.17 M9
147.6 140.158 M9
160.2 156.255 M9
172.8 156.255 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 170.969 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 90 TXC
(10) 0 70 88.2 TXR
(|) -90 72 108 TXC
(20) 0 70 106.2 TXR
(|) -90 72 126 TXC
(30) 0 70 124.2 TXR
(|) -90 72 144 TXC
(40) 0 70 142.2 TXR
(|) -90 72 162 TXC
(50) 0 70 160.2 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( applu) 0 172.8 59.5 TXR
() 90 59.2 172.8 TXR
3 SetSym
<0a> 84.6 84.2222 SY
<0a> 97.2 94.8637 SY
<0a> 109.8 105.875 SY
<0a> 122.4 114.173 SY
<0a> 135 128.571 SY
<0a> 147.6 141.231 SY
<0a> 160.2 160 SY
<0a> 172.8 160.989 SY
<06> 84.6 84.2185 SY
<06> 97.2 95.1714 SY
<06> 109.8 105.846 SY
<06> 122.4 113.86 SY
<06> 135 125.586 SY
<06> 147.6 135.057 SY
<06> 160.2 147.717 SY
<06> 172.8 147.717 SY
<0e> 84.6 84.3711 SY
<0e> 97.2 95.4458 SY
<0e> 109.8 106.021 SY
<0e> 122.4 114.217 SY
<0e> 135 126.172 SY
<0e> 147.6 135.057 SY
<0e> 160.2 147.862 SY
<0e> 172.8 148.448 SY
<02> 84.6 84.099 SY
<02> 97.2 95.0099 SY
<02> 109.8 105.531 SY
<02> 122.4 113.949 SY
<02> 135 128.17 SY
<02> 147.6 140.158 SY
<02> 160.2 156.255 SY
<02> 172.8 156.255 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 197 608.33 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/su2cor.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 83.9731 S9
[] 0.100000 SL
97.2 94.2474 M9
109.8 102.818 M9
122.4 110.735 M9
135 116.144 M9
147.6 120.635 M9
160.2 123.579 M9
172.8 127.211 M9
D9
84.6 83.9367 S9
97.2 94.3235 M9
109.8 102.673 M9
122.4 110.507 M9
135 115.653 M9
147.6 120.515 M9
160.2 123.175 M9
172.8 126.749 M9
D9
84.6 83.9294 S9
97.2 93.8994 M9
109.8 102.673 M9
122.4 109.692 M9
135 115.363 M9
147.6 120.039 M9
160.2 122.256 M9
172.8 124.973 M9
D9
84.6 83.7436 S9
97.2 93.8506 M9
109.8 102.015 M9
122.4 109.476 M9
135 114.333 M9
147.6 118.336 M9
160.2 121.495 M9
172.8 124.973 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 167.785 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 86 TXC
(10) 0 70 84.2 TXR
(|) -90 72 100 TXC
(20) 0 70 98.2 TXR
(|) -90 72 114 TXC
(30) 0 70 112.2 TXR
(|) -90 72 128 TXC
(40) 0 70 126.2 TXR
(|) -90 72 142 TXC
(50) 0 70 140.2 TXR
(|) -90 72 156 TXC
(60) 0 70 154.2 TXR
(|) -90 72 170 TXC
(70) 0 70 168.2 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( su2cor) 0 172.8 59.5 TXR
( Ratio ) 90 59.2 172.8 TXR
3 SetSym
<0a> 84.6 83.9731 SY
<0a> 97.2 94.2474 SY
<0a> 109.8 102.818 SY
<0a> 122.4 110.735 SY
<0a> 135 116.144 SY
<0a> 147.6 120.635 SY
<0a> 160.2 123.579 SY
<0a> 172.8 127.211 SY
<06> 84.6 83.9367 SY
<06> 97.2 94.3235 SY
<06> 109.8 102.673 SY
<06> 122.4 110.507 SY
<06> 135 115.653 SY
<06> 147.6 120.515 SY
<06> 160.2 123.175 SY
<06> 172.8 126.749 SY
<0e> 84.6 83.9294 SY
<0e> 97.2 93.8994 SY
<0e> 109.8 102.673 SY
<0e> 122.4 109.692 SY
<0e> 135 115.363 SY
<0e> 147.6 120.039 SY
<0e> 160.2 122.256 SY
<0e> 172.8 124.973 SY
<02> 84.6 83.7436 SY
<02> 97.2 93.8506 SY
<02> 109.8 102.015 SY
<02> 122.4 109.476 SY
<02> 135 114.333 SY
<02> 147.6 118.336 SY
<02> 160.2 121.495 SY
<02> 172.8 124.973 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 440.67 607.33 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/fpppp.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 83.4144 S9
[] 0.100000 SL
97.2 83.4144 M9
109.8 83.4144 M9
122.4 83.4144 M9
135 83.4144 M9
147.6 83.4144 M9
160.2 83.4144 M9
172.8 83.4144 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 163.315 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 81.6 TXC
(20) 0 70 79.8 TXR
(|) -90 72 91.2 TXC
(40) 0 70 89.4 TXR
(|) -90 72 100.8 TXC
(60) 0 70 99 TXR
(|) -90 72 110.4 TXC
(80) 0 70 108.6 TXR
(|) -90 72 120 TXC
(100) 0 70 118.2 TXR
(|) -90 72 129.6 TXC
(120) 0 70 127.8 TXR
(|) -90 72 139.2 TXC
(140) 0 70 137.4 TXR
(|) -90 72 148.8 TXC
(160) 0 70 147 TXR
(|) -90 72 158.4 TXC
(180) 0 70 156.6 TXR
(|) -90 72 168 TXC
(200) 0 70 166.2 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( fpppp) 0 172.8 59.5 TXR
() 90 59.2 172.8 TXR
3 SetSym
<06> 84.6 83.4144 SY
<06> 97.2 83.4144 SY
<06> 109.8 83.4144 SY
<06> 122.4 83.4144 SY
<06> 135 83.4144 SY
<06> 147.6 83.4144 SY
<06> 160.2 83.4144 SY
<06> 172.8 83.4144 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 196.57 489.14 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/hydro2d.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 83.4872 S9
[] 0.100000 SL
97.2 98.0389 M9
109.8 109.758 M9
122.4 117.459 M9
135 124.033 M9
147.6 131.142 M9
160.2 137.354 M9
172.8 140.659 M9
D9
84.6 83.717 S9
97.2 95.3333 M9
109.8 105.112 M9
122.4 114.667 M9
135 123.672 M9
147.6 130.562 M9
160.2 135.818 M9
172.8 142.275 M9
D9
84.6 83.7447 S9
97.2 95.9508 M9
109.8 105.222 M9
122.4 115.036 M9
135 123.406 M9
147.6 130.106 M9
160.2 137.069 M9
172.8 141.619 M9
D9
84.6 83.6303 S9
97.2 93.9769 M9
109.8 103.274 M9
122.4 111.664 M9
135 119.407 M9
147.6 126.008 M9
160.2 132.215 M9
172.8 138.37 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 165.957 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 84.4444 TXC
(10) 0 70 82.6444 TXR
(|) -90 72 96.8889 TXC
(20) 0 70 95.0889 TXR
(|) -90 72 109.333 TXC
(30) 0 70 107.533 TXR
(|) -90 72 121.778 TXC
(40) 0 70 119.978 TXR
(|) -90 72 134.222 TXC
(50) 0 70 132.422 TXR
(|) -90 72 146.667 TXC
(60) 0 70 144.867 TXR
(|) -90 72 159.111 TXC
(70) 0 70 157.311 TXR
(|) -90 72 171.556 TXC
(80) 0 70 169.756 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( hydro2d) 0 172.8 59.5 TXR
( Ratio ) 90 59.2 172.8 TXR
3 SetSym
<0a> 84.6 83.4872 SY
<0a> 97.2 98.0389 SY
<0a> 109.8 109.758 SY
<0a> 122.4 117.459 SY
<0a> 135 124.033 SY
<0a> 147.6 131.142 SY
<0a> 160.2 137.354 SY
<0a> 172.8 140.659 SY
<06> 84.6 83.717 SY
<06> 97.2 95.3333 SY
<06> 109.8 105.112 SY
<06> 122.4 114.667 SY
<06> 135 123.672 SY
<06> 147.6 130.562 SY
<06> 160.2 135.818 SY
<06> 172.8 142.275 SY
<0e> 84.6 83.7447 SY
<0e> 97.2 95.9508 SY
<0e> 109.8 105.222 SY
<0e> 122.4 115.036 SY
<0e> 135 123.406 SY
<0e> 147.6 130.106 SY
<0e> 160.2 137.069 SY
<0e> 172.8 141.619 SY
<02> 84.6 83.6303 SY
<02> 97.2 93.9769 SY
<02> 109.8 103.274 SY
<02> 122.4 111.664 SY
<02> 135 119.407 SY
<02> 147.6 126.008 SY
<02> 160.2 132.215 SY
<02> 172.8 138.37 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 318.62 487.86 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/turb3d.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 83.2073 S9
[] 0.100000 SL
97.2 94.0487 M9
109.8 103.567 M9
122.4 113.049 M9
135 121.341 M9
147.6 129.688 M9
160.2 133.72 M9
172.8 142.719 M9
D9
84.6 83.1384 S9
97.2 93.4713 M9
109.8 102.532 M9
122.4 112.423 M9
135 119.967 M9
147.6 126.754 M9
160.2 131.585 M9
172.8 139.529 M9
D9
84.6 82.4459 S9
97.2 92.4878 M9
109.8 101.236 M9
122.4 110.182 M9
135 117.737 M9
147.6 124.741 M9
160.2 129.114 M9
172.8 137.475 M9
D9
84.6 83.2733 S9
97.2 93.7287 M9
109.8 102.29 M9
122.4 112.187 M9
135 119.635 M9
147.6 126.066 M9
160.2 131.585 M9
172.8 140.198 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 162.187 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 80.4 TXC
(10) 0 70 78.6 TXR
(|) -90 72 88.8 TXC
(20) 0 70 87 TXR
(|) -90 72 97.2 TXC
(30) 0 70 95.4 TXR
(|) -90 72 105.6 TXC
(40) 0 70 103.8 TXR
(|) -90 72 114 TXC
(50) 0 70 112.2 TXR
(|) -90 72 122.4 TXC
(60) 0 70 120.6 TXR
(|) -90 72 130.8 TXC
(70) 0 70 129 TXR
(|) -90 72 139.2 TXC
(80) 0 70 137.4 TXR
(|) -90 72 147.6 TXC
(90) 0 70 145.8 TXR
(|) -90 72 156 TXC
(100) 0 70 154.2 TXR
(|) -90 72 164.4 TXC
(110) 0 70 162.6 TXR
(|) -90 72 172.8 TXC
(120) 0 70 171 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( turb3d) 0 172.8 59.5 TXR
() 90 59.2 172.8 TXR
3 SetSym
<0a> 84.6 83.2073 SY
<0a> 97.2 94.0487 SY
<0a> 109.8 103.567 SY
<0a> 122.4 113.049 SY
<0a> 135 121.341 SY
<0a> 147.6 129.688 SY
<0a> 160.2 133.72 SY
<0a> 172.8 142.719 SY
<06> 84.6 83.1384 SY
<06> 97.2 93.4713 SY
<06> 109.8 102.532 SY
<06> 122.4 112.423 SY
<06> 135 119.967 SY
<06> 147.6 126.754 SY
<06> 160.2 131.585 SY
<06> 172.8 139.529 SY
<0e> 84.6 82.4459 SY
<0e> 97.2 92.4878 SY
<0e> 109.8 101.236 SY
<0e> 122.4 110.182 SY
<0e> 135 117.737 SY
<0e> 147.6 124.741 SY
<0e> 160.2 129.114 SY
<0e> 172.8 137.475 SY
<02> 84.6 83.2733 SY
<02> 97.2 93.7287 SY
<02> 109.8 102.29 SY
<02> 122.4 112.187 SY
<02> 135 119.635 SY
<02> 147.6 126.066 SY
<02> 160.2 131.585 SY
<02> 172.8 140.198 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 439.62 488.1 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/wave5.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 83.2903 S9
[] 0.100000 SL
97.2 83.2233 M9
109.8 83.6451 M9
122.4 84.3853 M9
135 83.9168 M9
147.6 83.9545 M9
160.2 83.783 M9
172.8 84.1232 M9
D9
84.6 83.1242 S9
97.2 83.1834 M9
109.8 83.6022 M9
122.4 84.3449 M9
135 83.962 M9
147.6 83.8199 M9
160.2 83.5385 M9
172.8 84.0076 M9
D9
84.6 82.8871 S9
97.2 83.0915 M9
109.8 83.5738 M9
122.4 84.2807 M9
135 83.8644 M9
147.6 83.7684 M9
160.2 83.7028 M9
172.8 83.9545 M9
D9
84.6 83.3038 S9
97.2 83.2701 M9
109.8 83.7464 M9
122.4 84.467 M9
135 84.0382 M9
147.6 83.9545 M9
160.2 83.8273 M9
172.8 84.0999 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 162.431 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 78.3 TXC
(10) 0 70 76.5 TXR
(|) -90 72 84.6 TXC
(20) 0 70 82.8 TXR
(|) -90 72 90.9 TXC
(30) 0 70 89.1 TXR
(|) -90 72 97.2 TXC
(40) 0 70 95.4 TXR
(|) -90 72 103.5 TXC
(50) 0 70 101.7 TXR
(|) -90 72 109.8 TXC
(60) 0 70 108 TXR
(|) -90 72 116.1 TXC
(70) 0 70 114.3 TXR
(|) -90 72 122.4 TXC
(80) 0 70 120.6 TXR
(|) -90 72 128.7 TXC
(90) 0 70 126.9 TXR
(|) -90 72 135 TXC
(100) 0 70 133.2 TXR
(|) -90 72 141.3 TXC
(110) 0 70 139.5 TXR
(|) -90 72 147.6 TXC
(120) 0 70 145.8 TXR
(|) -90 72 153.9 TXC
(130) 0 70 152.1 TXR
(|) -90 72 160.2 TXC
(140) 0 70 158.4 TXR
(|) -90 72 166.5 TXC
(150) 0 70 164.7 TXR
(|) -90 72 172.8 TXC
(160) 0 70 171 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( wave5) 0 172.8 59.5 TXR
() 90 59.2 172.8 TXR
3 SetSym
<0a> 84.6 83.2903 SY
<0a> 97.2 83.2233 SY
<0a> 109.8 83.6451 SY
<0a> 122.4 84.3853 SY
<0a> 135 83.9168 SY
<0a> 147.6 83.9545 SY
<0a> 160.2 83.783 SY
<0a> 172.8 84.1232 SY
<06> 84.6 83.1242 SY
<06> 97.2 83.1834 SY
<06> 109.8 83.6022 SY
<06> 122.4 84.3449 SY
<06> 135 83.962 SY
<06> 147.6 83.8199 SY
<06> 160.2 83.5385 SY
<06> 172.8 84.0076 SY
<0e> 84.6 82.8871 SY
<0e> 97.2 83.0915 SY
<0e> 109.8 83.5738 SY
<0e> 122.4 84.2807 SY
<0e> 135 83.8644 SY
<0e> 147.6 83.7684 SY
<0e> 160.2 83.7028 SY
<0e> 172.8 83.9545 SY
<02> 84.6 83.3038 SY
<02> 97.2 83.2701 SY
<02> 109.8 83.7464 SY
<02> 122.4 84.467 SY
<02> 135 84.0382 SY
<02> 147.6 83.9545 SY
<02> 160.2 83.8273 SY
<02> 172.8 84.0999 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 195.81 369.38 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/mgrid.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 84.5249 S9
[] 0.100000 SL
97.2 101.964 M9
109.8 115.523 M9
122.4 126.31 M9
135 134.376 M9
147.6 143.186 M9
160.2 147.676 M9
172.8 158.897 M9
D9
84.6 84.2807 S9
97.2 98.8657 M9
109.8 110.889 M9
122.4 122.909 M9
135 131.857 M9
147.6 138.667 M9
160.2 146.336 M9
172.8 152.769 M9
D9
84.6 84.239 S9
97.2 98.6949 M9
109.8 112.064 M9
122.4 123.22 M9
135 132.432 M9
147.6 139.56 M9
160.2 144.414 M9
172.8 153.818 M9
D9
84.6 84.5249 S9
97.2 100.251 M9
109.8 115.523 M9
122.4 127.752 M9
135 135.636 M9
147.6 143.388 M9
160.2 150.261 M9
172.8 158.598 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 172.199 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 82.08 TXC
(10) 0 70 80.28 TXR
(|) -90 72 92.16 TXC
(20) 0 70 90.36 TXR
(|) -90 72 102.24 TXC
(30) 0 70 100.44 TXR
(|) -90 72 112.32 TXC
(40) 0 70 110.52 TXR
(|) -90 72 122.4 TXC
(50) 0 70 120.6 TXR
(|) -90 72 132.48 TXC
(60) 0 70 130.68 TXR
(|) -90 72 142.56 TXC
(70) 0 70 140.76 TXR
(|) -90 72 152.64 TXC
(80) 0 70 150.84 TXR
(|) -90 72 162.72 TXC
(90) 0 70 160.92 TXR
(|) -90 72 172.8 TXC
(100) 0 70 171 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( mgrid) 0 172.8 59.5 TXR
( Ratio ) 90 59.2 172.8 TXR
3 SetSym
<0a> 84.6 84.5249 SY
<0a> 97.2 101.964 SY
<0a> 109.8 115.523 SY
<0a> 122.4 126.31 SY
<0a> 135 134.376 SY
<0a> 147.6 143.186 SY
<0a> 160.2 147.676 SY
<0a> 172.8 158.897 SY
<06> 84.6 84.2807 SY
<06> 97.2 98.8657 SY
<06> 109.8 110.889 SY
<06> 122.4 122.909 SY
<06> 135 131.857 SY
<06> 147.6 138.667 SY
<06> 160.2 146.336 SY
<06> 172.8 152.769 SY
<0e> 84.6 84.239 SY
<0e> 97.2 98.6949 SY
<0e> 109.8 112.064 SY
<0e> 122.4 123.22 SY
<0e> 135 132.432 SY
<0e> 147.6 139.56 SY
<0e> 160.2 144.414 SY
<0e> 172.8 153.818 SY
<02> 84.6 84.5249 SY
<02> 97.2 100.251 SY
<02> 109.8 115.523 SY
<02> 122.4 127.752 SY
<02> 135 135.636 SY
<02> 147.6 143.388 SY
<02> 160.2 150.261 SY
<02> 172.8 158.598 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
0 53 45 173 177 120 132 317.95 369.38 FMBEGINEPSF
%%BeginDocument: /crissy/u2/bugnion/papers/asplos96/figures/apsi.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 53 45 173 177
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
84.6 83.3004 S9
[] 0.100000 SL
188.4 139.2 202.573 139.2 
L9
3 SetSym
<0a> 195.487 139.2 SY
8 /Helvetica SetTxt
( CDPC) 0 206.991 136.8 TXL
84.6 83.2788 S9
188.4 128.8 202.573 128.8 
L9
3 SetSym
<06> 195.487 128.8 SY
8 /Helvetica SetTxt
( bin hopping) 0 206.991 126.4 TXL
84.6 83.2788 S9
188.4 118.4 202.573 118.4 
L9
3 SetSym
<0e> 195.487 118.4 SY
8 /Helvetica SetTxt
( bin hopping (unaligned)) 0 206.991 116 TXL
84.6 83.3077 S9
188.4 108 202.573 108 
L9
3 SetSym
<02> 195.487 108 SY
8 /Helvetica SetTxt
( page coloring) 0 206.991 105.6 TXL
72 72 S9
[0.100000 0.400000] 0.100000 SL
188.4 97.6 202.573 97.6 
L9
3 SetSym
8 /Helvetica SetTxt
( linear ) 0 206.991 95.2 TXL
84.6 83.3004 S9
[] 0.100000 SL
97.2 83.0181 M9
109.8 83.1434 M9
122.4 83.1858 M9
135 83.0665 M9
147.6 83.1787 M9
160.2 83.1504 M9
172.8 83.0596 M9
D9
84.6 83.2788 S9
97.2 83.0181 M9
109.8 83.1223 M9
122.4 83.1787 M9
135 83.0665 M9
147.6 83.1575 M9
160.2 83.1223 M9
172.8 83.0526 M9
D9
84.6 83.2788 S9
97.2 83.0112 M9
109.8 83.1293 M9
122.4 83.1858 M9
135 83.0734 M9
147.6 83.1083 M9
160.2 83.1364 M9
172.8 83.0457 M9
D9
84.6 83.3077 S9
97.2 83.0181 M9
109.8 83.1504 M9
122.4 83.1787 M9
135 83.0804 M9
147.6 83.1716 M9
160.2 83.1575 M9
172.8 83.0526 M9
D9
72 72 S9
[0.100000 0.400000] 0.100000 SL
172.8 162.462 M9
D9
4 /Helvetica SetTxt
(|) 0 72 72 TXC
(0) 0 72 67.2 TXC
(|) 0 84.6 72 TXC
(1) 0 84.6 67.2 TXC
(|) 0 97.2 72 TXC
(2) 0 97.2 67.2 TXC
(|) 0 109.8 72 TXC
(3) 0 109.8 67.2 TXC
(|) 0 122.4 72 TXC
(4) 0 122.4 67.2 TXC
(|) 0 135 72 TXC
(5) 0 135 67.2 TXC
(|) 0 147.6 72 TXC
(6) 0 147.6 67.2 TXC
(|) 0 160.2 72 TXC
(7) 0 160.2 67.2 TXC
(|) 0 172.8 72 TXC
(8) 0 172.8 67.2 TXC
(|) -90 72 72 TXC
(0) 0 70 70.2 TXR
(|) -90 72 80.4 TXC
(10) 0 70 78.6 TXR
(|) -90 72 88.8 TXC
(20) 0 70 87 TXR
(|) -90 72 97.2 TXC
(30) 0 70 95.4 TXR
(|) -90 72 105.6 TXC
(40) 0 70 103.8 TXR
(|) -90 72 114 TXC
(50) 0 70 112.2 TXR
(|) -90 72 122.4 TXC
(60) 0 70 120.6 TXR
(|) -90 72 130.8 TXC
(70) 0 70 129 TXR
(|) -90 72 139.2 TXC
(80) 0 70 137.4 TXR
(|) -90 72 147.6 TXC
(90) 0 70 145.8 TXR
(|) -90 72 156 TXC
(100) 0 70 154.2 TXR
(|) -90 72 164.4 TXC
(110) 0 70 162.6 TXR
(|) -90 72 172.8 TXC
(120) 0 70 171 TXR
6 /Helvetica SetTxt
() 0 122.4 45.6 TXC
[] 0.200000 SL
2 setlinecap
72 72 172.8 72 
L9
0 setlinecap
72 72 72 172.8 
L9
( apsi) 0 172.8 59.5 TXR
() 90 59.2 172.8 TXR
3 SetSym
<0a> 84.6 83.3004 SY
<0a> 97.2 83.0181 SY
<0a> 109.8 83.1434 SY
<0a> 122.4 83.1858 SY
<0a> 135 83.0665 SY
<0a> 147.6 83.1787 SY
<0a> 160.2 83.1504 SY
<0a> 172.8 83.0596 SY
<06> 84.6 83.2788 SY
<06> 97.2 83.0181 SY
<06> 109.8 83.1223 SY
<06> 122.4 83.1787 SY
<06> 135 83.0665 SY
<06> 147.6 83.1575 SY
<06> 160.2 83.1223 SY
<06> 172.8 83.0526 SY
<0e> 84.6 83.2788 SY
<0e> 97.2 83.0112 SY
<0e> 109.8 83.1293 SY
<0e> 122.4 83.1858 SY
<0e> 135 83.0734 SY
<0e> 147.6 83.1083 SY
<0e> 160.2 83.1364 SY
<0e> 172.8 83.0457 SY
<02> 84.6 83.3077 SY
<02> 97.2 83.0181 SY
<02> 109.8 83.1504 SY
<02> 122.4 83.1787 SY
<02> 135 83.0804 SY
<02> 147.6 83.1716 SY
<02> 160.2 83.1575 SY
<02> 172.8 83.0526 SY
showpage
%%Trailer
end

%%EndDocument
FMENDEPSF
55.33 295.74 556.05 378.74 R
7 X
0 0 0 1 0 0 0 K
V
55.33 365.24 556.05 378.74 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.33 365.24 556.05 378.74 R
7 X
0 0 0 1 0 0 0 K
V
55.33 374.24 523.33 374.24 2 L
V
1 H
2 Z
0 X
N
54 301.34 561.33 738 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(FIGURE 9.  Performance of the SPEC95fp Benchmark Suite parallelized by the SUIF Compiler on 350 MHz AlphaServer 8400.) 55.33 359.24 T
1 F
0.33 (For each of the ten benchmarks, we compare the performance of the benchmark with one to eight processors using the page coloring, bin) 55.33 348.24 P
0.65 (hopping and CDPC page mapping policies. Additionally) 55.33 337.24 P
0.65 (, we report the time with bin hopping when data structures are not aligned. The) 262.43 337.24 P
1.07 (performance is compared with an ideal speedup curve based on the best of the four uniprocessor times. All results are expressed as a) 55.33 326.24 P
55.33 301.34 556.05 312.24 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
55.33 298.74 556.05 312.24 R
7 X
0 0 0 1 0 0 0 K
V
55.33 307.74 523.33 307.74 2 L
V
1 H
2 Z
0 X
N
54 301.34 561.33 738 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
(SPEC95fp ratio. The ratio is the speedup over the reference execution time of a SparcStation10.) 55.33 315.24 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
54 72 304.78 293.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.72 21.59 305.25 294.98 R
7 X
0 0 0 1 0 0 0 K
V
1 7 Q
0 X
(Benchmark) 60.4 252.32 T
(Execution T) 163.76 268.32 T
(ime \050seconds\051) 197.93 268.32 T
(Bin Hopping) 114.17 252.32 T
(Page Coloring) 180.24 252.32 T
(CDPC) 259.25 252.32 T
(1P) 105.99 236.32 T
(4P) 128.65 236.32 T
(8P) 151.32 236.32 T
(1P) 174 236.32 T
(4P) 196.67 236.32 T
(8P) 219.35 236.32 T
(1P) 242.02 236.32 T
(4P) 264.7 236.32 T
(8P) 287.37 236.32 T
(101.tomcatv) 56.72 224.32 T
( 232.5) 101.52 224.32 T
(  50.4) 125.93 224.32 T
(  26.2) 148.6 224.32 T
( 229.7) 169.53 224.32 T
(  70.2) 193.96 224.32 T
(  45.0) 216.63 224.32 T
( 223.0) 237.56 224.32 T
(  34.1) 261.98 224.32 T
(  20.9) 284.66 224.32 T
(102.swim) 56.72 212.32 T
( 296.2) 101.52 212.32 T
(  57.2) 125.93 212.32 T
(  24.9) 148.6 212.32 T
( 280.1) 169.53 212.32 T
(  77.7) 193.96 212.32 T
(  46.7) 216.63 212.32 T
( 295.3) 237.56 212.32 T
(  36.2) 261.98 212.32 T
(  18.3) 284.66 212.32 T
(103.su2cor) 56.72 200.32 T
( 164.2) 101.52 200.32 T
(  50.9) 125.93 200.32 T
(  35.8) 148.6 200.32 T
( 166.9) 169.53 200.32 T
(  52.3) 193.96 200.32 T
(  37.0) 216.63 200.32 T
( 163.7) 237.56 200.32 T
(  50.6) 261.98 200.32 T
(  35.5) 284.66 200.32 T
(104.hydro2d) 56.72 188.32 T
( 254.9) 101.52 188.32 T
(  70.0) 125.93 188.32 T
(  42.5) 148.6 188.32 T
( 256.8) 169.53 188.32 T
(  75.3) 193.96 188.32 T
(  45.0) 216.63 188.32 T
( 260.0) 237.56 188.32 T
(  65.7) 261.98 188.32 T
(  43.5) 284.66 188.32 T
(107.mgrid) 56.72 176.32 T
( 205.2) 101.52 176.32 T
(  49.5) 125.93 176.32 T
(  31.2) 148.6 176.32 T
( 201.2) 169.53 176.32 T
(  45.2) 193.96 176.32 T
(  29.1) 216.63 176.32 T
( 201.2) 237.56 176.32 T
(  46.4) 261.98 176.32 T
(  29.0) 284.66 176.32 T
(1) 56.72 164.32 T
(10.applu) 59.96 164.32 T
( 324.1) 101.52 164.32 T
(  94.6) 125.93 164.32 T
(  52.3) 148.6 164.32 T
( 327.3) 169.53 164.32 T
(  94.4) 193.96 164.32 T
(  47.0) 216.63 164.32 T
( 324.0) 237.56 164.32 T
(  93.9) 261.98 164.32 T
(  44.5) 284.66 164.32 T
(125.turb3d) 56.72 152.32 T
( 309.2) 101.52 152.32 T
(  85.2) 125.93 152.32 T
(  51.0) 148.6 152.32 T
( 305.5) 169.53 152.32 T
(  85.7) 193.96 152.32 T
(  50.5) 216.63 152.32 T
( 307.3) 237.56 152.32 T
(  83.9) 261.98 152.32 T
(  48.7) 284.66 152.32 T
(141.apsi) 56.72 140.32 T
( 156.4) 101.52 140.32 T
( 157.8) 124.18 140.32 T
( 159.6) 146.85 140.32 T
( 156.0) 169.53 140.32 T
( 157.8) 192.21 140.32 T
( 159.6) 214.88 140.32 T
( 156.1) 237.56 140.32 T
( 157.7) 260.23 140.32 T
( 159.5) 282.91 140.32 T
(145.fpppp) 56.72 128.32 T
( 403.7) 101.52 128.32 T
( 403.7) 124.18 128.32 T
( 403.7) 146.85 128.32 T
( 403.7) 169.53 128.32 T
( 403.7) 192.21 128.32 T
( 403.7) 214.88 128.32 T
( 403.7) 237.56 128.32 T
( 403.7) 260.23 128.32 T
( 403.7) 282.91 128.32 T
(147.wave5) 56.72 116.32 T
( 169.9) 101.52 116.32 T
( 153.1) 124.18 116.32 T
( 157.4) 146.85 116.32 T
( 167.2) 169.53 116.32 T
( 151.6) 192.21 116.32 T
( 156.2) 214.88 116.32 T
( 167.4) 237.56 116.32 T
( 152.6) 260.23 116.32 T
( 155.9) 282.91 116.32 T
0 F
(SPEC95fp) 60.98 104.32 T
1 F
(13.7) 106.77 104.32 T
(36.0) 129.43 104.32 T
(53.0) 152.1 104.32 T
(13.8) 174.78 104.32 T
(33.8) 197.46 104.32 T
(47.6) 220.13 104.32 T
(13.8) 242.81 104.32 T
(39.8) 265.48 104.32 T
(57.4) 288.16 104.32 T
0 9 Q
(T) 54.72 91.98 T
(able 2. Execution T) 59.9 91.98 T
(ime and SPEC95fp rating on 350MHz) 133.74 91.98 T
54.72 72 304.78 77.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.72 64.48 305.25 77.98 R
7 X
0 0 0 1 0 0 0 K
V
54.72 73.48 522.72 73.48 2 L
V
1 H
2 Z
0 X
N
54 72 304.78 293.35 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
(AlphaServer with bin hopping, page coloring and CDPC.) 54.72 80.98 T
54.72 280.73 54.72 101.98 2 L
V
0.5 H
0 Z
N
98.35 281.23 98.35 99.98 2 L
V
2 H
N
166.35 265.23 166.35 231.98 2 L
V
0.5 H
N
166.35 233.98 166.35 99.98 2 L
V
2 H
N
234.38 265.23 234.38 231.98 2 L
V
0.5 H
N
234.38 233.98 234.38 99.98 2 L
V
2 H
N
302.41 280.73 302.41 233.98 2 L
V
0.5 H
N
302.41 231.98 302.41 101.98 2 L
V
2 H
N
54.47 280.98 302.66 280.98 2 L
V
0.5 H
N
97.35 264.98 302.66 264.98 2 L
V
N
54.47 232.98 303.41 232.98 2 L
V
2 H
N
54.47 220.98 303.41 220.98 2 L
V
0.25 H
N
54.47 208.98 303.41 208.98 2 L
V
N
54.47 196.98 303.41 196.98 2 L
V
N
54.47 184.98 303.41 184.98 2 L
V
N
54.47 172.98 303.41 172.98 2 L
V
N
54.47 160.98 303.41 160.98 2 L
V
N
54.47 148.98 303.41 148.98 2 L
V
N
54.47 136.98 303.41 136.98 2 L
V
N
54.47 124.98 303.41 124.98 2 L
V
N
54.47 112.98 303.41 112.98 2 L
V
2 H
N
54.47 100.98 303.41 100.98 2 L
V
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 612 792 C
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
3.89 (Our study of the SPEC95fp benchmark suite revealed that) 317.88 295.31 P
2.38 (numerical applications are sensitive to page mapping policies.) 317.88 285.31 P
3.68 (Compiler) 317.88 275.31 P
3.68 (-directed page coloring is ef) 351.7 275.31 P
3.68 (fective on both direct-) 467.23 275.31 P
-0.01 (mapped and two-way set-associative caches and is complementary) 317.88 265.31 P
8.82 (to latency-hiding techniques such as compiler) 317.88 255.31 P
8.82 (-inserted) 526.51 255.31 P
0.35 (prefetching. Compiler) 317.88 245.31 P
0.35 (-directed page coloring performs better than) 397.54 245.31 P
3.21 (page coloring and bin hopping \050two standard page mapping) 317.88 235.31 P
3.98 (policies implemented in commercial operating systems\051. By) 317.88 225.31 P
0.53 (improving the performance of some applications signi\336cantly) 317.88 215.31 P
0.53 (, we) 542.47 215.31 P
(obtain a SPEC95fp ratio of 57.4, which is the highest to date.) 317.88 205.31 T
0 12 Q
( Acknowledgments) 317.88 184.31 T
1 9 Q
0.26 (The authors wish to thank Evan T) 317.88 165.31 P
0.26 (orrie, Chris W) 440.82 165.31 P
0.26 (ilson, Dave Heine) 492.73 165.31 P
0.69 (and Kinshuk Govil for their help in the preparation of this paper) 317.88 155.31 P
0.69 (.) 555.75 155.31 P
2.51 (W) 317.88 145.31 P
2.51 (e also wish to thank the SUIF and SimOS teams for their) 325.66 145.31 P
1.83 (contributions to the infrastructure used in this study) 317.88 135.31 P
1.83 (. W) 515.83 135.31 P
1.83 (e thank) 529.93 135.31 P
1.24 (Robert Cohn, Zarka Cvetanovic, and Richard Grove from DEC.) 317.88 125.31 P
2.09 (This study is part of the Stanford FLASH and SUIF projects,) 317.88 115.31 P
1.23 (funded by ARP) 317.88 105.31 P
1.23 (A grant DABT63-94-C-0054 and ARP) 375.5 105.31 P
1.23 (A and Air) 519.56 105.31 P
-0.01 (Force Material Command Grant F30602-95-C-0098. This research) 317.88 95.31 P
0.88 (is also supported in part by an equipment grant from Digital. Ed) 317.88 85.31 P
3.43 (Bugnion is supported in part by a NSF Graduate Research) 317.88 75.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
2.23 (Fellowship. Monica Lam and Mendel Rosenblum are partially) 54 732 P
1.78 (supported by NSF Y) 54 722 P
1.78 (oung Investigator A) 132.69 722 P
1.78 (wards. T) 207.42 722 P
1.78 (odd Mowry is) 240.06 722 P
0.1 (partially supported by a Research Grant from the Natural Sciences) 54 712 P
1.3 (and Engineering Research Council of Canada, and by a Faculty) 54 702 P
0.84 (Development A) 54 692 P
0.84 (ward from IBM. Jennifer Anderson is currently a) 111.26 692 P
(researcher with Digital Equipment\325) 54 682 T
(s W) 180.73 682 T
(estern Research Lab.) 194.26 682 T
0 12 Q
( Refer) 54 661 T
(ences) 85.43 661 T
1 9 Q
([1]) 54 642 T
-0.12 (Saman P) 72 642 P
-0.12 (. Amarasinghe, Jennifer M. Anderson, Christopher S.) 102.63 642 P
2.19 (W) 72 632 P
2.19 (ilson, Shih-W) 80.14 632 P
2.19 (ei Liao, Robert S. French, Mary W) 131.61 632 P
2.19 (. Hall,) 269.68 632 P
0.24 (Brian R. Murphy and Monica S. Lam. The Multiprocessor as) 72 622 P
0.74 (a General-Purpose Processor: A Software Perspective.) 72 612 P
2 F
0.74 (IEEE) 274.63 612 P
(Micr) 72 602 T
(o,) 89.16 602 T
1 F
(16\0503\051, Jun. 1996.) 98.16 602 T
([2]) 54 589 T
0.14 (Jennifer M. Anderson, Saman P) 72 589 P
0.14 (. Amarasinghe and Monica S.) 186.56 589 P
8.29 (Lam, \322Data and Computation T) 72 579 P
8.29 (ransformations for) 219.09 579 P
-0.08 (Multiprocessors,\323 In) 72 569 P
2 F
-0.08 (Pr) 148.09 569 P
-0.08 (oceedings of the Fifth ACM SIGPLAN) 156.75 569 P
6.86 (Symposium on Principles and Practice of Parallel) 72 559 P
(Pr) 72 549 T
(ogramming) 80.67 549 T
1 F
(, Jul.1995, pp. 166-178.) 122.17 549 T
([3]) 54 536 T
5.31 (Jennifer M. Anderson and Monica S. Lam, \322Global) 72 536 P
4.02 (Optimizations for Parallelism and Locality on Scalable) 72 526 P
0.07 (Parallel Machines\323, In) 72 516 P
2 F
0.07 (Pr) 155.19 516 P
0.07 (oceedings of the ACM SIGPLAN\32593) 163.85 516 P
7.11 (Confer) 72 506 P
7.11 (ence on Pr) 96.67 506 P
7.11 (ogramming Language Design and) 149.54 506 P
(Implementation) 72 496 T
1 F
(, Jun. 1993, pp. 1) 128.49 496 T
(12-125.) 190.16 496 T
([4]) 54 483 T
1.31 (Brian N. Bershad, Dennis Lee, Theodore H. Romer) 72 483 P
1.31 (, and J.) 266.01 483 P
2.34 (Bradley Chen, \322A) 72 473 P
2.34 (voiding Con\337ict Misses Dynamically in) 140.75 473 P
1.45 (Lar) 72 463 P
1.45 (ge Direct-Mapped Caches\323, In) 84.33 463 P
2 F
1.45 (Pr) 202.35 463 P
1.45 (oceedings of the Sixth) 211.02 463 P
5.31 (International Confer) 72 453 P
5.31 (ence on Ar) 151.73 453 P
5.31 (chitectural Support for) 201 453 P
0.37 (Pr) 72 443 P
0.37 (ogramming Languages and Operating Systems) 80.67 443 P
1 F
0.37 (, Oct. 1994,) 251.14 443 P
(pp. 158-170.) 72 433 T
([5]) 54 420 T
2.76 (David F) 72 420 P
2.76 (. Bacon, Susan L. Graham and Oliver J. Sharp,) 103.29 420 P
13.57 (\322Compiler T) 72 410 P
13.57 (ransformations for High-Performance) 131.01 410 P
(Computing\323, In) 72 400 T
2 F
(Computing Surveys) 130.75 400 T
1 F
(, 26 \0504\051, Dec. 1994.) 201 400 T
([6]) 54 387 T
5.28 (David Callahan, Ken Kennedy and Allan Porter\336eld,) 72 387 P
4.87 (\322Software Prefetching\323, In) 72 377 P
2 F
4.87 (Pr) 185.09 377 P
4.87 (oceedings of the Fourth) 193.76 377 P
5.31 (International Confer) 72 367 P
5.31 (ence on Ar) 151.73 367 P
5.31 (chitectural Support for) 201 367 P
0.28 (Pr) 72 357 P
0.28 (ogramming Languages and Operating Systems) 80.67 357 P
1 F
0.28 (, Apr) 250.8 357 P
0.28 (. 1991,) 269.08 357 P
(pp. 40-52.) 72 347 T
([7]) 54 334 T
2.91 (Steve Carr) 72 334 P
2.91 (, Kathryn S. McKinley and Chau-W) 112.79 334 P
2.91 (en T) 256.85 334 P
2.91 (seng,) 275.37 334 P
1.73 (\322Compiler Optimizations for Improving Data Locality\323, In) 72 324 P
2 F
5.05 (Pr) 72 314 P
5.05 (oceedings of the Sixth International Confer) 80.67 314 P
5.05 (ence on) 261.33 314 P
4.21 (Ar) 72 304 P
4.21 (chitectural Support for Pr) 80.67 304 P
4.21 (ogramming Languages and) 186.71 304 P
(Operating Systems) 72 294 T
1 F
(, Oct. 1994, pp. 252-262.) 139.74 294 T
([8]) 54 281 T
1.23 (Michel Dubois, Jonas Skeppstedt, Livio Ricciulli, Krishnan) 72 281 P
5.32 (Ramamurthy and Per Stenstrom, \322The Detection and) 72 271 P
4.56 (Elimination of Useless Misses in Multiprocessors\323, In) 72 261 P
2 F
5.41 (Pr) 72 251 P
5.41 (oceedings of the 20th International Symposium on) 80.67 251 P
(Computer Ar) 72 241 T
(chitectur) 118.92 241 T
(e) 150.58 241 T
1 F
(, May 1993, pp. 88-97.) 154.57 241 T
([9]) 54 228 T
-0.06 (Susan J. Eggers and Randy H. Katz, \322The ef) 72 228 P
-0.06 (fect of sharing on) 231.07 228 P
4.67 (cache and bus performance of parallel programs\323, In) 72 218 P
2 F
4.77 (Pr) 72 208 P
4.77 (oceedings of the Thir) 80.67 208 P
4.77 (d International Confer) 170.9 208 P
4.77 (ence on) 261.61 208 P
4.21 (Ar) 72 198 P
4.21 (chitectural Support for Pr) 80.67 198 P
4.21 (ogramming Languages and) 186.71 198 P
(Operating Systems) 72 188 T
1 F
(, Apr) 139.74 188 T
(.1989, pp. 257-270.) 157.74 188 T
([10]) 54 175 T
-0.07 (Dawson R. Engler) 72 175 P
-0.07 (, M. Frans Kaashoek and James O\325T) 137.75 175 P
-0.07 (oole Jr) 268.19 175 P
-0.07 (.) 291.87 175 P
7.68 (\322Exokernel: An Operating System Architecture for) 72 165 P
0.6 (Application-Level Resource Managment\323, In) 72 155 P
2 F
0.6 (Pr) 239.61 155 P
0.6 (oceedings of) 248.28 155 P
1.3 (the 15th ACM Symposium on Operating System Principles,) 72 145 P
1 F
(Dec. 1995, pp 251-266.) 72 135 T
([1) 54 122 T
(1]) 61.16 122 T
4.98 (Manish Gupta and Prith Banerjee, \322Demonstration of) 72 122 P
3.31 (Automatic Data Partitioning T) 72 112 P
3.31 (echniques for Parallelizing) 191.03 112 P
2.64 (Compilers on Multicomputers.\323 In) 72 102 P
2 F
2.64 (IEEE T) 209.32 102 P
2.64 (ransactions on) 238.22 102 P
0.92 (Parallel and Distributed Systems) 72 92 P
1 F
0.92 (, 3\0502\051, Mar) 194.02 92 P
0.92 (. 1992, pp. 179-) 234.35 92 P
(193.) 72 82 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
([12]) 317.88 732.08 T
2.13 (Mary W) 335.88 732.08 P
2.13 (. Hall, Saman P) 367.42 732.08 P
2.13 (. Amarasinghe, Brian R. Murphy) 429.07 732.08 P
2.13 (,) 555.75 732.08 P
0.31 (Shih-W) 335.88 722.08 P
0.31 (ei Liao and Monica S. Lam, \322Detecting Coarse-Grain) 363.16 722.08 P
-0.1 (Parallelism Using an Interprocedural Parallelizing Compiler) 335.88 712.08 P
-0.1 (,\323) 551.75 712.08 P
(In) 335.88 702.08 T
2 F
(Pr) 345.63 702.08 T
(oceedings of Super) 354.29 702.08 T
(computing \32495) 422.45 702.08 T
1 F
(, Dec. 1995.) 474.7 702.08 T
([13]) 317.88 689.08 T
0.11 (Kieran Harty and David R. Cheriton, \322Application-controlled) 335.88 689.08 P
0.63 (Physical Memory using External Page-Cache Management\323,) 335.88 679.08 P
1.94 (In) 335.88 669.08 P
2 F
1.94 (Pr) 347.56 669.08 P
1.94 (oceedings of the Fourth International Confer) 356.23 669.08 P
1.94 (ence on) 528.33 669.08 P
4.21 (Ar) 335.88 659.08 P
4.21 (chitectural Support for Pr) 344.55 659.08 P
4.21 (ogramming Languages and) 450.59 659.08 P
(Operating Systems) 335.88 649.08 T
1 F
(, Apr) 405.87 649.08 T
(. 1991.) 423.87 649.08 T
([14]) 317.88 636.08 T
1.94 (T) 335.88 636.08 P
1.94 (or E. Jeremiassen and Susan J. Eggers, \322Reducing False) 340.75 636.08 P
6.38 (Sharing on Shared Memory Multiprocessors through) 335.88 626.08 P
0.59 (Compile T) 335.88 616.08 P
0.59 (ime Data T) 374.91 616.08 P
0.59 (ransformations\323, In) 416.26 616.08 P
2 F
0.59 (Pr) 489.67 616.08 P
0.59 (oceedings of the) 498.33 616.08 P
0.41 (Fifth ACM SIGPLAN Symposium on Principles and Practice) 335.88 606.08 P
(of Parallel Pr) 335.88 596.08 T
(ogramming) 385.55 596.08 T
1 F
(, Jul. 1995, pp. 179-188.) 427.05 596.08 T
([15]) 317.88 583.08 T
1.29 (Ken Kennedy and Ulrich Kremer) 335.88 583.08 P
1.29 (, \322Automatic Data Layout) 460.64 583.08 P
7.04 (for High Performance Fortran\323, In) 335.88 573.08 P
2 F
7.04 (Pr) 497.05 573.08 P
7.04 (oceedings of) 505.72 573.08 P
(Super) 335.88 563.08 T
(computing \32495,) 356.54 563.08 T
1 F
(Dec. 1995.) 413.29 563.08 T
([16]) 317.88 550.08 T
3.05 (Richard E. Kessler and Mark D. Hill, \322Page Placement) 335.88 550.08 P
4.93 (Algorithms for Lar) 335.88 540.08 P
4.93 (ge Real-indexed Caches\323, In) 414.07 540.08 P
2 F
4.93 (ACM) 539 540.08 P
(T) 335.88 530.08 T
(ransactions on Computer Systems) 340.39 530.08 T
1 F
(, 10\0504\051, Nov) 462.64 530.08 T
(. 1992.) 506.04 530.08 T
([17]) 317.88 517.08 T
0.03 (Butler W) 335.88 517.08 P
0.03 (. Lampson, \322Hints for Computer System Design\323, In) 368.33 517.08 P
2 F
2.53 (Pr) 335.88 507.08 P
2.53 (oceedings of the Ninth ACM Symposium on Operating) 344.55 507.08 P
(Systems Principles,) 335.88 497.08 T
1 F
(Oct. 1983, pp. 33-48.) 408.12 497.08 T
([18]) 317.88 484.08 T
0.51 (T) 335.88 484.08 P
0.51 (odd C. Mowry) 340.75 484.08 P
0.51 (, Monica S. Lam and Anoop Gupta, \322Design) 393.94 484.08 P
0.43 (and Evaluation of a Compiler Algorithm for Prefetching\323, In) 335.88 474.08 P
2 F
5.13 (Pr) 335.88 464.08 P
5.13 (oceedings of the Fifth International Confer) 344.55 464.08 P
5.13 (ence on) 525.13 464.08 P
4.21 (Ar) 335.88 454.08 P
4.21 (chitectural Support for Pr) 344.55 454.08 P
4.21 (ogramming Languages and) 450.59 454.08 P
(Operating Systems) 335.88 444.08 T
1 F
(, Oct. 1992, pp. 62-73.) 403.62 444.08 T
([19]) 317.88 431.08 T
3.42 (T) 335.88 431.08 P
3.42 (odd C. Mowry) 340.75 431.08 P
3.42 (, \322T) 399.75 431.08 P
3.42 (olerating Latency through Software-) 416.53 431.08 P
0.83 (controlled Data Prefetching\323, Ph.D. thesis,) 335.88 421.08 P
2 F
0.83 (T) 495.75 421.08 P
0.83 (echnical Report) 499.93 421.08 P
(CSL-TR-94-626,) 335.88 411.08 T
1 F
(Stanford University) 397.88 411.08 T
(, Mar) 468.54 411.08 T
(. 1994.) 487.54 411.08 T
([20]) 317.88 398.08 T
1.56 (Theodore H. Romer) 335.88 398.08 P
1.56 (, Dennis Lee, Brian N. Bershad and J.) 410.87 398.08 P
1.16 (Bradley Chen, \322Dynamic Page Mapping Policies for Cache) 335.88 388.08 P
0.96 (Con\337ict Resolution on Standard Hardware\323, In) 335.88 378.08 P
2 F
0.96 (Pr) 513.34 378.08 P
0.96 (oceedings) 522.01 378.08 P
1.77 (of the First Symposium on Operating Systems Design and) 335.88 368.08 P
(Implementation,) 335.88 358.08 T
1 F
(Nov) 396.87 358.08 T
(. 1994, pp. 255-266.) 411.79 358.08 T
([21]) 317.88 345.08 T
0.07 (Mendel Rosenblum, Stephen A. Herrod, Emmett W) 335.88 345.08 P
0.07 (itchel and) 522.68 345.08 P
0.48 (Anoop Gupta, \322Complete Computer Simulation: The SimOS) 335.88 335.08 P
2.16 (Approach\323, In) 335.88 325.08 P
2 F
2.16 (IEEE Parallel and Distributed T) 393.93 325.08 P
2.16 (echnology) 519.26 325.08 P
2.16 (,) 555.75 325.08 P
1 F
(3\0504\051, Fall 1995.) 335.88 315.08 T
([22]) 317.88 302.08 T
9.1 (Standard Performance Evaluation Corporation, The) 335.88 302.08 P
(SPEC95fp benchmark suite.) 335.88 292.08 T
2 F
(http://www) 439.87 292.08 T
(.spechbench.or) 479.22 292.08 T
(g) 533.38 292.08 T
1 F
(.) 537.88 292.08 T
([23]) 317.88 279.08 T
3.3 (Ben V) 335.88 279.08 P
3.3 (er) 361.42 279.08 P
3.3 (ghese, Scott Devine, Anoop Gupta and Mendel) 368.25 279.08 P
4.83 (Rosenblum, \322Operating System Support for Improving) 335.88 269.08 P
-0.08 (Locality on CC-NUMA Compute Servers\323, In) 335.88 259.08 P
2 F
-0.08 (Pr) 504.17 259.08 P
-0.08 (oceedings of) 512.83 259.08 P
5.31 (the Seventh International Confer) 335.88 249.08 P
5.31 (ence on Ar) 469.72 249.08 P
5.31 (chitectural) 519 249.08 P
-0.22 (Support for Pr) 335.88 239.08 P
-0.22 (ogramming Languages and Operating Systems,) 387.62 239.08 P
1 F
(Oct. 1996.) 335.88 229.08 T
([24]) 317.88 216.08 T
1.11 (Robert P) 335.88 216.08 P
1.11 (. W) 367.74 216.08 P
1.11 (ilson, Robert S. French, Christopher S. W) 381.48 216.08 P
1.11 (ilson,) 538.24 216.08 P
0.82 (Saman P) 335.88 206.08 P
0.82 (. Amarasinghe, Jennifer M. Anderson, Steven W) 367.45 206.08 P
0.82 (.K.) 547 206.08 P
3.37 (Tjiang, Shi-W) 335.88 196.08 P
3.37 (ei Liao, Chau-W) 390.02 196.08 P
3.37 (en T) 456.27 196.08 P
3.37 (seng, Mary W) 475.25 196.08 P
3.37 (. Hall,) 532.39 196.08 P
5.18 (Monica S. Lam and John L. Hennessy) 335.88 186.08 P
5.18 (, \322SUIF: An) 503.88 186.08 P
1.28 (Infrastructure for Research on Parallelizing and Optimizing) 335.88 176.08 P
(Compilers\323, In) 335.88 166.08 T
2 F
(ACM SIGPLAN Notices) 391.63 166.08 T
1 F
(, 29\05012\051, Dec. 1994.) 478.12 166.08 T
([25]) 317.88 153.08 T
1.07 (Emmett W) 335.88 153.08 P
1.07 (itchel and Mendel Rosenblum, \322Embra: Fast and) 375.84 153.08 P
1.5 (Flexible Machine Simulation\323, In) 335.88 143.08 P
2 F
1.5 (Pr) 465.11 143.08 P
1.5 (oceedings of the ACM) 473.77 143.08 P
-0.2 (SIGMETRICS \32496 Confer) 335.88 133.08 P
-0.2 (ence on Measur) 427.65 133.08 P
-0.2 (ement and Modeling) 484.4 133.08 P
(of Computer Systems) 335.88 123.08 T
1 F
(, May 1996, pp. 68-79.) 411.88 123.08 T
([26]) 317.88 110.08 T
2.54 (Michael E. W) 335.88 110.08 P
2.54 (olf and Monica S. Lam, \322A Data Locality) 390.48 110.08 P
5.78 (Optimizing Algorithm\323, In) 335.88 100.08 P
2 F
5.78 (Pr) 452.24 100.08 P
5.78 (oceedings of the ACM) 460.9 100.08 P
-0.2 (SIGPLAN \32491 Confer) 335.88 90.08 P
-0.2 (ence on Pr) 412.65 90.08 P
-0.2 (ogramming Language Design) 450.9 90.08 P
(and Implementation,) 335.88 80.08 T
1 F
( June 1991, pp. 30-44.) 410.37 80.08 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 12
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Symbol
%%+ Helvetica-Bold
%%+ Courier
%%EOF
